
Block#1
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#1
    Expr_ConstFetch
        name: LITERAL('WPINC')
        result: Var#2
    Expr_BinaryOp_Concat
        left: Var#1
        right: Var#2
        result: Var#3
    Expr_BinaryOp_Concat
        left: Var#3
        right: LITERAL('/option.php')
        result: Var#4
    Expr_Include
        expr: Var#4
        result: Var#5
    Stmt_Function<mysql2date>
    Stmt_Function<current_time>
    Stmt_Function<date_i18n>
    Stmt_Function<wp_maybe_decline_date>
    Stmt_Function<number_format_i18n>
    Stmt_Function<size_format>
    Stmt_Function<get_weekstartend>
    Stmt_Function<maybe_unserialize>
    Stmt_Function<is_serialized>
    Stmt_Function<is_serialized_string>
    Stmt_Function<maybe_serialize>
    Stmt_Function<xmlrpc_getposttitle>
    Stmt_Function<xmlrpc_getpostcategory>
    Stmt_Function<xmlrpc_removepostdata>
    Stmt_Function<wp_extract_urls>
    Stmt_Function<do_enclose>
    Stmt_Function<wp_get_http_headers>
    Stmt_Function<is_new_day>
    Stmt_Function<build_query>
    Stmt_Function<_http_build_query>
    Stmt_Function<add_query_arg>
    Stmt_Function<remove_query_arg>
    Stmt_Function<wp_removable_query_args>
    Stmt_Function<add_magic_quotes>
    Stmt_Function<wp_remote_fopen>
    Stmt_Function<wp>
    Stmt_Function<get_status_header_desc>
    Stmt_Function<status_header>
    Stmt_Function<wp_get_nocache_headers>
    Stmt_Function<nocache_headers>
    Stmt_Function<cache_javascript_headers>
    Stmt_Function<get_num_queries>
    Stmt_Function<bool_from_yn>
    Stmt_Function<do_feed>
    Stmt_Function<do_feed_rdf>
    Stmt_Function<do_feed_rss>
    Stmt_Function<do_feed_rss2>
    Stmt_Function<do_feed_atom>
    Stmt_Function<do_robots>
    Stmt_Function<is_blog_installed>
    Stmt_Function<wp_nonce_url>
    Stmt_Function<wp_nonce_field>
    Stmt_Function<wp_referer_field>
    Stmt_Function<wp_original_referer_field>
    Stmt_Function<wp_get_referer>
    Stmt_Function<wp_get_raw_referer>
    Stmt_Function<wp_get_original_referer>
    Stmt_Function<wp_mkdir_p>
    Stmt_Function<path_is_absolute>
    Stmt_Function<path_join>
    Stmt_Function<wp_normalize_path>
    Stmt_Function<get_temp_dir>
    Stmt_Function<wp_is_writable>
    Stmt_Function<win_is_writable>
    Stmt_Function<wp_get_upload_dir>
    Stmt_Function<wp_upload_dir>
    Stmt_Function<_wp_upload_dir>
    Stmt_Function<wp_unique_filename>
    Stmt_Function<wp_upload_bits>
    Stmt_Function<wp_ext2type>
    Stmt_Function<wp_check_filetype>
    Stmt_Function<wp_check_filetype_and_ext>
    Stmt_Function<wp_get_image_mime>
    Stmt_Function<wp_get_mime_types>
    Stmt_Function<wp_get_ext_types>
    Stmt_Function<get_allowed_mime_types>
    Stmt_Function<wp_nonce_ays>
    Stmt_Function<wp_die>
    Stmt_Function<_default_wp_die_handler>
    Stmt_Function<_xmlrpc_wp_die_handler>
    Stmt_Function<_ajax_wp_die_handler>
    Stmt_Function<_scalar_wp_die_handler>
    Stmt_Function<wp_json_encode>
    Stmt_Function<_wp_json_sanity_check>
    Stmt_Function<_wp_json_convert_string>
    Stmt_Function<_wp_json_prepare_data>
    Stmt_Function<wp_send_json>
    Stmt_Function<wp_send_json_success>
    Stmt_Function<wp_send_json_error>
    Stmt_Function<wp_check_jsonp_callback>
    Stmt_Function<_config_wp_home>
    Stmt_Function<_config_wp_siteurl>
    Stmt_Function<_mce_set_direction>
    Stmt_Function<smilies_init>
    Stmt_Function<wp_parse_args>
    Stmt_Function<wp_parse_id_list>
    Stmt_Function<wp_array_slice_assoc>
    Stmt_Function<wp_is_numeric_array>
    Stmt_Function<wp_filter_object_list>
    Stmt_Function<wp_list_filter>
    Stmt_Function<wp_list_pluck>
    Stmt_Function<wp_maybe_load_widgets>
    Stmt_Function<wp_widgets_add_menu>
    Stmt_Function<wp_ob_end_flush_all>
    Stmt_Function<dead_db>
    Stmt_Function<absint>
    Stmt_Function<_deprecated_function>
    Stmt_Function<_deprecated_constructor>
    Stmt_Function<_deprecated_file>
    Stmt_Function<_deprecated_argument>
    Stmt_Function<_deprecated_hook>
    Stmt_Function<_doing_it_wrong>
    Stmt_Function<is_lighttpd_before_150>
    Stmt_Function<apache_mod_loaded>
    Stmt_Function<iis7_supports_permalinks>
    Stmt_Function<validate_file>
    Stmt_Function<force_ssl_admin>
    Stmt_Function<wp_guess_url>
    Stmt_Function<wp_suspend_cache_addition>
    Stmt_Function<wp_suspend_cache_invalidation>
    Stmt_Function<is_main_site>
    Stmt_Function<is_main_network>
    Stmt_Function<get_main_network_id>
    Stmt_Function<global_terms_enabled>
    Stmt_Function<wp_timezone_override_offset>
    Stmt_Function<_wp_timezone_choice_usort_callback>
    Stmt_Function<wp_timezone_choice>
    Stmt_Function<_cleanup_header_comment>
    Stmt_Function<wp_scheduled_delete>
    Stmt_Function<get_file_data>
    Stmt_Function<__return_true>
    Stmt_Function<__return_false>
    Stmt_Function<__return_zero>
    Stmt_Function<__return_empty_array>
    Stmt_Function<__return_null>
    Stmt_Function<__return_empty_string>
    Stmt_Function<send_nosniff_header>
    Stmt_Function<_wp_mysql_week>
    Stmt_Function<wp_find_hierarchy_loop>
    Stmt_Function<wp_find_hierarchy_loop_tortoise_hare>
    Stmt_Function<send_frame_options_header>
    Stmt_Function<wp_allowed_protocols>
    Stmt_Function<wp_debug_backtrace_summary>
    Stmt_Function<_get_non_cached_ids>
    Stmt_Function<_device_can_upload>
    Stmt_Function<wp_is_stream>
    Stmt_Function<wp_checkdate>
    Stmt_Function<wp_auth_check_load>
    Stmt_Function<wp_auth_check_html>
    Stmt_Function<wp_auth_check>
    Stmt_Function<get_tag_regex>
    Stmt_Function<_canonical_charset>
    Stmt_Function<mbstring_binary_safe_encoding>
    Stmt_Function<reset_mbstring_encoding>
    Stmt_Function<wp_validate_boolean>
    Stmt_Function<wp_delete_file>
    Stmt_Function<wp_delete_file_from_directory>
    Stmt_Function<wp_post_preview_js>
    Stmt_Function<mysql_to_rfc3339>
    Stmt_Function<wp_raise_memory_limit>
    Terminal_Return

Function mysql2date():
Block#1
    Expr_Param
        name: LITERAL('format')
        result: Var#1<$format>
    Expr_Param
        name: LITERAL('date')
        result: Var#2<$date>
    Expr_Param
        name: LITERAL('translate')
        defaultVar: Var#3
        result: Var#4<$translate>
        defaultBlock: Block#2
    Expr_Empty
        expr: Var#2<$date>
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#3

Block#3
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#6
    Terminal_Return
        expr: Var#6

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#4
    Var#7<$format> = Phi(Var#1<$format>)
    Var#8<$date> = Phi(Var#2<$date>)
    Var#9<$translate> = Phi(Var#4<$translate>)
    Expr_BinaryOp_Equal
        left: LITERAL('G')
        right: Var#7<$format>
        result: Var#10
    Stmt_JumpIf
        cond: Var#10
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Var#11<$date> = Phi(Var#8<$date>)
    Expr_BinaryOp_Concat
        left: Var#11<$date>
        right: LITERAL(' +0000')
        result: Var#12
    Expr_FuncCall
        name: LITERAL('strtotime')
        args[0]: Var#12
        result: Var#13
    Terminal_Return
        expr: Var#13

Block#7
    Parent: Block#5
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#7
    Var#14<$date> = Phi(Var#8<$date>)
    Var#15<$format> = Phi(Var#7<$format>)
    Var#16<$translate> = Phi(Var#9<$translate>)
    Expr_FuncCall
        name: LITERAL('strtotime')
        args[0]: Var#14<$date>
        result: Var#17
    Expr_Assign
        var: Var#18<$i>
        expr: Var#17
        result: Var#19
    Expr_BinaryOp_Equal
        left: LITERAL('U')
        right: Var#15<$format>
        result: Var#20
    Stmt_JumpIf
        cond: Var#20
        if: Block#9
        else: Block#10

Block#9
    Parent: Block#8
    Var#21<$i> = Phi(Var#18<$i>)
    Terminal_Return
        expr: Var#21<$i>

Block#10
    Parent: Block#8
    Stmt_Jump
        target: Block#11

Block#11
    Parent: Block#10
    Var#22<$translate> = Phi(Var#16<$translate>)
    Var#23<$format> = Phi(Var#15<$format>)
    Var#24<$i> = Phi(Var#18<$i>)
    Stmt_JumpIf
        cond: Var#22<$translate>
        if: Block#12
        else: Block#13

Block#12
    Parent: Block#11
    Var#25<$format> = Phi(Var#23<$format>)
    Var#26<$i> = Phi(Var#24<$i>)
    Expr_FuncCall
        name: LITERAL('date_i18n')
        args[0]: Var#25<$format>
        args[1]: Var#26<$i>
        result: Var#27
    Terminal_Return
        expr: Var#27

Block#13
    Parent: Block#11
    Var#28<$format> = Phi(Var#23<$format>)
    Var#29<$i> = Phi(Var#24<$i>)
    Expr_FuncCall
        name: LITERAL('date')
        args[0]: Var#28<$format>
        args[1]: Var#29<$i>
        result: Var#30
    Terminal_Return
        expr: Var#30

Function current_time():
Block#1
    Expr_Param
        name: LITERAL('type')
        result: Var#1<$type>
    Expr_Param
        name: LITERAL('gmt')
        defaultVar: LITERAL(0)
        result: Var#2<$gmt>
        defaultBlock: Block#2
    Stmt_Switch
        cond: Var#1<$type>
        cases[0]: LITERAL('mysql')
        cases[1]: LITERAL('timestamp')
        targets[0]: Block#3
        targets[1]: Block#4
        default: Block#5

Block#2

Block#3
    Parent: Block#1
    Var#3<$gmt> = Phi(Var#2<$gmt>)
    Stmt_JumpIf
        cond: Var#3<$gmt>
        if: Block#6
        else: Block#7

Block#4
    Parent: Block#1
    Var#4<$gmt> = Phi(Var#2<$gmt>)
    Stmt_JumpIf
        cond: Var#4<$gmt>
        if: Block#8
        else: Block#9

Block#5
    Parent: Block#1
    Var#5<$gmt> = Phi(Var#2<$gmt>)
    Stmt_JumpIf
        cond: Var#5<$gmt>
        if: Block#10
        else: Block#11

Block#6
    Parent: Block#3
    Expr_FuncCall
        name: LITERAL('gmdate')
        args[0]: LITERAL('Y-m-d H:i:s')
        result: Var#6
    Expr_Assign
        var: Var#7
        expr: Var#6
        result: Var#8
    Stmt_Jump
        target: Block#12

Block#7
    Parent: Block#3
    Expr_FuncCall
        name: LITERAL('time')
        result: Var#9
    Expr_FuncCall
        name: LITERAL('get_option')
        args[0]: LITERAL('gmt_offset')
        result: Var#10
    Expr_ConstFetch
        name: LITERAL('HOUR_IN_SECONDS')
        result: Var#11
    Expr_BinaryOp_Mul
        left: Var#10
        right: Var#11
        result: Var#12
    Expr_BinaryOp_Plus
        left: Var#9
        right: Var#12
        result: Var#13
    Expr_FuncCall
        name: LITERAL('gmdate')
        args[0]: LITERAL('Y-m-d H:i:s')
        args[1]: Var#13
        result: Var#14
    Expr_Assign
        var: Var#15
        expr: Var#14
        result: Var#16
    Stmt_Jump
        target: Block#12

Block#8
    Parent: Block#4
    Expr_FuncCall
        name: LITERAL('time')
        result: Var#17
    Expr_Assign
        var: Var#18
        expr: Var#17
        result: Var#19
    Stmt_Jump
        target: Block#13

Block#9
    Parent: Block#4
    Expr_FuncCall
        name: LITERAL('time')
        result: Var#20
    Expr_FuncCall
        name: LITERAL('get_option')
        args[0]: LITERAL('gmt_offset')
        result: Var#21
    Expr_ConstFetch
        name: LITERAL('HOUR_IN_SECONDS')
        result: Var#22
    Expr_BinaryOp_Mul
        left: Var#21
        right: Var#22
        result: Var#23
    Expr_BinaryOp_Plus
        left: Var#20
        right: Var#23
        result: Var#24
    Expr_Assign
        var: Var#25
        expr: Var#24
        result: Var#26
    Stmt_Jump
        target: Block#13

Block#10
    Parent: Block#5
    Var#27<$type> = Phi(Var#1<$type>)
    Expr_FuncCall
        name: LITERAL('date')
        args[0]: Var#27<$type>
        result: Var#28
    Expr_Assign
        var: Var#29
        expr: Var#28
        result: Var#30
    Stmt_Jump
        target: Block#14

Block#11
    Parent: Block#5
    Var#31<$type> = Phi(Var#1<$type>)
    Expr_FuncCall
        name: LITERAL('time')
        result: Var#32
    Expr_FuncCall
        name: LITERAL('get_option')
        args[0]: LITERAL('gmt_offset')
        result: Var#33
    Expr_ConstFetch
        name: LITERAL('HOUR_IN_SECONDS')
        result: Var#34
    Expr_BinaryOp_Mul
        left: Var#33
        right: Var#34
        result: Var#35
    Expr_BinaryOp_Plus
        left: Var#32
        right: Var#35
        result: Var#36
    Expr_FuncCall
        name: LITERAL('date')
        args[0]: Var#31<$type>
        args[1]: Var#36
        result: Var#37
    Expr_Assign
        var: Var#38
        expr: Var#37
        result: Var#39
    Stmt_Jump
        target: Block#14

Block#12
    Parent: Block#6
    Parent: Block#7
    Var#40 = Phi(Var#7, Var#15)
    Terminal_Return
        expr: Var#40

Block#13
    Parent: Block#8
    Parent: Block#9
    Var#41 = Phi(Var#18, Var#25)
    Terminal_Return
        expr: Var#41

Block#14
    Parent: Block#10
    Parent: Block#11
    Var#42 = Phi(Var#29, Var#38)
    Terminal_Return
        expr: Var#42

Function date_i18n():
Block#1
    Expr_Param
        name: LITERAL('dateformatstring')
        result: Var#1<$dateformatstring>
    Expr_Param
        name: LITERAL('unixtimestamp')
        defaultVar: Var#2
        result: Var#3<$unixtimestamp>
        defaultBlock: Block#2
    Expr_Param
        name: LITERAL('gmt')
        defaultVar: Var#4
        result: Var#5<$gmt>
        defaultBlock: Block#3
    Var#6<$wp_locale> = Phi()
    Terminal_GlobalVar
        var: LITERAL('wp_locale')
    Expr_Assign
        var: Var#7<$i>
        expr: Var#3<$unixtimestamp>
        result: Var#8
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#9
    Expr_BinaryOp_Identical
        left: Var#9
        right: Var#7<$i>
        result: Var#10
    Stmt_JumpIf
        cond: Var#10
        if: Block#4
        else: Block#5

Block#2
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#2

Block#3
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#4

Block#4
    Parent: Block#1
    Var#11<$gmt> = Phi(Var#5<$gmt>)
    Expr_BooleanNot
        expr: Var#11<$gmt>
        result: Var#12
    Stmt_JumpIf
        cond: Var#12
        if: Block#6
        else: Block#7

Block#5
    Parent: Block#1
    Stmt_Jump
        target: Block#8

Block#6
    Parent: Block#4
    Expr_FuncCall
        name: LITERAL('current_time')
        args[0]: LITERAL('timestamp')
        result: Var#13
    Expr_Assign
        var: Var#14<$i>
        expr: Var#13
        result: Var#15
    Stmt_Jump
        target: Block#9

Block#7
    Parent: Block#4
    Expr_FuncCall
        name: LITERAL('time')
        result: Var#16
    Expr_Assign
        var: Var#17<$i>
        expr: Var#16
        result: Var#18
    Stmt_Jump
        target: Block#9

Block#8
    Parent: Block#9
    Parent: Block#5
    Var#19<$dateformatstring> = Phi(Var#20<$dateformatstring>, Var#1<$dateformatstring>)
    Var#21<$gmt> = Phi(Var#22<$gmt>, Var#5<$gmt>)
    Var#23<$wp_locale> = Phi(Var#24<$wp_locale>, Var#6<$wp_locale>)
    Var#25<$i> = Phi(Var#26<$i>, Var#7<$i>)
    Expr_Assign
        var: Var#27<$req_format>
        expr: Var#19<$dateformatstring>
        result: Var#28
    Stmt_JumpIf
        cond: Var#21<$gmt>
        if: Block#10
        else: Block#11

Block#9
    Parent: Block#6
    Parent: Block#7
    Var#20<$dateformatstring> = Phi(Var#1<$dateformatstring>)
    Var#24<$wp_locale> = Phi(Var#6<$wp_locale>)
    Var#26<$i> = Phi(Var#14<$i>, Var#17<$i>)
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#29
    Expr_Assign
        var: Var#22<$gmt>
        expr: Var#29
        result: Var#30
    Stmt_Jump
        target: Block#8

Block#10
    Parent: Block#8
    Expr_Assign
        var: Var#31
        expr: LITERAL('gmdate')
        result: Var#32
    Stmt_Jump
        target: Block#12

Block#11
    Parent: Block#8
    Expr_Assign
        var: Var#33
        expr: LITERAL('date')
        result: Var#34
    Stmt_Jump
        target: Block#12

Block#12
    Parent: Block#10
    Parent: Block#11
    Var#35 = Phi(Var#31, Var#33)
    Var#36<$wp_locale> = Phi(Var#23<$wp_locale>)
    Var#37<$i> = Phi(Var#25<$i>)
    Var#38<$dateformatstring> = Phi(Var#19<$dateformatstring>)
    Var#39<$req_format> = Phi(Var#27<$req_format>)
    Var#40<$gmt> = Phi(Var#21<$gmt>)
    Expr_Assign
        var: Var#41<$datefunc>
        expr: Var#35
        result: Var#42
    Expr_PropertyFetch
        var: Var#36<$wp_locale>
        name: LITERAL('month')
        result: Var#43
    Expr_Empty
        expr: Var#43
        result: Var#44
    Expr_BooleanNot
        expr: Var#44
        result: Var#45
    Stmt_JumpIf
        cond: Var#45
        if: Block#13
        else: Block#14

Block#13
    Parent: Block#12
    Var#46<$wp_locale> = Phi(Var#36<$wp_locale>)
    Expr_PropertyFetch
        var: Var#46<$wp_locale>
        name: LITERAL('weekday')
        result: Var#47
    Expr_Empty
        expr: Var#47
        result: Var#48
    Expr_BooleanNot
        expr: Var#48
        result: Var#49
    Expr_Cast_Bool
        expr: Var#49
        result: Var#50
    Stmt_Jump
        target: Block#14

Block#14
    Parent: Block#12
    Parent: Block#13
    Var#51 = Phi(LITERAL(false), Var#50)
    Var#52<$wp_locale> = Phi(Var#36<$wp_locale>, Var#46<$wp_locale>)
    Var#53<$i> = Phi(Var#37<$i>)
    Var#54<$datefunc> = Phi(Var#41<$datefunc>)
    Var#55<$dateformatstring> = Phi(Var#38<$dateformatstring>)
    Var#56<$req_format> = Phi(Var#39<$req_format>)
    Var#57<$gmt> = Phi(Var#40<$gmt>)
    Stmt_JumpIf
        cond: Var#51
        if: Block#15
        else: Block#16

Block#15
    Parent: Block#14
    Var#58<$wp_locale> = Phi(Var#52<$wp_locale>)
    Var#59<$i> = Phi(Var#53<$i>)
    Var#60<$datefunc> = Phi(Var#54<$datefunc>)
    Var#61<$dateformatstring> = Phi(Var#55<$dateformatstring>)
    Expr_FuncCall
        name: Var#60<$datefunc>
        args[0]: LITERAL('m')
        args[1]: Var#59<$i>
        result: Var#62
    Expr_MethodCall
        var: Var#58<$wp_locale>
        name: LITERAL('get_month')
        args[0]: Var#62
        result: Var#63
    Expr_Assign
        var: Var#64<$datemonth>
        expr: Var#63
        result: Var#65
    Expr_MethodCall
        var: Var#58<$wp_locale>
        name: LITERAL('get_month_abbrev')
        args[0]: Var#64<$datemonth>
        result: Var#66
    Expr_Assign
        var: Var#67<$datemonth_abbrev>
        expr: Var#66
        result: Var#68
    Expr_FuncCall
        name: Var#60<$datefunc>
        args[0]: LITERAL('w')
        args[1]: Var#59<$i>
        result: Var#69
    Expr_MethodCall
        var: Var#58<$wp_locale>
        name: LITERAL('get_weekday')
        args[0]: Var#69
        result: Var#70
    Expr_Assign
        var: Var#71<$dateweekday>
        expr: Var#70
        result: Var#72
    Expr_MethodCall
        var: Var#58<$wp_locale>
        name: LITERAL('get_weekday_abbrev')
        args[0]: Var#71<$dateweekday>
        result: Var#73
    Expr_Assign
        var: Var#74<$dateweekday_abbrev>
        expr: Var#73
        result: Var#75
    Expr_FuncCall
        name: Var#60<$datefunc>
        args[0]: LITERAL('a')
        args[1]: Var#59<$i>
        result: Var#76
    Expr_MethodCall
        var: Var#58<$wp_locale>
        name: LITERAL('get_meridiem')
        args[0]: Var#76
        result: Var#77
    Expr_Assign
        var: Var#78<$datemeridiem>
        expr: Var#77
        result: Var#79
    Expr_FuncCall
        name: Var#60<$datefunc>
        args[0]: LITERAL('A')
        args[1]: Var#59<$i>
        result: Var#80
    Expr_MethodCall
        var: Var#58<$wp_locale>
        name: LITERAL('get_meridiem')
        args[0]: Var#80
        result: Var#81
    Expr_Assign
        var: Var#82<$datemeridiem_capital>
        expr: Var#81
        result: Var#83
    Expr_BinaryOp_Concat
        left: LITERAL(' ')
        right: Var#61<$dateformatstring>
        result: Var#84
    Expr_Assign
        var: Var#85<$dateformatstring>
        expr: Var#84
        result: Var#86
    Expr_FuncCall
        name: LITERAL('backslashit')
        args[0]: Var#74<$dateweekday_abbrev>
        result: Var#87
    Expr_BinaryOp_Concat
        left: LITERAL('\\1')
        right: Var#87
        result: Var#88
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/([^\\\\])D/')
        args[1]: Var#88
        args[2]: Var#85<$dateformatstring>
        result: Var#89
    Expr_Assign
        var: Var#90<$dateformatstring>
        expr: Var#89
        result: Var#91
    Expr_FuncCall
        name: LITERAL('backslashit')
        args[0]: Var#64<$datemonth>
        result: Var#92
    Expr_BinaryOp_Concat
        left: LITERAL('\\1')
        right: Var#92
        result: Var#93
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/([^\\\\])F/')
        args[1]: Var#93
        args[2]: Var#90<$dateformatstring>
        result: Var#94
    Expr_Assign
        var: Var#95<$dateformatstring>
        expr: Var#94
        result: Var#96
    Expr_FuncCall
        name: LITERAL('backslashit')
        args[0]: Var#71<$dateweekday>
        result: Var#97
    Expr_BinaryOp_Concat
        left: LITERAL('\\1')
        right: Var#97
        result: Var#98
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/([^\\\\])l/')
        args[1]: Var#98
        args[2]: Var#95<$dateformatstring>
        result: Var#99
    Expr_Assign
        var: Var#100<$dateformatstring>
        expr: Var#99
        result: Var#101
    Expr_FuncCall
        name: LITERAL('backslashit')
        args[0]: Var#67<$datemonth_abbrev>
        result: Var#102
    Expr_BinaryOp_Concat
        left: LITERAL('\\1')
        right: Var#102
        result: Var#103
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/([^\\\\])M/')
        args[1]: Var#103
        args[2]: Var#100<$dateformatstring>
        result: Var#104
    Expr_Assign
        var: Var#105<$dateformatstring>
        expr: Var#104
        result: Var#106
    Expr_FuncCall
        name: LITERAL('backslashit')
        args[0]: Var#78<$datemeridiem>
        result: Var#107
    Expr_BinaryOp_Concat
        left: LITERAL('\\1')
        right: Var#107
        result: Var#108
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/([^\\\\])a/')
        args[1]: Var#108
        args[2]: Var#105<$dateformatstring>
        result: Var#109
    Expr_Assign
        var: Var#110<$dateformatstring>
        expr: Var#109
        result: Var#111
    Expr_FuncCall
        name: LITERAL('backslashit')
        args[0]: Var#82<$datemeridiem_capital>
        result: Var#112
    Expr_BinaryOp_Concat
        left: LITERAL('\\1')
        right: Var#112
        result: Var#113
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/([^\\\\])A/')
        args[1]: Var#113
        args[2]: Var#110<$dateformatstring>
        result: Var#114
    Expr_Assign
        var: Var#115<$dateformatstring>
        expr: Var#114
        result: Var#116
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#115<$dateformatstring>
        result: Var#117
    Expr_BinaryOp_Minus
        left: Var#117
        right: LITERAL(1)
        result: Var#118
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#115<$dateformatstring>
        args[1]: LITERAL(1)
        args[2]: Var#118
        result: Var#119
    Expr_Assign
        var: Var#120<$dateformatstring>
        expr: Var#119
        result: Var#121
    Stmt_Jump
        target: Block#17

Block#16
    Parent: Block#14
    Stmt_Jump
        target: Block#17

Block#17
    Parent: Block#15
    Parent: Block#16
    Var#122<$dateformatstring> = Phi(Var#120<$dateformatstring>, Var#55<$dateformatstring>)
    Var#123<$i> = Phi(Var#59<$i>, Var#53<$i>)
    Var#124<$datefunc> = Phi(Var#60<$datefunc>, Var#54<$datefunc>)
    Var#125<$req_format> = Phi(Var#56<$req_format>)
    Var#126<$gmt> = Phi(Var#57<$gmt>)
    Expr_Array
        values[0]: LITERAL('P')
        values[1]: LITERAL('I')
        values[2]: LITERAL('O')
        values[3]: LITERAL('T')
        values[4]: LITERAL('Z')
        values[5]: LITERAL('e')
        result: Var#127
    Expr_Assign
        var: Var#128<$timezone_formats>
        expr: Var#127
        result: Var#129
    Expr_FuncCall
        name: LITERAL('implode')
        args[0]: LITERAL('|')
        args[1]: Var#128<$timezone_formats>
        result: Var#130
    Expr_Assign
        var: Var#131<$timezone_formats_re>
        expr: Var#130
        result: Var#132
    Expr_ConcatList
        list[0]: LITERAL('/')
        list[1]: Var#131<$timezone_formats_re>
        list[2]: LITERAL('/')
        result: Var#133
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: Var#133
        args[1]: Var#122<$dateformatstring>
        result: Var#134
    Stmt_JumpIf
        cond: Var#134
        if: Block#18
        else: Block#19

Block#18
    Parent: Block#17
    Expr_FuncCall
        name: LITERAL('get_option')
        args[0]: LITERAL('timezone_string')
        result: Var#135
    Expr_Assign
        var: Var#136<$timezone_string>
        expr: Var#135
        result: Var#137
    Stmt_JumpIf
        cond: Var#136<$timezone_string>
        if: Block#20
        else: Block#21

Block#19
    Parent: Block#17
    Stmt_Jump
        target: Block#22

Block#20
    Parent: Block#18
    Var#138<$timezone_string> = Phi(Var#136<$timezone_string>)
    Var#139<$timezone_formats> = Phi(Var#128<$timezone_formats>)
    Expr_FuncCall
        name: LITERAL('timezone_open')
        args[0]: Var#138<$timezone_string>
        result: Var#140
    Expr_Assign
        var: Var#141<$timezone_object>
        expr: Var#140
        result: Var#142
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#143
    Expr_FuncCall
        name: LITERAL('date_create')
        args[0]: Var#143
        args[1]: Var#141<$timezone_object>
        result: Var#144
    Expr_Assign
        var: Var#145<$date_object>
        expr: Var#144
        result: Var#146
    Iterator_Reset
        var: Var#139<$timezone_formats>
    Stmt_Jump
        target: Block#23

Block#21
    Parent: Block#18
    Stmt_Jump
        target: Block#24

Block#22
    Parent: Block#24
    Parent: Block#19
    Var#147<$dateformatstring> = Phi(Var#148<$dateformatstring>, Var#122<$dateformatstring>)
    Var#149<$i> = Phi(Var#150<$i>, Var#123<$i>)
    Var#151<$datefunc> = Phi(Var#152<$datefunc>, Var#124<$datefunc>)
    Var#153<$req_format> = Phi(Var#154<$req_format>, Var#125<$req_format>)
    Var#155<$gmt> = Phi(Var#156<$gmt>, Var#126<$gmt>)
    Stmt_Jump
        target: Block#25

Block#23
    Parent: Block#20
    Parent: Block#33
    Var#157<$dateformatstring> = Phi(Var#122<$dateformatstring>, Var#158<$dateformatstring>)
    Var#159<$date_object> = Phi(Var#145<$date_object>, Var#160<$date_object>)
    Var#161<$i> = Phi(Var#123<$i>, Var#162<$i>)
    Var#163<$datefunc> = Phi(Var#124<$datefunc>, Var#164<$datefunc>)
    Var#165<$req_format> = Phi(Var#125<$req_format>, Var#166<$req_format>)
    Var#167<$gmt> = Phi(Var#126<$gmt>, Var#168<$gmt>)
    Iterator_Valid
        var: Var#139<$timezone_formats>
        result: Var#169
    Stmt_JumpIf
        cond: Var#169
        if: Block#26
        else: Block#27

Block#24
    Parent: Block#31
    Parent: Block#21
    Var#148<$dateformatstring> = Phi(Var#157<$dateformatstring>, Var#122<$dateformatstring>)
    Var#150<$i> = Phi(Var#161<$i>, Var#123<$i>)
    Var#152<$datefunc> = Phi(Var#163<$datefunc>, Var#124<$datefunc>)
    Var#154<$req_format> = Phi(Var#165<$req_format>, Var#125<$req_format>)
    Var#156<$gmt> = Phi(Var#167<$gmt>, Var#126<$gmt>)
    Stmt_Jump
        target: Block#22

Block#25
    Parent: Block#22
    Var#170<$dateformatstring> = Phi(Var#147<$dateformatstring>)
    Var#171<$i> = Phi(Var#149<$i>)
    Var#172<$datefunc> = Phi(Var#151<$datefunc>)
    Expr_FuncCall
        name: Var#172<$datefunc>
        args[0]: Var#170<$dateformatstring>
        args[1]: Var#171<$i>
        result: Var#173
    Stmt_Jump
        target: Block#28

Block#26
    Parent: Block#23
    Var#174<$dateformatstring> = Phi(Var#157<$dateformatstring>)
    Iterator_Value
        var: Var#139<$timezone_formats>
        result: Var#175
    Expr_Assign
        var: Var#176<$timezone_format>
        expr: Var#175
        result: Var#177
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#178
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#174<$dateformatstring>
        args[1]: Var#176<$timezone_format>
        result: Var#179
    Expr_BinaryOp_NotIdentical
        left: Var#178
        right: Var#179
        result: Var#180
    Stmt_JumpIf
        cond: Var#180
        if: Block#29
        else: Block#30

Block#27
    Parent: Block#23
    Stmt_Jump
        target: Block#31

Block#28
    Parent: Block#25
    Var#181<$req_format> = Phi(Var#153<$req_format>)
    Var#182<$i> = Phi(Var#171<$i>)
    Var#183<$gmt> = Phi(Var#155<$gmt>)
    Expr_Assign
        var: Var#184<$j>
        expr: Var#173
        result: Var#185
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('date_i18n')
        args[1]: Var#184<$j>
        args[2]: Var#181<$req_format>
        args[3]: Var#182<$i>
        args[4]: Var#183<$gmt>
        result: Var#186
    Expr_Assign
        var: Var#187<$j>
        expr: Var#186
        result: Var#188
    Terminal_Return
        expr: Var#187<$j>

Block#29
    Parent: Block#26
    Var#189<$date_object> = Phi(Var#159<$date_object>)
    Var#190<$timezone_format> = Phi(Var#176<$timezone_format>)
    Var#191<$dateformatstring> = Phi(Var#174<$dateformatstring>)
    Expr_FuncCall
        name: LITERAL('date_format')
        args[0]: Var#189<$date_object>
        args[1]: Var#190<$timezone_format>
        result: Var#192
    Expr_Assign
        var: Var#193<$formatted>
        expr: Var#192
        result: Var#194
    Expr_BinaryOp_Concat
        left: LITERAL(' ')
        right: Var#191<$dateformatstring>
        result: Var#195
    Expr_Assign
        var: Var#196<$dateformatstring>
        expr: Var#195
        result: Var#197
    Expr_ConcatList
        list[0]: LITERAL('/([^\\\\])')
        list[1]: Var#190<$timezone_format>
        list[2]: LITERAL('/')
        result: Var#198
    Expr_FuncCall
        name: LITERAL('backslashit')
        args[0]: Var#193<$formatted>
        result: Var#199
    Expr_BinaryOp_Concat
        left: LITERAL('\\1')
        right: Var#199
        result: Var#200
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: Var#198
        args[1]: Var#200
        args[2]: Var#196<$dateformatstring>
        result: Var#201
    Expr_Assign
        var: Var#202<$dateformatstring>
        expr: Var#201
        result: Var#203
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#202<$dateformatstring>
        result: Var#204
    Expr_BinaryOp_Minus
        left: Var#204
        right: LITERAL(1)
        result: Var#205
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#202<$dateformatstring>
        args[1]: LITERAL(1)
        args[2]: Var#205
        result: Var#206
    Expr_Assign
        var: Var#207<$dateformatstring>
        expr: Var#206
        result: Var#208
    Stmt_Jump
        target: Block#32

Block#30
    Parent: Block#26
    Stmt_Jump
        target: Block#32

Block#31
    Parent: Block#27
    Stmt_Jump
        target: Block#24

Block#32
    Parent: Block#29
    Parent: Block#30
    Var#158<$dateformatstring> = Phi(Var#207<$dateformatstring>, Var#174<$dateformatstring>)
    Var#160<$date_object> = Phi(Var#189<$date_object>, Var#159<$date_object>)
    Var#162<$i> = Phi(Var#161<$i>)
    Var#164<$datefunc> = Phi(Var#163<$datefunc>)
    Var#166<$req_format> = Phi(Var#165<$req_format>)
    Var#168<$gmt> = Phi(Var#167<$gmt>)
    Stmt_Jump
        target: Block#33

Block#33
    Parent: Block#32
    Stmt_Jump
        target: Block#23

Function wp_maybe_decline_date():
Block#1
    Expr_Param
        name: LITERAL('date')
        result: Var#1<$date>
    Var#2<$wp_locale> = Phi()
    Terminal_GlobalVar
        var: LITERAL('wp_locale')
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('_x')
        result: Var#3
    Expr_BooleanNot
        expr: Var#3
        result: Var#4
    Stmt_JumpIf
        cond: Var#4
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#5<$date> = Phi(Var#1<$date>)
    Terminal_Return
        expr: Var#5<$date>

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Var#6<$date> = Phi(Var#1<$date>)
    Var#7<$wp_locale> = Phi(Var#2<$wp_locale>)
    Expr_FuncCall
        name: LITERAL('_x')
        args[0]: LITERAL('off')
        args[1]: LITERAL('decline months names: on or off')
        result: Var#8
    Expr_BinaryOp_Identical
        left: LITERAL('on')
        right: Var#8
        result: Var#9
    Stmt_JumpIf
        cond: Var#9
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#5
    Var#10<$date> = Phi(Var#6<$date>)
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('#^\\d{1,2}\\.? [^\\d ]+#u')
        args[1]: Var#10<$date>
        result: Var#11
    Stmt_Jump
        target: Block#9

Block#8
    Parent: Block#16
    Parent: Block#6
    Var#12<$date> = Phi(Var#13<$date>, Var#6<$date>)
    Expr_FuncCall
        name: LITERAL('get_locale')
        result: Var#14
    Expr_Assign
        var: Var#15<$locale>
        expr: Var#14
        result: Var#16
    Expr_BinaryOp_Identical
        left: LITERAL('ca')
        right: Var#15<$locale>
        result: Var#17
    Stmt_JumpIf
        cond: Var#17
        if: Block#10
        else: Block#11

Block#9
    Parent: Block#7
    Stmt_JumpIf
        cond: Var#11
        if: Block#12
        else: Block#13

Block#10
    Parent: Block#8
    Var#18<$date> = Phi(Var#12<$date>)
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('# de ([ao])#i')
        args[1]: LITERAL(' d\'\\1')
        args[2]: Var#18<$date>
        result: Var#19
    Expr_Assign
        var: Var#20<$date>
        expr: Var#19
        result: Var#21
    Stmt_Jump
        target: Block#14

Block#11
    Parent: Block#8
    Stmt_Jump
        target: Block#14

Block#12
    Parent: Block#9
    Var#22<$wp_locale> = Phi(Var#7<$wp_locale>)
    Expr_PropertyFetch
        var: Var#22<$wp_locale>
        name: LITERAL('month')
        result: Var#23
    Expr_Assign
        var: Var#24<$months>
        expr: Var#23
        result: Var#25
    Expr_PropertyFetch
        var: Var#22<$wp_locale>
        name: LITERAL('month_genitive')
        result: Var#26
    Expr_Assign
        var: Var#27<$months_genitive>
        expr: Var#26
        result: Var#28
    Iterator_Reset
        var: Var#24<$months>
    Stmt_Jump
        target: Block#15

Block#13
    Parent: Block#9
    Stmt_Jump
        target: Block#16

Block#14
    Parent: Block#10
    Parent: Block#11
    Var#29<$date> = Phi(Var#20<$date>, Var#12<$date>)
    Terminal_Return
        expr: Var#29<$date>

Block#15
    Parent: Block#12
    Parent: Block#19
    Var#30<$months> = Phi(Var#24<$months>, Var#31<$months>)
    Var#32<$months_genitive> = Phi(Var#27<$months_genitive>)
    Var#33<$date> = Phi(Var#10<$date>)
    Iterator_Valid
        var: Var#24<$months>
        result: Var#34
    Stmt_JumpIf
        cond: Var#34
        if: Block#17
        else: Block#18

Block#16
    Parent: Block#25
    Parent: Block#13
    Var#13<$date> = Phi(Var#35<$date>, Var#10<$date>)
    Stmt_Jump
        target: Block#8

Block#17
    Parent: Block#15
    Var#31<$months> = Phi(Var#30<$months>)
    Iterator_Key
        var: Var#24<$months>
        result: Var#36
    Expr_Assign
        var: Var#37<$key>
        expr: Var#36
        result: Var#38
    Iterator_Value
        var: Var#24<$months>
        result: Var#39
    Expr_Assign
        var: Var#40<$month>
        expr: Var#39
        result: Var#41
    Expr_BinaryOp_Concat
        left: LITERAL('# ')
        right: Var#40<$month>
        result: Var#42
    Expr_BinaryOp_Concat
        left: Var#42
        right: LITERAL('( |$)#u')
        result: Var#43
    Expr_ArrayDimFetch
        var: Var#31<$months>
        dim: Var#37<$key>
        result: Var#44
    Expr_Assign
        var: Var#44
        expr: Var#43
        result: Var#45
    Stmt_Jump
        target: Block#19

Block#18
    Parent: Block#15
    Stmt_Jump
        target: Block#20

Block#19
    Parent: Block#17
    Stmt_Jump
        target: Block#15

Block#20
    Parent: Block#18
    Var#46<$months_genitive> = Phi(Var#32<$months_genitive>)
    Iterator_Reset
        var: Var#46<$months_genitive>
    Stmt_Jump
        target: Block#21

Block#21
    Parent: Block#20
    Parent: Block#24
    Var#47<$months_genitive> = Phi(Var#46<$months_genitive>, Var#48<$months_genitive>)
    Var#49<$months> = Phi(Var#30<$months>)
    Var#50<$date> = Phi(Var#33<$date>)
    Iterator_Valid
        var: Var#46<$months_genitive>
        result: Var#51
    Stmt_JumpIf
        cond: Var#51
        if: Block#22
        else: Block#23

Block#22
    Parent: Block#21
    Var#48<$months_genitive> = Phi(Var#47<$months_genitive>)
    Iterator_Key
        var: Var#46<$months_genitive>
        result: Var#52
    Expr_Assign
        var: Var#53<$key>
        expr: Var#52
        result: Var#54
    Iterator_Value
        var: Var#46<$months_genitive>
        result: Var#55
    Expr_Assign
        var: Var#56<$month>
        expr: Var#55
        result: Var#57
    Expr_BinaryOp_Concat
        left: LITERAL(' ')
        right: Var#56<$month>
        result: Var#58
    Expr_BinaryOp_Concat
        left: Var#58
        right: LITERAL('$1')
        result: Var#59
    Expr_ArrayDimFetch
        var: Var#48<$months_genitive>
        dim: Var#53<$key>
        result: Var#60
    Expr_Assign
        var: Var#60
        expr: Var#59
        result: Var#61
    Stmt_Jump
        target: Block#24

Block#23
    Parent: Block#21
    Stmt_Jump
        target: Block#25

Block#24
    Parent: Block#22
    Stmt_Jump
        target: Block#21

Block#25
    Parent: Block#23
    Var#62<$months> = Phi(Var#49<$months>)
    Var#63<$months_genitive> = Phi(Var#47<$months_genitive>)
    Var#64<$date> = Phi(Var#50<$date>)
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: Var#62<$months>
        args[1]: Var#63<$months_genitive>
        args[2]: Var#64<$date>
        result: Var#65
    Expr_Assign
        var: Var#35<$date>
        expr: Var#65
        result: Var#66
    Stmt_Jump
        target: Block#16

Function number_format_i18n():
Block#1
    Expr_Param
        name: LITERAL('number')
        result: Var#1<$number>
    Expr_Param
        name: LITERAL('decimals')
        defaultVar: LITERAL(0)
        result: Var#2<$decimals>
        defaultBlock: Block#2
    Var#3<$wp_locale> = Phi()
    Terminal_GlobalVar
        var: LITERAL('wp_locale')
    Expr_Isset
        vars[0]: Var#3<$wp_locale>
        result: Var#4
    Stmt_JumpIf
        cond: Var#4
        if: Block#3
        else: Block#4

Block#2

Block#3
    Parent: Block#1
    Var#5<$number> = Phi(Var#1<$number>)
    Var#6<$decimals> = Phi(Var#2<$decimals>)
    Var#7<$wp_locale> = Phi(Var#3<$wp_locale>)
    Expr_FuncCall
        name: LITERAL('absint')
        args[0]: Var#6<$decimals>
        result: Var#8
    Expr_PropertyFetch
        var: Var#7<$wp_locale>
        name: LITERAL('number_format')
        result: Var#9
    Expr_ArrayDimFetch
        var: Var#9
        dim: LITERAL('decimal_point')
        result: Var#10
    Expr_PropertyFetch
        var: Var#7<$wp_locale>
        name: LITERAL('number_format')
        result: Var#11
    Expr_ArrayDimFetch
        var: Var#11
        dim: LITERAL('thousands_sep')
        result: Var#12
    Expr_FuncCall
        name: LITERAL('number_format')
        args[0]: Var#5<$number>
        args[1]: Var#8
        args[2]: Var#10
        args[3]: Var#12
        result: Var#13
    Expr_Assign
        var: Var#14<$formatted>
        expr: Var#13
        result: Var#15
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Var#16<$number> = Phi(Var#1<$number>)
    Var#17<$decimals> = Phi(Var#2<$decimals>)
    Expr_FuncCall
        name: LITERAL('absint')
        args[0]: Var#17<$decimals>
        result: Var#18
    Expr_FuncCall
        name: LITERAL('number_format')
        args[0]: Var#16<$number>
        args[1]: Var#18
        result: Var#19
    Expr_Assign
        var: Var#20<$formatted>
        expr: Var#19
        result: Var#21
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Var#22<$formatted> = Phi(Var#14<$formatted>, Var#20<$formatted>)
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('number_format_i18n')
        args[1]: Var#22<$formatted>
        result: Var#23
    Terminal_Return
        expr: Var#23

Function size_format():
Block#1
    Expr_Param
        name: LITERAL('bytes')
        result: Var#1<$bytes>
    Expr_Param
        name: LITERAL('decimals')
        defaultVar: LITERAL(0)
        result: Var#2<$decimals>
        defaultBlock: Block#2
    Expr_ConstFetch
        name: LITERAL('TB_IN_BYTES')
        result: Var#3
    Expr_ConstFetch
        name: LITERAL('GB_IN_BYTES')
        result: Var#4
    Expr_ConstFetch
        name: LITERAL('MB_IN_BYTES')
        result: Var#5
    Expr_ConstFetch
        name: LITERAL('KB_IN_BYTES')
        result: Var#6
    Expr_Array
        keys[0]: LITERAL('TB')
        keys[1]: LITERAL('GB')
        keys[2]: LITERAL('MB')
        keys[3]: LITERAL('KB')
        keys[4]: LITERAL('B')
        values[0]: Var#3
        values[1]: Var#4
        values[2]: Var#5
        values[3]: Var#6
        values[4]: LITERAL(1)
        result: Var#7
    Expr_Assign
        var: Var#8<$quant>
        expr: Var#7
        result: Var#9
    Expr_BinaryOp_Identical
        left: LITERAL(0)
        right: Var#1<$bytes>
        result: Var#10
    Stmt_JumpIf
        cond: Var#10
        if: Block#3
        else: Block#4

Block#2

Block#3
    Parent: Block#1
    Var#11<$decimals> = Phi(Var#2<$decimals>)
    Expr_FuncCall
        name: LITERAL('number_format_i18n')
        args[0]: LITERAL(0)
        args[1]: Var#11<$decimals>
        result: Var#12
    Expr_BinaryOp_Concat
        left: Var#12
        right: LITERAL(' B')
        result: Var#13
    Terminal_Return
        expr: Var#13

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#4
    Var#14<$quant> = Phi(Var#8<$quant>)
    Var#15<$bytes> = Phi(Var#1<$bytes>)
    Var#16<$decimals> = Phi(Var#2<$decimals>)
    Iterator_Reset
        var: Var#14<$quant>
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#5
    Parent: Block#13
    Var#17<$bytes> = Phi(Var#15<$bytes>, Var#18<$bytes>)
    Var#19<$decimals> = Phi(Var#16<$decimals>, Var#20<$decimals>)
    Iterator_Valid
        var: Var#14<$quant>
        result: Var#21
    Stmt_JumpIf
        cond: Var#21
        if: Block#7
        else: Block#8

Block#7
    Parent: Block#6
    Var#22<$bytes> = Phi(Var#17<$bytes>)
    Iterator_Key
        var: Var#14<$quant>
        result: Var#23
    Expr_Assign
        var: Var#24<$unit>
        expr: Var#23
        result: Var#25
    Iterator_Value
        var: Var#14<$quant>
        result: Var#26
    Expr_Assign
        var: Var#27<$mag>
        expr: Var#26
        result: Var#28
    Expr_FuncCall
        name: LITERAL('doubleval')
        args[0]: Var#22<$bytes>
        result: Var#29
    Expr_BinaryOp_GreaterOrEqual
        left: Var#29
        right: Var#27<$mag>
        result: Var#30
    Stmt_JumpIf
        cond: Var#30
        if: Block#9
        else: Block#10

Block#8
    Parent: Block#6
    Stmt_Jump
        target: Block#11

Block#9
    Parent: Block#7
    Var#31<$bytes> = Phi(Var#22<$bytes>)
    Var#32<$mag> = Phi(Var#27<$mag>)
    Var#33<$decimals> = Phi(Var#19<$decimals>)
    Var#34<$unit> = Phi(Var#24<$unit>)
    Expr_BinaryOp_Div
        left: Var#31<$bytes>
        right: Var#32<$mag>
        result: Var#35
    Expr_FuncCall
        name: LITERAL('number_format_i18n')
        args[0]: Var#35
        args[1]: Var#33<$decimals>
        result: Var#36
    Expr_BinaryOp_Concat
        left: Var#36
        right: LITERAL(' ')
        result: Var#37
    Expr_BinaryOp_Concat
        left: Var#37
        right: Var#34<$unit>
        result: Var#38
    Terminal_Return
        expr: Var#38

Block#10
    Parent: Block#7
    Stmt_Jump
        target: Block#12

Block#11
    Parent: Block#8
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#39
    Terminal_Return
        expr: Var#39

Block#12
    Parent: Block#10
    Var#18<$bytes> = Phi(Var#22<$bytes>)
    Var#20<$decimals> = Phi(Var#19<$decimals>)
    Stmt_Jump
        target: Block#13

Block#13
    Parent: Block#12
    Stmt_Jump
        target: Block#6

Function get_weekstartend():
Block#1
    Expr_Param
        name: LITERAL('mysqlstring')
        result: Var#1<$mysqlstring>
    Expr_Param
        name: LITERAL('start_of_week')
        defaultVar: LITERAL('')
        result: Var#2<$start_of_week>
        defaultBlock: Block#2
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#1<$mysqlstring>
        args[1]: LITERAL(0)
        args[2]: LITERAL(4)
        result: Var#3
    Expr_Assign
        var: Var#4<$my>
        expr: Var#3
        result: Var#5
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#1<$mysqlstring>
        args[1]: LITERAL(8)
        args[2]: LITERAL(2)
        result: Var#6
    Expr_Assign
        var: Var#7<$mm>
        expr: Var#6
        result: Var#8
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#1<$mysqlstring>
        args[1]: LITERAL(5)
        args[2]: LITERAL(2)
        result: Var#9
    Expr_Assign
        var: Var#10<$md>
        expr: Var#9
        result: Var#11
    Expr_FuncCall
        name: LITERAL('mktime')
        args[0]: LITERAL(0)
        args[1]: LITERAL(0)
        args[2]: LITERAL(0)
        args[3]: Var#10<$md>
        args[4]: Var#7<$mm>
        args[5]: Var#4<$my>
        result: Var#12
    Expr_Assign
        var: Var#13<$day>
        expr: Var#12
        result: Var#14
    Expr_FuncCall
        name: LITERAL('date')
        args[0]: LITERAL('w')
        args[1]: Var#13<$day>
        result: Var#15
    Expr_Assign
        var: Var#16<$weekday>
        expr: Var#15
        result: Var#17
    Expr_FuncCall
        name: LITERAL('is_numeric')
        args[0]: Var#2<$start_of_week>
        result: Var#18
    Expr_BooleanNot
        expr: Var#18
        result: Var#19
    Stmt_JumpIf
        cond: Var#19
        if: Block#3
        else: Block#4

Block#2

Block#3
    Parent: Block#1
    Var#20<$start_of_week> = Phi(Var#2<$start_of_week>)
    Expr_Assertion<not(type(LITERAL('numeric')))>
        expr: Var#20<$start_of_week>
        result: Var#21<$start_of_week>
    Expr_FuncCall
        name: LITERAL('get_option')
        args[0]: LITERAL('start_of_week')
        result: Var#22
    Expr_Assign
        var: Var#23<$start_of_week>
        expr: Var#22
        result: Var#24
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Var#25<$start_of_week> = Phi(Var#2<$start_of_week>)
    Expr_Assertion<not(not(type(LITERAL('numeric'))))>
        expr: Var#25<$start_of_week>
        result: Var#26<$start_of_week>
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Var#27<$weekday> = Phi(Var#16<$weekday>)
    Var#28<$start_of_week> = Phi(Var#23<$start_of_week>, Var#26<$start_of_week>)
    Var#29<$day> = Phi(Var#13<$day>)
    Expr_BinaryOp_Smaller
        left: Var#27<$weekday>
        right: Var#28<$start_of_week>
        result: Var#30
    Stmt_JumpIf
        cond: Var#30
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Var#31<$weekday> = Phi(Var#27<$weekday>)
    Expr_BinaryOp_Plus
        left: Var#31<$weekday>
        right: LITERAL(7)
        result: Var#32
    Expr_Assign
        var: Var#33<$weekday>
        expr: Var#32
        result: Var#34
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#5
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#6
    Parent: Block#7
    Var#35<$day> = Phi(Var#29<$day>)
    Var#36<$weekday> = Phi(Var#33<$weekday>, Var#27<$weekday>)
    Var#37<$start_of_week> = Phi(Var#28<$start_of_week>)
    Expr_ConstFetch
        name: LITERAL('DAY_IN_SECONDS')
        result: Var#38
    Expr_BinaryOp_Minus
        left: Var#36<$weekday>
        right: Var#37<$start_of_week>
        result: Var#39
    Expr_BinaryOp_Mul
        left: Var#38
        right: Var#39
        result: Var#40
    Expr_BinaryOp_Minus
        left: Var#35<$day>
        right: Var#40
        result: Var#41
    Expr_Assign
        var: Var#42<$start>
        expr: Var#41
        result: Var#43
    Expr_ConstFetch
        name: LITERAL('WEEK_IN_SECONDS')
        result: Var#44
    Expr_BinaryOp_Plus
        left: Var#42<$start>
        right: Var#44
        result: Var#45
    Expr_BinaryOp_Minus
        left: Var#45
        right: LITERAL(1)
        result: Var#46
    Expr_Assign
        var: Var#47<$end>
        expr: Var#46
        result: Var#48
    Expr_FuncCall
        name: LITERAL('compact')
        args[0]: LITERAL('start')
        args[1]: LITERAL('end')
        result: Var#49
    Terminal_Return
        expr: Var#49

Function maybe_unserialize():
Block#1
    Expr_Param
        name: LITERAL('original')
        result: Var#1<$original>
    Expr_FuncCall
        name: LITERAL('is_serialized')
        args[0]: Var#1<$original>
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#2
    Var#3<$original> = Phi(Var#1<$original>)
    Expr_FuncCall
        name: LITERAL('unserialize')
        args[0]: Var#3<$original>
        result: Var#4
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#3
    Var#5<$original> = Phi(Var#1<$original>)
    Terminal_Return
        expr: Var#5<$original>

Block#6
    Parent: Block#4
    Terminal_Return
        expr: Var#4

Function is_serialized():
Block#1
    Expr_Param
        name: LITERAL('data')
        result: Var#1<$data>
    Expr_Param
        name: LITERAL('strict')
        defaultVar: Var#2
        result: Var#3<$strict>
        defaultBlock: Block#2
    Expr_FuncCall
        name: LITERAL('is_string')
        args[0]: Var#1<$data>
        result: Var#4
    Expr_BooleanNot
        expr: Var#4
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#2

Block#3
    Parent: Block#1
    Var#6<$data> = Phi(Var#1<$data>)
    Expr_Assertion<not(type(LITERAL('string')))>
        expr: Var#6<$data>
        result: Var#7<$data>
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#8
    Terminal_Return
        expr: Var#8

Block#4
    Parent: Block#1
    Var#9<$data> = Phi(Var#1<$data>)
    Expr_Assertion<not(not(type(LITERAL('string'))))>
        expr: Var#9<$data>
        result: Var#10<$data>
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#4
    Var#11<$data> = Phi(Var#10<$data>)
    Var#12<$strict> = Phi(Var#3<$strict>)
    Expr_FuncCall
        name: LITERAL('trim')
        args[0]: Var#11<$data>
        result: Var#13
    Expr_Assign
        var: Var#14<$data>
        expr: Var#13
        result: Var#15
    Expr_BinaryOp_Equal
        left: LITERAL('N;')
        right: Var#14<$data>
        result: Var#16
    Stmt_JumpIf
        cond: Var#16
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#17
    Terminal_Return
        expr: Var#17

Block#7
    Parent: Block#5
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#7
    Var#18<$data> = Phi(Var#14<$data>)
    Var#19<$strict> = Phi(Var#12<$strict>)
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#18<$data>
        result: Var#20
    Expr_BinaryOp_Smaller
        left: Var#20
        right: LITERAL(4)
        result: Var#21
    Stmt_JumpIf
        cond: Var#21
        if: Block#9
        else: Block#10

Block#9
    Parent: Block#8
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#22
    Terminal_Return
        expr: Var#22

Block#10
    Parent: Block#8
    Stmt_Jump
        target: Block#11

Block#11
    Parent: Block#10
    Var#23<$data> = Phi(Var#18<$data>)
    Var#24<$strict> = Phi(Var#19<$strict>)
    Expr_ArrayDimFetch
        var: Var#23<$data>
        dim: LITERAL(1)
        result: Var#25
    Expr_BinaryOp_NotIdentical
        left: LITERAL(':')
        right: Var#25
        result: Var#26
    Stmt_JumpIf
        cond: Var#26
        if: Block#12
        else: Block#13

Block#12
    Parent: Block#11
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#27
    Terminal_Return
        expr: Var#27

Block#13
    Parent: Block#11
    Stmt_Jump
        target: Block#14

Block#14
    Parent: Block#13
    Var#28<$strict> = Phi(Var#24<$strict>)
    Var#29<$data> = Phi(Var#23<$data>)
    Stmt_JumpIf
        cond: Var#28<$strict>
        if: Block#15
        else: Block#16

Block#15
    Parent: Block#14
    Var#30<$data> = Phi(Var#29<$data>)
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#31
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#30<$data>
        args[1]: Var#31
        result: Var#32
    Expr_Assign
        var: Var#33<$lastc>
        expr: Var#32
        result: Var#34
    Expr_BinaryOp_NotIdentical
        left: LITERAL(';')
        right: Var#33<$lastc>
        result: Var#35
    Stmt_JumpIf
        cond: Var#35
        if: Block#17
        else: Block#18

Block#16
    Parent: Block#14
    Var#36<$data> = Phi(Var#29<$data>)
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#36<$data>
        args[1]: LITERAL(';')
        result: Var#37
    Expr_Assign
        var: Var#38<$semicolon>
        expr: Var#37
        result: Var#39
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#36<$data>
        args[1]: LITERAL('}')
        result: Var#40
    Expr_Assign
        var: Var#41<$brace>
        expr: Var#40
        result: Var#42
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#43
    Expr_BinaryOp_Identical
        left: Var#43
        right: Var#38<$semicolon>
        result: Var#44
    Stmt_JumpIf
        cond: Var#44
        if: Block#19
        else: Block#20

Block#17
    Parent: Block#15
    Var#45<$lastc> = Phi(Var#33<$lastc>)
    Expr_BinaryOp_NotIdentical
        left: LITERAL('}')
        right: Var#45<$lastc>
        result: Var#46
    Expr_Cast_Bool
        expr: Var#46
        result: Var#47
    Stmt_Jump
        target: Block#18

Block#18
    Parent: Block#15
    Parent: Block#17
    Var#48 = Phi(LITERAL(false), Var#47)
    Var#49<$data> = Phi(Var#30<$data>)
    Var#50<$strict> = Phi(Var#28<$strict>)
    Stmt_JumpIf
        cond: Var#48
        if: Block#21
        else: Block#22

Block#19
    Parent: Block#16
    Var#51<$brace> = Phi(Var#41<$brace>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#52
    Expr_BinaryOp_Identical
        left: Var#52
        right: Var#51<$brace>
        result: Var#53
    Expr_Cast_Bool
        expr: Var#53
        result: Var#54
    Stmt_Jump
        target: Block#20

Block#20
    Parent: Block#16
    Parent: Block#19
    Var#55 = Phi(LITERAL(false), Var#54)
    Var#56<$semicolon> = Phi(Var#38<$semicolon>)
    Var#57<$brace> = Phi(Var#41<$brace>, Var#51<$brace>)
    Var#58<$data> = Phi(Var#36<$data>)
    Var#59<$strict> = Phi(Var#28<$strict>)
    Stmt_JumpIf
        cond: Var#55
        if: Block#23
        else: Block#24

Block#21
    Parent: Block#18
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#60
    Terminal_Return
        expr: Var#60

Block#22
    Parent: Block#18
    Stmt_Jump
        target: Block#25

Block#23
    Parent: Block#20
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#61
    Terminal_Return
        expr: Var#61

Block#24
    Parent: Block#20
    Stmt_Jump
        target: Block#26

Block#25
    Parent: Block#22
    Var#62<$data> = Phi(Var#49<$data>)
    Var#63<$strict> = Phi(Var#50<$strict>)
    Stmt_Jump
        target: Block#27

Block#26
    Parent: Block#24
    Var#64<$semicolon> = Phi(Var#56<$semicolon>)
    Var#65<$brace> = Phi(Var#57<$brace>)
    Var#66<$data> = Phi(Var#58<$data>)
    Var#67<$strict> = Phi(Var#59<$strict>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#68
    Expr_BinaryOp_NotIdentical
        left: Var#68
        right: Var#64<$semicolon>
        result: Var#69
    Stmt_JumpIf
        cond: Var#69
        if: Block#28
        else: Block#29

Block#27
    Parent: Block#25
    Parent: Block#56
    Var#70<$data> = Phi(Var#62<$data>, Var#71<$data>)
    Var#72<$strict> = Phi(Var#63<$strict>, Var#73<$strict>)
    Expr_ArrayDimFetch
        var: Var#70<$data>
        dim: LITERAL(0)
        result: Var#74
    Expr_Assign
        var: Var#75<$token>
        expr: Var#74
        result: Var#76
    Stmt_Switch
        cond: Var#75<$token>
        cases[0]: LITERAL('s')
        cases[1]: LITERAL('a')
        cases[2]: LITERAL('O')
        cases[3]: LITERAL('b')
        cases[4]: LITERAL('i')
        cases[5]: LITERAL('d')
        targets[0]: Block#30
        targets[1]: Block#31
        targets[2]: Block#32
        targets[3]: Block#33
        targets[4]: Block#34
        targets[5]: Block#35
        default: Block#36

Block#28
    Parent: Block#26
    Var#77<$semicolon> = Phi(Var#64<$semicolon>)
    Expr_BinaryOp_Smaller
        left: Var#77<$semicolon>
        right: LITERAL(3)
        result: Var#78
    Expr_Cast_Bool
        expr: Var#78
        result: Var#79
    Stmt_Jump
        target: Block#29

Block#29
    Parent: Block#26
    Parent: Block#28
    Var#80 = Phi(LITERAL(false), Var#79)
    Var#81<$brace> = Phi(Var#65<$brace>)
    Var#82<$data> = Phi(Var#66<$data>)
    Var#83<$strict> = Phi(Var#67<$strict>)
    Stmt_JumpIf
        cond: Var#80
        if: Block#37
        else: Block#38

Block#30
    Parent: Block#27
    Var#84<$strict> = Phi(Var#72<$strict>)
    Stmt_JumpIf
        cond: Var#84<$strict>
        if: Block#39
        else: Block#40

Block#31
    Parent: Block#27
    Parent: Block#53
    Var#85<$token> = Phi(Var#75<$token>, Var#86<$token>)
    Var#87<$data> = Phi(Var#70<$data>, Var#88<$data>)
    Stmt_Jump
        target: Block#32

Block#32
    Parent: Block#27
    Parent: Block#31
    Var#89<$token> = Phi(Var#75<$token>, Var#85<$token>)
    Var#90<$data> = Phi(Var#70<$data>, Var#87<$data>)
    Expr_ConcatList
        list[0]: LITERAL('/^')
        list[1]: Var#89<$token>
        list[2]: LITERAL(':[0-9]+:/s')
        result: Var#91
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: Var#91
        args[1]: Var#90<$data>
        result: Var#92
    Expr_Cast_Bool
        expr: Var#92
        result: Var#93
    Terminal_Return
        expr: Var#93

Block#33
    Parent: Block#27
    Stmt_Jump
        target: Block#34

Block#34
    Parent: Block#27
    Parent: Block#33
    Var#94<$strict> = Phi(Var#72<$strict>)
    Var#95<$token> = Phi(Var#75<$token>)
    Var#96<$data> = Phi(Var#70<$data>)
    Stmt_Jump
        target: Block#35

Block#35
    Parent: Block#27
    Parent: Block#34
    Var#97<$strict> = Phi(Var#72<$strict>, Var#94<$strict>)
    Var#98<$token> = Phi(Var#75<$token>, Var#95<$token>)
    Var#99<$data> = Phi(Var#70<$data>, Var#96<$data>)
    Stmt_JumpIf
        cond: Var#97<$strict>
        if: Block#41
        else: Block#42

Block#36
    Stmt_Jump
        target: Block#43

Block#37
    Parent: Block#29
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#100
    Terminal_Return
        expr: Var#100

Block#38
    Parent: Block#29
    Stmt_Jump
        target: Block#44

Block#39
    Parent: Block#30
    Var#101<$data> = Phi(Var#70<$data>)
    Expr_UnaryMinus
        expr: LITERAL(2)
        result: Var#102
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#101<$data>
        args[1]: Var#102
        args[2]: LITERAL(1)
        result: Var#103
    Expr_BinaryOp_NotIdentical
        left: LITERAL('"')
        right: Var#103
        result: Var#104
    Stmt_JumpIf
        cond: Var#104
        if: Block#45
        else: Block#46

Block#40
    Parent: Block#30
    Var#105<$data> = Phi(Var#70<$data>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#106
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#105<$data>
        args[1]: LITERAL('"')
        result: Var#107
    Expr_BinaryOp_Identical
        left: Var#106
        right: Var#107
        result: Var#108
    Stmt_JumpIf
        cond: Var#108
        if: Block#47
        else: Block#48

Block#41
    Parent: Block#35
    Expr_Assign
        var: Var#109
        expr: LITERAL('$')
        result: Var#110
    Stmt_Jump
        target: Block#49

Block#42
    Parent: Block#35
    Expr_Assign
        var: Var#111
        expr: LITERAL('')
        result: Var#112
    Stmt_Jump
        target: Block#49

Block#43
    Parent: Block#36
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#113
    Terminal_Return
        expr: Var#113

Block#44
    Parent: Block#38
    Var#114<$brace> = Phi(Var#81<$brace>)
    Var#115<$data> = Phi(Var#82<$data>)
    Var#116<$strict> = Phi(Var#83<$strict>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#117
    Expr_BinaryOp_NotIdentical
        left: Var#117
        right: Var#114<$brace>
        result: Var#118
    Stmt_JumpIf
        cond: Var#118
        if: Block#50
        else: Block#51

Block#45
    Parent: Block#39
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#119
    Terminal_Return
        expr: Var#119

Block#46
    Parent: Block#39
    Stmt_Jump
        target: Block#52

Block#47
    Parent: Block#40
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#120
    Terminal_Return
        expr: Var#120

Block#48
    Parent: Block#40
    Stmt_Jump
        target: Block#53

Block#49
    Parent: Block#41
    Parent: Block#42
    Var#121 = Phi(Var#109, Var#111)
    Var#122<$token> = Phi(Var#98<$token>)
    Var#123<$data> = Phi(Var#99<$data>)
    Expr_Assign
        var: Var#124<$end>
        expr: Var#121
        result: Var#125
    Expr_ConcatList
        list[0]: LITERAL('/^')
        list[1]: Var#122<$token>
        list[2]: LITERAL(':[0-9.E-]+;')
        list[3]: Var#124<$end>
        list[4]: LITERAL('/')
        result: Var#126
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: Var#126
        args[1]: Var#123<$data>
        result: Var#127
    Expr_Cast_Bool
        expr: Var#127
        result: Var#128
    Terminal_Return
        expr: Var#128

Block#50
    Parent: Block#44
    Var#129<$brace> = Phi(Var#114<$brace>)
    Expr_BinaryOp_Smaller
        left: Var#129<$brace>
        right: LITERAL(4)
        result: Var#130
    Expr_Cast_Bool
        expr: Var#130
        result: Var#131
    Stmt_Jump
        target: Block#51

Block#51
    Parent: Block#44
    Parent: Block#50
    Var#132 = Phi(LITERAL(false), Var#131)
    Var#133<$data> = Phi(Var#115<$data>)
    Var#134<$strict> = Phi(Var#116<$strict>)
    Stmt_JumpIf
        cond: Var#132
        if: Block#54
        else: Block#55

Block#52
    Parent: Block#46
    Var#135<$token> = Phi(Var#75<$token>)
    Var#136<$data> = Phi(Var#101<$data>)
    Stmt_Jump
        target: Block#53

Block#53
    Parent: Block#52
    Parent: Block#48
    Var#86<$token> = Phi(Var#135<$token>, Var#75<$token>)
    Var#88<$data> = Phi(Var#136<$data>, Var#105<$data>)
    Stmt_Jump
        target: Block#31

Block#54
    Parent: Block#51
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#137
    Terminal_Return
        expr: Var#137

Block#55
    Parent: Block#51
    Stmt_Jump
        target: Block#56

Block#56
    Parent: Block#55
    Var#71<$data> = Phi(Var#133<$data>)
    Var#73<$strict> = Phi(Var#134<$strict>)
    Stmt_Jump
        target: Block#27

Function is_serialized_string():
Block#1
    Expr_Param
        name: LITERAL('data')
        result: Var#1<$data>
    Expr_FuncCall
        name: LITERAL('is_string')
        args[0]: Var#1<$data>
        result: Var#2
    Expr_BooleanNot
        expr: Var#2
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#4<$data> = Phi(Var#1<$data>)
    Expr_Assertion<not(type(LITERAL('string')))>
        expr: Var#4<$data>
        result: Var#5<$data>
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#6
    Terminal_Return
        expr: Var#6

Block#3
    Parent: Block#1
    Var#7<$data> = Phi(Var#1<$data>)
    Expr_Assertion<not(not(type(LITERAL('string'))))>
        expr: Var#7<$data>
        result: Var#8<$data>
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Var#9<$data> = Phi(Var#8<$data>)
    Expr_FuncCall
        name: LITERAL('trim')
        args[0]: Var#9<$data>
        result: Var#10
    Expr_Assign
        var: Var#11<$data>
        expr: Var#10
        result: Var#12
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#11<$data>
        result: Var#13
    Expr_BinaryOp_Smaller
        left: Var#13
        right: LITERAL(4)
        result: Var#14
    Stmt_JumpIf
        cond: Var#14
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#15
    Terminal_Return
        expr: Var#15

Block#6
    Parent: Block#4
    Var#16<$data> = Phi(Var#11<$data>)
    Expr_ArrayDimFetch
        var: Var#16<$data>
        dim: LITERAL(1)
        result: Var#17
    Expr_BinaryOp_NotIdentical
        left: LITERAL(':')
        right: Var#17
        result: Var#18
    Stmt_JumpIf
        cond: Var#18
        if: Block#7
        else: Block#8

Block#7
    Parent: Block#6
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#19
    Terminal_Return
        expr: Var#19

Block#8
    Parent: Block#6
    Var#20<$data> = Phi(Var#16<$data>)
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#21
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#20<$data>
        args[1]: Var#21
        result: Var#22
    Expr_BinaryOp_NotIdentical
        left: LITERAL(';')
        right: Var#22
        result: Var#23
    Stmt_JumpIf
        cond: Var#23
        if: Block#9
        else: Block#10

Block#9
    Parent: Block#8
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#24
    Terminal_Return
        expr: Var#24

Block#10
    Parent: Block#8
    Var#25<$data> = Phi(Var#20<$data>)
    Expr_ArrayDimFetch
        var: Var#25<$data>
        dim: LITERAL(0)
        result: Var#26
    Expr_BinaryOp_NotIdentical
        left: Var#26
        right: LITERAL('s')
        result: Var#27
    Stmt_JumpIf
        cond: Var#27
        if: Block#11
        else: Block#12

Block#11
    Parent: Block#10
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#28
    Terminal_Return
        expr: Var#28

Block#12
    Parent: Block#10
    Var#29<$data> = Phi(Var#25<$data>)
    Expr_UnaryMinus
        expr: LITERAL(2)
        result: Var#30
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#29<$data>
        args[1]: Var#30
        args[2]: LITERAL(1)
        result: Var#31
    Expr_BinaryOp_NotIdentical
        left: LITERAL('"')
        right: Var#31
        result: Var#32
    Stmt_JumpIf
        cond: Var#32
        if: Block#13
        else: Block#14

Block#13
    Parent: Block#12
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#33
    Terminal_Return
        expr: Var#33

Block#14
    Parent: Block#12
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#34
    Terminal_Return
        expr: Var#34

Function maybe_serialize():
Block#1
    Expr_Param
        name: LITERAL('data')
        result: Var#1<$data>
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#1<$data>
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Parent: Block#3
    Var#3 = Phi(LITERAL(true), Var#4)
    Var#5<$data> = Phi(Var#1<$data>, Var#6<$data>)
    Stmt_JumpIf
        cond: Var#3
        if: Block#4
        else: Block#5

Block#3
    Parent: Block#1
    Var#6<$data> = Phi(Var#1<$data>)
    Expr_FuncCall
        name: LITERAL('is_object')
        args[0]: Var#6<$data>
        result: Var#7
    Expr_Cast_Bool
        expr: Var#7
        result: Var#4
    Stmt_Jump
        target: Block#2

Block#4
    Parent: Block#2
    Var#8<$data> = Phi(Var#5<$data>)
    Expr_Assertion<(type(LITERAL('array'))|type(LITERAL('object')))>
        expr: Var#8<$data>
        result: Var#9<$data>
    Expr_FuncCall
        name: LITERAL('serialize')
        args[0]: Var#9<$data>
        result: Var#10
    Terminal_Return
        expr: Var#10

Block#5
    Parent: Block#2
    Var#11<$data> = Phi(Var#5<$data>)
    Expr_Assertion<not((type(LITERAL('array'))|type(LITERAL('object'))))>
        expr: Var#11<$data>
        result: Var#12<$data>
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#5
    Var#13<$data> = Phi(Var#12<$data>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#14
    Expr_FuncCall
        name: LITERAL('is_serialized')
        args[0]: Var#13<$data>
        args[1]: Var#14
        result: Var#15
    Stmt_JumpIf
        cond: Var#15
        if: Block#7
        else: Block#8

Block#7
    Parent: Block#6
    Var#16<$data> = Phi(Var#13<$data>)
    Expr_FuncCall
        name: LITERAL('serialize')
        args[0]: Var#16<$data>
        result: Var#17
    Terminal_Return
        expr: Var#17

Block#8
    Parent: Block#6
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#8
    Var#18<$data> = Phi(Var#13<$data>)
    Terminal_Return
        expr: Var#18<$data>

Function xmlrpc_getposttitle():
Block#1
    Expr_Param
        name: LITERAL('content')
        result: Var#1<$content>
    Var#2<$matchtitle> = Phi()
    Var#3<$post_default_title> = Phi()
    Terminal_GlobalVar
        var: LITERAL('post_default_title')
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('/<title>(.+?)<\\/title>/is')
        args[1]: Var#1<$content>
        args[2]: Var#2<$matchtitle>
        result: Var#4
    Stmt_JumpIf
        cond: Var#4
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#5<$matchtitle> = Phi(Var#2<$matchtitle>)
    Expr_ArrayDimFetch
        var: Var#5<$matchtitle>
        dim: LITERAL(1)
        result: Var#6
    Expr_Assign
        var: Var#7<$post_title>
        expr: Var#6
        result: Var#8
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Var#9<$post_default_title> = Phi(Var#3<$post_default_title>)
    Expr_Assign
        var: Var#10<$post_title>
        expr: Var#9<$post_default_title>
        result: Var#11
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Var#12<$post_title> = Phi(Var#7<$post_title>, Var#10<$post_title>)
    Terminal_Return
        expr: Var#12<$post_title>

Function xmlrpc_getpostcategory():
Block#1
    Expr_Param
        name: LITERAL('content')
        result: Var#1<$content>
    Var#2<$matchcat> = Phi()
    Var#3<$post_default_category> = Phi()
    Terminal_GlobalVar
        var: LITERAL('post_default_category')
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('/<category>(.+?)<\\/category>/is')
        args[1]: Var#1<$content>
        args[2]: Var#2<$matchcat>
        result: Var#4
    Stmt_JumpIf
        cond: Var#4
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#5<$matchcat> = Phi(Var#2<$matchcat>)
    Expr_ArrayDimFetch
        var: Var#5<$matchcat>
        dim: LITERAL(1)
        result: Var#6
    Expr_FuncCall
        name: LITERAL('trim')
        args[0]: Var#6
        args[1]: LITERAL(',')
        result: Var#7
    Expr_Assign
        var: Var#8<$post_category>
        expr: Var#7
        result: Var#9
    Expr_FuncCall
        name: LITERAL('explode')
        args[0]: LITERAL(',')
        args[1]: Var#8<$post_category>
        result: Var#10
    Expr_Assign
        var: Var#11<$post_category>
        expr: Var#10
        result: Var#12
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Var#13<$post_default_category> = Phi(Var#3<$post_default_category>)
    Expr_Assign
        var: Var#14<$post_category>
        expr: Var#13<$post_default_category>
        result: Var#15
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Var#16<$post_category> = Phi(Var#11<$post_category>, Var#14<$post_category>)
    Terminal_Return
        expr: Var#16<$post_category>

Function xmlrpc_removepostdata():
Block#1
    Expr_Param
        name: LITERAL('content')
        result: Var#1<$content>
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/<title>(.+?)<\\/title>/si')
        args[1]: LITERAL('')
        args[2]: Var#1<$content>
        result: Var#2
    Expr_Assign
        var: Var#3<$content>
        expr: Var#2
        result: Var#4
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/<category>(.+?)<\\/category>/si')
        args[1]: LITERAL('')
        args[2]: Var#3<$content>
        result: Var#5
    Expr_Assign
        var: Var#6<$content>
        expr: Var#5
        result: Var#7
    Expr_FuncCall
        name: LITERAL('trim')
        args[0]: Var#6<$content>
        result: Var#8
    Expr_Assign
        var: Var#9<$content>
        expr: Var#8
        result: Var#10
    Terminal_Return
        expr: Var#9<$content>

Function wp_extract_urls():
Block#1
    Expr_Param
        name: LITERAL('content')
        result: Var#1<$content>
    Var#2<$post_links> = Phi()
    Expr_BinaryOp_Concat
        left: LITERAL('#(["\']?)(')
        right: LITERAL('(?:([\\w-]+:)?//?)')
        result: Var#3
    Expr_BinaryOp_Concat
        left: Var#3
        right: LITERAL('[^\\s()<>]+')
        result: Var#4
    Expr_BinaryOp_Concat
        left: Var#4
        right: LITERAL('[.]')
        result: Var#5
    Expr_BinaryOp_Concat
        left: Var#5
        right: LITERAL('(?:')
        result: Var#6
    Expr_BinaryOp_Concat
        left: Var#6
        right: LITERAL('\\([\\w\\d]+\\)|')
        result: Var#7
    Expr_BinaryOp_Concat
        left: Var#7
        right: LITERAL('(?:')
        result: Var#8
    Expr_BinaryOp_Concat
        left: Var#8
        right: LITERAL('[^`!()\\[\\]{};:\'".,<>«»“”‘’\\s]|')
        result: Var#9
    Expr_BinaryOp_Concat
        left: Var#9
        right: LITERAL('(?:[:]\\d+)?/?')
        result: Var#10
    Expr_BinaryOp_Concat
        left: Var#10
        right: LITERAL(')+')
        result: Var#11
    Expr_BinaryOp_Concat
        left: Var#11
        right: LITERAL(')')
        result: Var#12
    Expr_BinaryOp_Concat
        left: Var#12
        right: LITERAL(')\\1#')
        result: Var#13
    Expr_FuncCall
        name: LITERAL('preg_match_all')
        args[0]: Var#13
        args[1]: Var#1<$content>
        args[2]: Var#2<$post_links>
        result: Var#14
    Expr_ArrayDimFetch
        var: Var#2<$post_links>
        dim: LITERAL(2)
        result: Var#15
    Expr_FuncCall
        name: LITERAL('array_map')
        args[0]: LITERAL('html_entity_decode')
        args[1]: Var#15
        result: Var#16
    Expr_FuncCall
        name: LITERAL('array_unique')
        args[0]: Var#16
        result: Var#17
    Expr_Assign
        var: Var#18<$post_links>
        expr: Var#17
        result: Var#19
    Expr_FuncCall
        name: LITERAL('array_values')
        args[0]: Var#18<$post_links>
        result: Var#20
    Terminal_Return
        expr: Var#20

Function do_enclose():
Block#1
    Expr_Param
        name: LITERAL('content')
        result: Var#1<$content>
    Expr_Param
        name: LITERAL('post_ID')
        result: Var#2<$post_ID>
    Var#3<$wpdb> = Phi()
    Var#4<$mime> = Phi()
    Terminal_GlobalVar
        var: LITERAL('wpdb')
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#5
    Expr_ConstFetch
        name: LITERAL('WPINC')
        result: Var#6
    Expr_BinaryOp_Concat
        left: Var#5
        right: Var#6
        result: Var#7
    Expr_BinaryOp_Concat
        left: Var#7
        right: LITERAL('/class-IXR.php')
        result: Var#8
    Expr_Include
        expr: Var#8
        result: Var#9
    Expr_Array
        result: Var#10
    Expr_Assign
        var: Var#11<$post_links>
        expr: Var#10
        result: Var#12
    Expr_FuncCall
        name: LITERAL('get_enclosed')
        args[0]: Var#2<$post_ID>
        result: Var#13
    Expr_Assign
        var: Var#14<$pung>
        expr: Var#13
        result: Var#15
    Expr_FuncCall
        name: LITERAL('wp_extract_urls')
        args[0]: Var#1<$content>
        result: Var#16
    Expr_Assign
        var: Var#17<$post_links_temp>
        expr: Var#16
        result: Var#18
    Iterator_Reset
        var: Var#14<$pung>
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Parent: Block#13
    Var#19<$post_links_temp> = Phi(Var#17<$post_links_temp>, Var#20<$post_links_temp>)
    Var#21<$wpdb> = Phi(Var#3<$wpdb>, Var#22<$wpdb>)
    Var#23<$post_ID> = Phi(Var#2<$post_ID>, Var#24<$post_ID>)
    Var#25<$pung> = Phi(Var#14<$pung>, Var#26<$pung>)
    Var#27<$post_links> = Phi(Var#11<$post_links>, Var#28<$post_links>)
    Var#29<$mime> = Phi(Var#4<$mime>, Var#30<$mime>)
    Iterator_Valid
        var: Var#14<$pung>
        result: Var#31
    Stmt_JumpIf
        cond: Var#31
        if: Block#3
        else: Block#4

Block#3
    Parent: Block#2
    Var#32<$post_links_temp> = Phi(Var#19<$post_links_temp>)
    Iterator_Value
        var: Var#14<$pung>
        result: Var#33
    Expr_Assign
        var: Var#34<$link_test>
        expr: Var#33
        result: Var#35
    Expr_FuncCall
        name: LITERAL('in_array')
        args[0]: Var#34<$link_test>
        args[1]: Var#32<$post_links_temp>
        result: Var#36
    Expr_BooleanNot
        expr: Var#36
        result: Var#37
    Stmt_JumpIf
        cond: Var#37
        if: Block#5
        else: Block#6

Block#4
    Parent: Block#2
    Stmt_Jump
        target: Block#7

Block#5
    Parent: Block#3
    Var#38<$wpdb> = Phi(Var#21<$wpdb>)
    Var#39<$post_ID> = Phi(Var#23<$post_ID>)
    Var#40<$link_test> = Phi(Var#34<$link_test>)
    Expr_PropertyFetch
        var: Var#38<$wpdb>
        name: LITERAL('postmeta')
        result: Var#41
    Expr_ConcatList
        list[0]: LITERAL('SELECT meta_id FROM ')
        list[1]: Var#41
        list[2]: LITERAL(' WHERE post_id = %d AND meta_key = \'enclosure\' AND meta_value LIKE %s')
        result: Var#42
    Expr_MethodCall
        var: Var#38<$wpdb>
        name: LITERAL('esc_like')
        args[0]: Var#40<$link_test>
        result: Var#43
    Expr_BinaryOp_Concat
        left: Var#43
        right: LITERAL('%')
        result: Var#44
    Expr_MethodCall
        var: Var#38<$wpdb>
        name: LITERAL('prepare')
        args[0]: Var#42
        args[1]: Var#39<$post_ID>
        args[2]: Var#44
        result: Var#45
    Expr_MethodCall
        var: Var#38<$wpdb>
        name: LITERAL('get_col')
        args[0]: Var#45
        result: Var#46
    Expr_Assign
        var: Var#47<$mids>
        expr: Var#46
        result: Var#48
    Iterator_Reset
        var: Var#47<$mids>
    Stmt_Jump
        target: Block#8

Block#6
    Parent: Block#3
    Stmt_Jump
        target: Block#9

Block#7
    Parent: Block#4
    Var#49<$post_links_temp> = Phi(Var#19<$post_links_temp>)
    Expr_Cast_Array
        expr: Var#49<$post_links_temp>
        result: Var#50
    Iterator_Reset
        var: Var#50
    Stmt_Jump
        target: Block#10

Block#8
    Parent: Block#5
    Parent: Block#16
    Var#51<$post_links_temp> = Phi(Var#32<$post_links_temp>)
    Var#52<$wpdb> = Phi(Var#38<$wpdb>)
    Var#53<$post_ID> = Phi(Var#39<$post_ID>)
    Var#54<$pung> = Phi(Var#25<$pung>)
    Var#55<$post_links> = Phi(Var#27<$post_links>)
    Var#56<$mime> = Phi(Var#29<$mime>)
    Iterator_Valid
        var: Var#47<$mids>
        result: Var#57
    Stmt_JumpIf
        cond: Var#57
        if: Block#11
        else: Block#12

Block#9
    Parent: Block#17
    Parent: Block#6
    Var#20<$post_links_temp> = Phi(Var#51<$post_links_temp>, Var#32<$post_links_temp>)
    Var#22<$wpdb> = Phi(Var#52<$wpdb>, Var#21<$wpdb>)
    Var#24<$post_ID> = Phi(Var#53<$post_ID>, Var#23<$post_ID>)
    Var#26<$pung> = Phi(Var#54<$pung>, Var#25<$pung>)
    Var#28<$post_links> = Phi(Var#55<$post_links>, Var#27<$post_links>)
    Var#30<$mime> = Phi(Var#56<$mime>, Var#29<$mime>)
    Stmt_Jump
        target: Block#13

Block#10
    Parent: Block#7
    Parent: Block#25
    Var#58<$pung> = Phi(Var#25<$pung>, Var#59<$pung>)
    Var#60<$post_links> = Phi(Var#27<$post_links>, Var#61<$post_links>)
    Var#62<$post_ID> = Phi(Var#23<$post_ID>, Var#63<$post_ID>)
    Var#64<$wpdb> = Phi(Var#21<$wpdb>, Var#65<$wpdb>)
    Var#66<$mime> = Phi(Var#29<$mime>, Var#67<$mime>)
    Iterator_Valid
        var: Var#50
        result: Var#68
    Stmt_JumpIf
        cond: Var#68
        if: Block#14
        else: Block#15

Block#11
    Parent: Block#8
    Iterator_Value
        var: Var#47<$mids>
        result: Var#69
    Expr_Assign
        var: Var#70<$mid>
        expr: Var#69
        result: Var#71
    Expr_FuncCall
        name: LITERAL('delete_metadata_by_mid')
        args[0]: LITERAL('post')
        args[1]: Var#70<$mid>
        result: Var#72
    Stmt_Jump
        target: Block#16

Block#12
    Parent: Block#8
    Stmt_Jump
        target: Block#17

Block#13
    Parent: Block#9
    Stmt_Jump
        target: Block#2

Block#14
    Parent: Block#10
    Var#73<$pung> = Phi(Var#58<$pung>)
    Iterator_Value
        var: Var#50
        result: Var#74
    Expr_Assign
        var: Var#75<$link_test>
        expr: Var#74
        result: Var#76
    Expr_FuncCall
        name: LITERAL('in_array')
        args[0]: Var#75<$link_test>
        args[1]: Var#73<$pung>
        result: Var#77
    Expr_BooleanNot
        expr: Var#77
        result: Var#78
    Stmt_JumpIf
        cond: Var#78
        if: Block#18
        else: Block#19

Block#15
    Parent: Block#10
    Stmt_Jump
        target: Block#20

Block#16
    Parent: Block#11
    Stmt_Jump
        target: Block#8

Block#17
    Parent: Block#12
    Stmt_Jump
        target: Block#9

Block#18
    Parent: Block#14
    Stmt_Jump
        target: Block#21

Block#19
    Parent: Block#14
    Stmt_Jump
        target: Block#22

Block#20
    Parent: Block#15
    Var#79<$post_links> = Phi(Var#60<$post_links>)
    Var#80<$post_ID> = Phi(Var#62<$post_ID>)
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('enclosure_links')
        args[1]: Var#79<$post_links>
        args[2]: Var#80<$post_ID>
        result: Var#81
    Expr_Assign
        var: Var#82<$post_links>
        expr: Var#81
        result: Var#83
    Expr_Cast_Array
        expr: Var#82<$post_links>
        result: Var#84
    Iterator_Reset
        var: Var#84
    Stmt_Jump
        target: Block#23

Block#21
    Parent: Block#18
    Var#85<$link_test> = Phi(Var#75<$link_test>)
    Expr_FuncCall
        name: LITERAL('parse_url')
        args[0]: Var#85<$link_test>
        result: Var#86
    Stmt_Jump
        target: Block#24

Block#22
    Parent: Block#41
    Parent: Block#19
    Var#87<$pung> = Phi(Var#88<$pung>, Var#73<$pung>)
    Var#89<$post_links> = Phi(Var#90<$post_links>, Var#60<$post_links>)
    Var#91<$post_ID> = Phi(Var#92<$post_ID>, Var#62<$post_ID>)
    Var#93<$wpdb> = Phi(Var#94<$wpdb>, Var#64<$wpdb>)
    Var#95<$mime> = Phi(Var#96<$mime>, Var#66<$mime>)
    Stmt_Jump
        target: Block#25

Block#23
    Parent: Block#20
    Parent: Block#47
    Var#97<$wpdb> = Phi(Var#64<$wpdb>, Var#98<$wpdb>)
    Var#99<$post_ID> = Phi(Var#80<$post_ID>, Var#100<$post_ID>)
    Var#101<$mime> = Phi(Var#66<$mime>, Var#102<$mime>)
    Iterator_Valid
        var: Var#84
        result: Var#103
    Stmt_JumpIf
        cond: Var#103
        if: Block#26
        else: Block#27

Block#24
    Parent: Block#21
    Expr_Assign
        var: Var#104<$test>
        expr: Var#86
        result: Var#105
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#106
    Expr_BinaryOp_Identical
        left: Var#106
        right: Var#104<$test>
        result: Var#107
    Stmt_JumpIf
        cond: Var#107
        if: Block#28
        else: Block#29

Block#25
    Parent: Block#22
    Parent: Block#28
    Var#59<$pung> = Phi(Var#87<$pung>, Var#73<$pung>)
    Var#61<$post_links> = Phi(Var#89<$post_links>, Var#60<$post_links>)
    Var#63<$post_ID> = Phi(Var#91<$post_ID>, Var#62<$post_ID>)
    Var#65<$wpdb> = Phi(Var#93<$wpdb>, Var#64<$wpdb>)
    Var#67<$mime> = Phi(Var#95<$mime>, Var#66<$mime>)
    Stmt_Jump
        target: Block#10

Block#26
    Parent: Block#23
    Iterator_Value
        var: Var#84
        result: Var#108
    Expr_Assign
        var: Var#109<$url>
        expr: Var#108
        result: Var#110
    Expr_BinaryOp_NotEqual
        left: Var#109<$url>
        right: LITERAL('')
        result: Var#111
    Stmt_JumpIf
        cond: Var#111
        if: Block#30
        else: Block#31

Block#27
    Parent: Block#23
    Stmt_Jump
        target: Block#32

Block#28
    Parent: Block#24
    Stmt_Jump
        target: Block#25

Block#29
    Parent: Block#24
    Stmt_Jump
        target: Block#33

Block#30
    Parent: Block#26
    Var#112<$wpdb> = Phi(Var#97<$wpdb>)
    Var#113<$post_ID> = Phi(Var#99<$post_ID>)
    Var#114<$url> = Phi(Var#109<$url>)
    Expr_PropertyFetch
        var: Var#112<$wpdb>
        name: LITERAL('postmeta')
        result: Var#115
    Expr_ConcatList
        list[0]: LITERAL('SELECT post_id FROM ')
        list[1]: Var#115
        list[2]: LITERAL(' WHERE post_id = %d AND meta_key = \'enclosure\' AND meta_value LIKE %s')
        result: Var#116
    Expr_MethodCall
        var: Var#112<$wpdb>
        name: LITERAL('esc_like')
        args[0]: Var#114<$url>
        result: Var#117
    Expr_BinaryOp_Concat
        left: Var#117
        right: LITERAL('%')
        result: Var#118
    Expr_MethodCall
        var: Var#112<$wpdb>
        name: LITERAL('prepare')
        args[0]: Var#116
        args[1]: Var#113<$post_ID>
        args[2]: Var#118
        result: Var#119
    Expr_MethodCall
        var: Var#112<$wpdb>
        name: LITERAL('get_var')
        args[0]: Var#119
        result: Var#120
    Expr_BooleanNot
        expr: Var#120
        result: Var#121
    Expr_Cast_Bool
        expr: Var#121
        result: Var#122
    Stmt_Jump
        target: Block#31

Block#31
    Parent: Block#26
    Parent: Block#30
    Var#123 = Phi(LITERAL(false), Var#122)
    Var#124<$wpdb> = Phi(Var#97<$wpdb>, Var#112<$wpdb>)
    Var#125<$post_ID> = Phi(Var#99<$post_ID>, Var#113<$post_ID>)
    Var#126<$url> = Phi(Var#109<$url>, Var#114<$url>)
    Var#127<$mime> = Phi(Var#101<$mime>)
    Stmt_JumpIf
        cond: Var#123
        if: Block#34
        else: Block#35

Block#32
    Parent: Block#27
    Terminal_Return

Block#33
    Parent: Block#29
    Var#128<$pung> = Phi(Var#73<$pung>)
    Var#129<$test> = Phi(Var#104<$test>)
    Var#130<$link_test> = Phi(Var#85<$link_test>)
    Var#131<$post_links> = Phi(Var#60<$post_links>)
    Var#132<$post_ID> = Phi(Var#62<$post_ID>)
    Var#133<$wpdb> = Phi(Var#64<$wpdb>)
    Var#134<$mime> = Phi(Var#66<$mime>)
    Expr_ArrayDimFetch
        var: Var#129<$test>
        dim: LITERAL('query')
        result: Var#135
    Expr_Isset
        vars[0]: Var#135
        result: Var#136
    Stmt_JumpIf
        cond: Var#136
        if: Block#36
        else: Block#37

Block#34
    Parent: Block#31
    Var#137<$url> = Phi(Var#126<$url>)
    Expr_FuncCall
        name: LITERAL('wp_get_http_headers')
        args[0]: Var#137<$url>
        result: Var#138
    Expr_Assign
        var: Var#139<$headers>
        expr: Var#138
        result: Var#140
    Stmt_JumpIf
        cond: Var#140
        if: Block#38
        else: Block#39

Block#35
    Parent: Block#31
    Stmt_Jump
        target: Block#40

Block#36
    Parent: Block#33
    Var#141<$link_test> = Phi(Var#130<$link_test>)
    Var#142<$post_links> = Phi(Var#131<$post_links>)
    Expr_ArrayDimFetch
        var: Var#142<$post_links>
        result: Var#143
    Expr_Assign
        var: Var#143
        expr: Var#141<$link_test>
        result: Var#144
    Stmt_Jump
        target: Block#41

Block#37
    Parent: Block#33
    Var#145<$test> = Phi(Var#129<$test>)
    Expr_ArrayDimFetch
        var: Var#145<$test>
        dim: LITERAL('path')
        result: Var#146
    Expr_Isset
        vars[0]: Var#146
        result: Var#147
    Stmt_JumpIf
        cond: Var#147
        if: Block#42
        else: Block#43

Block#38
    Parent: Block#34
    Var#148<$headers> = Phi(Var#139<$headers>)
    Expr_ArrayDimFetch
        var: Var#148<$headers>
        dim: LITERAL('content-length')
        result: Var#149
    Expr_Isset
        vars[0]: Var#149
        result: Var#150
    Stmt_JumpIf
        cond: Var#150
        if: Block#44
        else: Block#45

Block#39
    Parent: Block#34
    Stmt_Jump
        target: Block#46

Block#40
    Parent: Block#46
    Parent: Block#35
    Var#98<$wpdb> = Phi(Var#151<$wpdb>, Var#124<$wpdb>)
    Var#100<$post_ID> = Phi(Var#152<$post_ID>, Var#125<$post_ID>)
    Var#102<$mime> = Phi(Var#153<$mime>, Var#127<$mime>)
    Stmt_Jump
        target: Block#47

Block#41
    Parent: Block#36
    Parent: Block#51
    Parent: Block#52
    Var#88<$pung> = Phi(Var#128<$pung>, Var#154<$pung>)
    Var#90<$post_links> = Phi(Var#142<$post_links>, Var#155<$post_links>, Var#156<$post_links>)
    Var#92<$post_ID> = Phi(Var#132<$post_ID>, Var#157<$post_ID>)
    Var#94<$wpdb> = Phi(Var#133<$wpdb>, Var#158<$wpdb>)
    Var#96<$mime> = Phi(Var#134<$mime>, Var#159<$mime>)
    Stmt_Jump
        target: Block#22

Block#42
    Parent: Block#37
    Var#160<$test> = Phi(Var#145<$test>)
    Expr_ArrayDimFetch
        var: Var#160<$test>
        dim: LITERAL('path')
        result: Var#161
    Expr_BinaryOp_NotEqual
        left: Var#161
        right: LITERAL('/')
        result: Var#162
    Expr_Cast_Bool
        expr: Var#162
        result: Var#163
    Stmt_Jump
        target: Block#43

Block#43
    Parent: Block#37
    Parent: Block#42
    Var#164 = Phi(LITERAL(false), Var#163)
    Var#165<$pung> = Phi(Var#128<$pung>)
    Var#166<$post_links> = Phi(Var#131<$post_links>)
    Var#167<$test> = Phi(Var#145<$test>, Var#160<$test>)
    Var#168<$link_test> = Phi(Var#130<$link_test>)
    Var#169<$post_ID> = Phi(Var#132<$post_ID>)
    Var#170<$wpdb> = Phi(Var#133<$wpdb>)
    Var#171<$mime> = Phi(Var#134<$mime>)
    Stmt_JumpIf
        cond: Var#164
        if: Block#48
        else: Block#49

Block#44
    Parent: Block#38
    Var#172<$headers> = Phi(Var#148<$headers>)
    Expr_ArrayDimFetch
        var: Var#172<$headers>
        dim: LITERAL('content-length')
        result: Var#173
    Expr_Cast_Int
        expr: Var#173
        result: Var#174
    Expr_Assign
        var: Var#175
        expr: Var#174
        result: Var#176
    Stmt_Jump
        target: Block#50

Block#45
    Parent: Block#38
    Expr_Assign
        var: Var#177
        expr: LITERAL(0)
        result: Var#178
    Stmt_Jump
        target: Block#50

Block#46
    Parent: Block#69
    Parent: Block#39
    Var#151<$wpdb> = Phi(Var#179<$wpdb>, Var#124<$wpdb>)
    Var#152<$post_ID> = Phi(Var#180<$post_ID>, Var#125<$post_ID>)
    Var#153<$mime> = Phi(Var#181<$mime>, Var#127<$mime>)
    Stmt_Jump
        target: Block#40

Block#47
    Parent: Block#40
    Stmt_Jump
        target: Block#23

Block#48
    Parent: Block#43
    Var#182<$test> = Phi(Var#167<$test>)
    Expr_ArrayDimFetch
        var: Var#182<$test>
        dim: LITERAL('path')
        result: Var#183
    Expr_BinaryOp_NotEqual
        left: Var#183
        right: LITERAL('')
        result: Var#184
    Expr_Cast_Bool
        expr: Var#184
        result: Var#185
    Stmt_Jump
        target: Block#49

Block#49
    Parent: Block#43
    Parent: Block#48
    Var#186 = Phi(LITERAL(false), Var#185)
    Var#154<$pung> = Phi(Var#165<$pung>)
    Var#156<$post_links> = Phi(Var#166<$post_links>)
    Var#187<$link_test> = Phi(Var#168<$link_test>)
    Var#157<$post_ID> = Phi(Var#169<$post_ID>)
    Var#158<$wpdb> = Phi(Var#170<$wpdb>)
    Var#159<$mime> = Phi(Var#171<$mime>)
    Stmt_JumpIf
        cond: Var#186
        if: Block#51
        else: Block#52

Block#50
    Parent: Block#44
    Parent: Block#45
    Var#188 = Phi(Var#175, Var#177)
    Var#189<$wpdb> = Phi(Var#124<$wpdb>)
    Var#190<$post_ID> = Phi(Var#125<$post_ID>)
    Var#191<$headers> = Phi(Var#172<$headers>, Var#148<$headers>)
    Var#192<$url> = Phi(Var#137<$url>)
    Var#193<$mime> = Phi(Var#127<$mime>)
    Expr_Assign
        var: Var#194<$len>
        expr: Var#188
        result: Var#195
    Expr_ArrayDimFetch
        var: Var#191<$headers>
        dim: LITERAL('content-type')
        result: Var#196
    Expr_Isset
        vars[0]: Var#196
        result: Var#197
    Stmt_JumpIf
        cond: Var#197
        if: Block#53
        else: Block#54

Block#51
    Parent: Block#49
    Var#198<$link_test> = Phi(Var#187<$link_test>)
    Var#155<$post_links> = Phi(Var#156<$post_links>)
    Expr_ArrayDimFetch
        var: Var#155<$post_links>
        result: Var#199
    Expr_Assign
        var: Var#199
        expr: Var#198<$link_test>
        result: Var#200
    Stmt_Jump
        target: Block#41

Block#52
    Parent: Block#49
    Stmt_Jump
        target: Block#41

Block#53
    Parent: Block#50
    Var#201<$headers> = Phi(Var#191<$headers>)
    Expr_ArrayDimFetch
        var: Var#201<$headers>
        dim: LITERAL('content-type')
        result: Var#202
    Expr_Assign
        var: Var#203
        expr: Var#202
        result: Var#204
    Stmt_Jump
        target: Block#55

Block#54
    Parent: Block#50
    Expr_Assign
        var: Var#205
        expr: LITERAL('')
        result: Var#206
    Stmt_Jump
        target: Block#55

Block#55
    Parent: Block#53
    Parent: Block#54
    Var#207 = Phi(Var#203, Var#205)
    Var#208<$wpdb> = Phi(Var#189<$wpdb>)
    Var#209<$post_ID> = Phi(Var#190<$post_ID>)
    Var#210<$url> = Phi(Var#192<$url>)
    Var#211<$len> = Phi(Var#194<$len>)
    Var#212<$mime> = Phi(Var#193<$mime>)
    Expr_Assign
        var: Var#213<$type>
        expr: Var#207
        result: Var#214
    Expr_Array
        values[0]: LITERAL('video')
        values[1]: LITERAL('audio')
        result: Var#215
    Expr_Assign
        var: Var#216<$allowed_types>
        expr: Var#215
        result: Var#217
    Stmt_Jump
        target: Block#56

Block#56
    Parent: Block#55
    Var#218<$url> = Phi(Var#210<$url>)
    Expr_FuncCall
        name: LITERAL('parse_url')
        args[0]: Var#218<$url>
        result: Var#219
    Stmt_Jump
        target: Block#57

Block#57
    Parent: Block#56
    Expr_Assign
        var: Var#220<$url_parts>
        expr: Var#219
        result: Var#221
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#222
    Expr_BinaryOp_NotIdentical
        left: Var#222
        right: Var#220<$url_parts>
        result: Var#223
    Stmt_JumpIf
        cond: Var#223
        if: Block#58
        else: Block#59

Block#58
    Parent: Block#57
    Var#224<$url_parts> = Phi(Var#220<$url_parts>)
    Expr_ArrayDimFetch
        var: Var#224<$url_parts>
        dim: LITERAL('path')
        result: Var#225
    Expr_ConstFetch
        name: LITERAL('PATHINFO_EXTENSION')
        result: Var#226
    Expr_FuncCall
        name: LITERAL('pathinfo')
        args[0]: Var#225
        args[1]: Var#226
        result: Var#227
    Expr_Assign
        var: Var#228<$extension>
        expr: Var#227
        result: Var#229
    Expr_Empty
        expr: Var#228<$extension>
        result: Var#230
    Expr_BooleanNot
        expr: Var#230
        result: Var#231
    Stmt_JumpIf
        cond: Var#231
        if: Block#60
        else: Block#61

Block#59
    Parent: Block#57
    Stmt_Jump
        target: Block#62

Block#60
    Parent: Block#58
    Expr_FuncCall
        name: LITERAL('wp_get_mime_types')
        result: Var#232
    Iterator_Reset
        var: Var#232
    Stmt_Jump
        target: Block#63

Block#61
    Parent: Block#58
    Stmt_Jump
        target: Block#64

Block#62
    Parent: Block#64
    Parent: Block#59
    Var#233<$wpdb> = Phi(Var#234<$wpdb>, Var#208<$wpdb>)
    Var#235<$post_ID> = Phi(Var#236<$post_ID>, Var#209<$post_ID>)
    Var#237<$type> = Phi(Var#238<$type>, Var#213<$type>)
    Var#239<$allowed_types> = Phi(Var#240<$allowed_types>, Var#216<$allowed_types>)
    Var#241<$url> = Phi(Var#242<$url>, Var#218<$url>)
    Var#243<$len> = Phi(Var#244<$len>, Var#211<$len>)
    Var#245<$mime> = Phi(Var#246<$mime>, Var#212<$mime>)
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#237<$type>
        args[1]: LITERAL('/')
        result: Var#247
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#237<$type>
        args[1]: LITERAL(0)
        args[2]: Var#247
        result: Var#248
    Expr_FuncCall
        name: LITERAL('in_array')
        args[0]: Var#248
        args[1]: Var#239<$allowed_types>
        result: Var#249
    Stmt_JumpIf
        cond: Var#249
        if: Block#65
        else: Block#66

Block#63
    Parent: Block#60
    Parent: Block#74
    Var#250<$wpdb> = Phi(Var#208<$wpdb>, Var#251<$wpdb>)
    Var#252<$post_ID> = Phi(Var#209<$post_ID>, Var#253<$post_ID>)
    Var#254<$extension> = Phi(Var#228<$extension>, Var#255<$extension>)
    Var#256<$type> = Phi(Var#213<$type>, Var#257<$type>)
    Var#258<$allowed_types> = Phi(Var#216<$allowed_types>, Var#259<$allowed_types>)
    Var#260<$url> = Phi(Var#218<$url>, Var#261<$url>)
    Var#262<$len> = Phi(Var#211<$len>, Var#263<$len>)
    Var#264<$mime> = Phi(Var#212<$mime>, Var#265<$mime>)
    Iterator_Valid
        var: Var#232
        result: Var#266
    Stmt_JumpIf
        cond: Var#266
        if: Block#67
        else: Block#68

Block#64
    Parent: Block#72
    Parent: Block#61
    Var#234<$wpdb> = Phi(Var#267<$wpdb>, Var#208<$wpdb>)
    Var#236<$post_ID> = Phi(Var#268<$post_ID>, Var#209<$post_ID>)
    Var#238<$type> = Phi(Var#269<$type>, Var#213<$type>)
    Var#240<$allowed_types> = Phi(Var#270<$allowed_types>, Var#216<$allowed_types>)
    Var#242<$url> = Phi(Var#271<$url>, Var#218<$url>)
    Var#244<$len> = Phi(Var#272<$len>, Var#211<$len>)
    Var#246<$mime> = Phi(Var#273<$mime>, Var#212<$mime>)
    Stmt_Jump
        target: Block#62

Block#65
    Parent: Block#62
    Var#274<$post_ID> = Phi(Var#235<$post_ID>)
    Var#275<$url> = Phi(Var#241<$url>)
    Var#276<$len> = Phi(Var#243<$len>)
    Var#277<$mime> = Phi(Var#245<$mime>)
    Expr_ConcatList
        list[0]: Var#275<$url>
        list[1]: LITERAL('
        ')
        list[2]: Var#276<$len>
        list[3]: LITERAL('
        ')
        list[4]: Var#277<$mime>
        list[5]: LITERAL('
        ')
        result: Var#278
    Expr_FuncCall
        name: LITERAL('add_post_meta')
        args[0]: Var#274<$post_ID>
        args[1]: LITERAL('enclosure')
        args[2]: Var#278
        result: Var#279
    Stmt_Jump
        target: Block#69

Block#66
    Parent: Block#62
    Stmt_Jump
        target: Block#69

Block#67
    Parent: Block#63
    Var#280<$extension> = Phi(Var#254<$extension>)
    Iterator_Key
        var: Var#232
        result: Var#281
    Expr_Assign
        var: Var#282<$exts>
        expr: Var#281
        result: Var#283
    Iterator_Value
        var: Var#232
        result: Var#284
    Expr_Assign
        var: Var#285<$mime>
        expr: Var#284
        result: Var#286
    Expr_BinaryOp_Concat
        left: LITERAL('!^(')
        right: Var#282<$exts>
        result: Var#287
    Expr_BinaryOp_Concat
        left: Var#287
        right: LITERAL(')$!i')
        result: Var#288
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: Var#288
        args[1]: Var#280<$extension>
        result: Var#289
    Stmt_JumpIf
        cond: Var#289
        if: Block#70
        else: Block#71

Block#68
    Parent: Block#63
    Stmt_Jump
        target: Block#72

Block#69
    Parent: Block#65
    Parent: Block#66
    Var#179<$wpdb> = Phi(Var#233<$wpdb>)
    Var#180<$post_ID> = Phi(Var#274<$post_ID>, Var#235<$post_ID>)
    Var#181<$mime> = Phi(Var#277<$mime>, Var#245<$mime>)
    Stmt_Jump
        target: Block#46

Block#70
    Parent: Block#67
    Var#290<$mime> = Phi(Var#285<$mime>)
    Expr_Assign
        var: Var#291<$type>
        expr: Var#290<$mime>
        result: Var#292
    Stmt_Jump
        target: Block#72

Block#71
    Parent: Block#67
    Stmt_Jump
        target: Block#73

Block#72
    Parent: Block#68
    Parent: Block#70
    Var#267<$wpdb> = Phi(Var#250<$wpdb>)
    Var#268<$post_ID> = Phi(Var#252<$post_ID>)
    Var#269<$type> = Phi(Var#256<$type>, Var#291<$type>)
    Var#270<$allowed_types> = Phi(Var#258<$allowed_types>)
    Var#271<$url> = Phi(Var#260<$url>)
    Var#272<$len> = Phi(Var#262<$len>)
    Var#273<$mime> = Phi(Var#264<$mime>, Var#290<$mime>)
    Stmt_Jump
        target: Block#64

Block#73
    Parent: Block#71
    Var#251<$wpdb> = Phi(Var#250<$wpdb>)
    Var#253<$post_ID> = Phi(Var#252<$post_ID>)
    Var#255<$extension> = Phi(Var#280<$extension>)
    Var#257<$type> = Phi(Var#256<$type>)
    Var#259<$allowed_types> = Phi(Var#258<$allowed_types>)
    Var#261<$url> = Phi(Var#260<$url>)
    Var#263<$len> = Phi(Var#262<$len>)
    Var#265<$mime> = Phi(Var#285<$mime>)
    Stmt_Jump
        target: Block#74

Block#74
    Parent: Block#73
    Stmt_Jump
        target: Block#63

Function wp_get_http_headers():
Block#1
    Expr_Param
        name: LITERAL('url')
        result: Var#1<$url>
    Expr_Param
        name: LITERAL('deprecated')
        defaultVar: Var#2
        result: Var#3<$deprecated>
        defaultBlock: Block#2
    Expr_Empty
        expr: Var#3<$deprecated>
        result: Var#4
    Expr_BooleanNot
        expr: Var#4
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#2

Block#3
    Parent: Block#1
    Expr_FuncCall
        name: LITERAL('_deprecated_argument')
        args[0]: LITERAL('wp_get_http_headers')
        args[1]: LITERAL('2.7.0')
        result: Var#6
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Var#7<$url> = Phi(Var#1<$url>)
    Expr_FuncCall
        name: LITERAL('wp_safe_remote_head')
        args[0]: Var#7<$url>
        result: Var#8
    Expr_Assign
        var: Var#9<$response>
        expr: Var#8
        result: Var#10
    Expr_FuncCall
        name: LITERAL('is_wp_error')
        args[0]: Var#9<$response>
        result: Var#11
    Stmt_JumpIf
        cond: Var#11
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#12
    Terminal_Return
        expr: Var#12

Block#7
    Parent: Block#5
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#7
    Var#13<$response> = Phi(Var#9<$response>)
    Expr_FuncCall
        name: LITERAL('wp_remote_retrieve_headers')
        args[0]: Var#13<$response>
        result: Var#14
    Terminal_Return
        expr: Var#14

Function is_new_day():
Block#1
    Var#1<$currentday> = Phi()
    Var#2<$previousday> = Phi()
    Terminal_GlobalVar
        var: LITERAL('currentday')
    Terminal_GlobalVar
        var: LITERAL('previousday')
    Expr_BinaryOp_NotEqual
        left: Var#1<$currentday>
        right: Var#2<$previousday>
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Terminal_Return
        expr: LITERAL(1)

Block#3
    Parent: Block#1
    Terminal_Return
        expr: LITERAL(0)

Function build_query():
Block#1
    Expr_Param
        name: LITERAL('data')
        result: Var#1<$data>
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#2
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#3
    Expr_FuncCall
        name: LITERAL('_http_build_query')
        args[0]: Var#1<$data>
        args[1]: Var#2
        args[2]: LITERAL('&')
        args[3]: LITERAL('')
        args[4]: Var#3
        result: Var#4
    Terminal_Return
        expr: Var#4

Function _http_build_query():
Block#1
    Expr_Param
        name: LITERAL('data')
        result: Var#1<$data>
    Expr_Param
        name: LITERAL('prefix')
        defaultVar: Var#2
        result: Var#3<$prefix>
        defaultBlock: Block#2
    Expr_Param
        name: LITERAL('sep')
        defaultVar: Var#4
        result: Var#5<$sep>
        defaultBlock: Block#3
    Expr_Param
        name: LITERAL('key')
        defaultVar: LITERAL('')
        result: Var#6<$key>
        defaultBlock: Block#4
    Expr_Param
        name: LITERAL('urlencode')
        defaultVar: Var#7
        result: Var#8<$urlencode>
        defaultBlock: Block#5
    Expr_Array
        result: Var#9
    Expr_Assign
        var: Var#10<$ret>
        expr: Var#9
        result: Var#11
    Expr_Cast_Array
        expr: Var#1<$data>
        result: Var#12
    Iterator_Reset
        var: Var#12
    Stmt_Jump
        target: Block#6

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#2

Block#3
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#4

Block#4

Block#5
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#7

Block#6
    Parent: Block#1
    Parent: Block#26
    Var#13<$urlencode> = Phi(Var#8<$urlencode>, Var#14<$urlencode>)
    Var#15<$prefix> = Phi(Var#3<$prefix>, Var#16<$prefix>)
    Var#17<$key> = Phi(Var#6<$key>, Var#18<$key>)
    Var#19<$ret> = Phi(Var#10<$ret>, Var#20<$ret>)
    Var#21<$sep> = Phi(Var#5<$sep>, Var#22<$sep>)
    Iterator_Valid
        var: Var#12
        result: Var#23
    Stmt_JumpIf
        cond: Var#23
        if: Block#7
        else: Block#8

Block#7
    Parent: Block#6
    Var#24<$urlencode> = Phi(Var#13<$urlencode>)
    Iterator_Key
        var: Var#12
        result: Var#25
    Expr_Assign
        var: Var#26<$k>
        expr: Var#25
        result: Var#27
    Iterator_Value
        var: Var#12
        result: Var#28
    Expr_Assign
        var: Var#29<$v>
        expr: Var#28
        result: Var#30
    Stmt_JumpIf
        cond: Var#24<$urlencode>
        if: Block#9
        else: Block#10

Block#8
    Parent: Block#6
    Stmt_Jump
        target: Block#11

Block#9
    Parent: Block#7
    Var#31<$k> = Phi(Var#26<$k>)
    Expr_FuncCall
        name: LITERAL('urlencode')
        args[0]: Var#31<$k>
        result: Var#32
    Expr_Assign
        var: Var#33<$k>
        expr: Var#32
        result: Var#34
    Stmt_Jump
        target: Block#12

Block#10
    Parent: Block#7
    Stmt_Jump
        target: Block#12

Block#11
    Parent: Block#8
    Var#35<$sep> = Phi(Var#21<$sep>)
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#36
    Expr_BinaryOp_Identical
        left: Var#36
        right: Var#35<$sep>
        result: Var#37
    Stmt_JumpIf
        cond: Var#37
        if: Block#13
        else: Block#14

Block#12
    Parent: Block#9
    Parent: Block#10
    Var#38<$urlencode> = Phi(Var#24<$urlencode>)
    Var#39<$k> = Phi(Var#33<$k>, Var#26<$k>)
    Var#40<$prefix> = Phi(Var#15<$prefix>)
    Var#41<$key> = Phi(Var#17<$key>)
    Var#42<$v> = Phi(Var#29<$v>)
    Var#43<$ret> = Phi(Var#19<$ret>)
    Var#44<$sep> = Phi(Var#21<$sep>)
    Expr_FuncCall
        name: LITERAL('is_int')
        args[0]: Var#39<$k>
        result: Var#45
    Stmt_JumpIf
        cond: Var#45
        if: Block#15
        else: Block#16

Block#13
    Parent: Block#11
    Expr_FuncCall
        name: LITERAL('ini_get')
        args[0]: LITERAL('arg_separator.output')
        result: Var#46
    Expr_Assign
        var: Var#47<$sep>
        expr: Var#46
        result: Var#48
    Stmt_Jump
        target: Block#17

Block#14
    Parent: Block#11
    Stmt_Jump
        target: Block#17

Block#15
    Parent: Block#12
    Var#49<$prefix> = Phi(Var#40<$prefix>)
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#50
    Expr_BinaryOp_NotEqual
        left: Var#49<$prefix>
        right: Var#50
        result: Var#51
    Expr_Cast_Bool
        expr: Var#51
        result: Var#52
    Stmt_Jump
        target: Block#16

Block#16
    Parent: Block#12
    Parent: Block#15
    Var#53 = Phi(LITERAL(false), Var#52)
    Var#54<$urlencode> = Phi(Var#38<$urlencode>)
    Var#55<$prefix> = Phi(Var#40<$prefix>, Var#49<$prefix>)
    Var#56<$k> = Phi(Var#39<$k>)
    Var#57<$key> = Phi(Var#41<$key>)
    Var#58<$v> = Phi(Var#42<$v>)
    Var#59<$ret> = Phi(Var#43<$ret>)
    Var#60<$sep> = Phi(Var#44<$sep>)
    Stmt_JumpIf
        cond: Var#53
        if: Block#18
        else: Block#19

Block#17
    Parent: Block#13
    Parent: Block#14
    Var#61<$sep> = Phi(Var#47<$sep>, Var#35<$sep>)
    Var#62<$ret> = Phi(Var#19<$ret>)
    Expr_FuncCall
        name: LITERAL('implode')
        args[0]: Var#61<$sep>
        args[1]: Var#62<$ret>
        result: Var#63
    Terminal_Return
        expr: Var#63

Block#18
    Parent: Block#16
    Var#64<$k> = Phi(Var#56<$k>)
    Var#65<$prefix> = Phi(Var#55<$prefix>)
    Expr_Assertion<type(LITERAL('int'))>
        expr: Var#64<$k>
        result: Var#66<$k>
    Expr_BinaryOp_Concat
        left: Var#65<$prefix>
        right: Var#66<$k>
        result: Var#67
    Expr_Assign
        var: Var#68<$k>
        expr: Var#67
        result: Var#69
    Stmt_Jump
        target: Block#20

Block#19
    Parent: Block#16
    Var#70<$k> = Phi(Var#56<$k>)
    Expr_Assertion<not(type(LITERAL('int')))>
        expr: Var#70<$k>
        result: Var#71<$k>
    Stmt_Jump
        target: Block#20

Block#20
    Parent: Block#18
    Parent: Block#19
    Var#72<$urlencode> = Phi(Var#54<$urlencode>)
    Var#73<$prefix> = Phi(Var#65<$prefix>, Var#55<$prefix>)
    Var#74<$key> = Phi(Var#57<$key>)
    Var#75<$k> = Phi(Var#68<$k>, Var#71<$k>)
    Var#76<$v> = Phi(Var#58<$v>)
    Var#77<$ret> = Phi(Var#59<$ret>)
    Var#78<$sep> = Phi(Var#60<$sep>)
    Expr_Empty
        expr: Var#74<$key>
        result: Var#79
    Expr_BooleanNot
        expr: Var#79
        result: Var#80
    Stmt_JumpIf
        cond: Var#80
        if: Block#21
        else: Block#22

Block#21
    Parent: Block#20
    Var#81<$key> = Phi(Var#74<$key>)
    Var#82<$k> = Phi(Var#75<$k>)
    Expr_BinaryOp_Concat
        left: Var#81<$key>
        right: LITERAL('%5B')
        result: Var#83
    Expr_BinaryOp_Concat
        left: Var#83
        right: Var#82<$k>
        result: Var#84
    Expr_BinaryOp_Concat
        left: Var#84
        right: LITERAL('%5D')
        result: Var#85
    Expr_Assign
        var: Var#86<$k>
        expr: Var#85
        result: Var#87
    Stmt_Jump
        target: Block#23

Block#22
    Parent: Block#20
    Stmt_Jump
        target: Block#23

Block#23
    Parent: Block#21
    Parent: Block#22
    Var#88<$urlencode> = Phi(Var#72<$urlencode>)
    Var#89<$prefix> = Phi(Var#73<$prefix>)
    Var#90<$key> = Phi(Var#81<$key>, Var#74<$key>)
    Var#91<$v> = Phi(Var#76<$v>)
    Var#92<$ret> = Phi(Var#77<$ret>)
    Var#93<$sep> = Phi(Var#78<$sep>)
    Var#94<$k> = Phi(Var#86<$k>, Var#75<$k>)
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#95
    Expr_BinaryOp_Identical
        left: Var#91<$v>
        right: Var#95
        result: Var#96
    Stmt_JumpIf
        cond: Var#96
        if: Block#24
        else: Block#25

Block#24
    Parent: Block#23
    Stmt_Jump
        target: Block#26

Block#25
    Parent: Block#23
    Var#97<$v> = Phi(Var#91<$v>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#98
    Expr_BinaryOp_Identical
        left: Var#97<$v>
        right: Var#98
        result: Var#99
    Stmt_JumpIf
        cond: Var#99
        if: Block#27
        else: Block#28

Block#26
    Parent: Block#34
    Parent: Block#24
    Var#14<$urlencode> = Phi(Var#100<$urlencode>, Var#88<$urlencode>)
    Var#16<$prefix> = Phi(Var#101<$prefix>, Var#89<$prefix>)
    Var#18<$key> = Phi(Var#102<$key>, Var#90<$key>)
    Var#20<$ret> = Phi(Var#103<$ret>, Var#92<$ret>)
    Var#22<$sep> = Phi(Var#104<$sep>, Var#93<$sep>)
    Stmt_Jump
        target: Block#6

Block#27
    Parent: Block#25
    Expr_Assign
        var: Var#105<$v>
        expr: LITERAL('0')
        result: Var#106
    Stmt_Jump
        target: Block#29

Block#28
    Parent: Block#25
    Stmt_Jump
        target: Block#29

Block#29
    Parent: Block#27
    Parent: Block#28
    Var#107<$prefix> = Phi(Var#89<$prefix>)
    Var#108<$key> = Phi(Var#90<$key>)
    Var#109<$v> = Phi(Var#105<$v>, Var#97<$v>)
    Var#110<$ret> = Phi(Var#92<$ret>)
    Var#111<$sep> = Phi(Var#93<$sep>)
    Var#112<$k> = Phi(Var#94<$k>)
    Var#113<$urlencode> = Phi(Var#88<$urlencode>)
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#109<$v>
        result: Var#114
    Stmt_JumpIf
        cond: Var#114
        if: Block#30
        else: Block#31

Block#30
    Parent: Block#29
    Parent: Block#31
    Var#115 = Phi(LITERAL(true), Var#116)
    Var#117<$prefix> = Phi(Var#107<$prefix>)
    Var#118<$key> = Phi(Var#108<$key>)
    Var#119<$v> = Phi(Var#109<$v>, Var#120<$v>)
    Var#121<$ret> = Phi(Var#110<$ret>)
    Var#122<$sep> = Phi(Var#111<$sep>)
    Var#123<$k> = Phi(Var#112<$k>)
    Var#124<$urlencode> = Phi(Var#113<$urlencode>)
    Stmt_JumpIf
        cond: Var#115
        if: Block#32
        else: Block#33

Block#31
    Parent: Block#29
    Var#120<$v> = Phi(Var#109<$v>)
    Expr_FuncCall
        name: LITERAL('is_object')
        args[0]: Var#120<$v>
        result: Var#125
    Expr_Cast_Bool
        expr: Var#125
        result: Var#116
    Stmt_Jump
        target: Block#30

Block#32
    Parent: Block#30
    Var#126<$v> = Phi(Var#119<$v>)
    Var#127<$ret> = Phi(Var#121<$ret>)
    Var#128<$sep> = Phi(Var#122<$sep>)
    Var#129<$k> = Phi(Var#123<$k>)
    Var#130<$urlencode> = Phi(Var#124<$urlencode>)
    Expr_Assertion<(type(LITERAL('array'))|type(LITERAL('object')))>
        expr: Var#126<$v>
        result: Var#131<$v>
    Expr_FuncCall
        name: LITERAL('_http_build_query')
        args[0]: Var#131<$v>
        args[1]: LITERAL('')
        args[2]: Var#128<$sep>
        args[3]: Var#129<$k>
        args[4]: Var#130<$urlencode>
        result: Var#132
    Expr_FuncCall
        name: LITERAL('array_push')
        args[0]: Var#127<$ret>
        args[1]: Var#132
        result: Var#133
    Stmt_Jump
        target: Block#34

Block#33
    Parent: Block#30
    Var#134<$v> = Phi(Var#119<$v>)
    Var#135<$urlencode> = Phi(Var#124<$urlencode>)
    Expr_Assertion<not((type(LITERAL('array'))|type(LITERAL('object'))))>
        expr: Var#134<$v>
        result: Var#136<$v>
    Stmt_JumpIf
        cond: Var#135<$urlencode>
        if: Block#35
        else: Block#36

Block#34
    Parent: Block#32
    Parent: Block#35
    Parent: Block#36
    Var#100<$urlencode> = Phi(Var#130<$urlencode>, Var#135<$urlencode>)
    Var#101<$prefix> = Phi(Var#117<$prefix>)
    Var#102<$key> = Phi(Var#118<$key>)
    Var#103<$ret> = Phi(Var#127<$ret>, Var#137<$ret>, Var#138<$ret>)
    Var#104<$sep> = Phi(Var#128<$sep>, Var#122<$sep>)
    Stmt_Jump
        target: Block#26

Block#35
    Parent: Block#33
    Var#137<$ret> = Phi(Var#121<$ret>)
    Var#139<$k> = Phi(Var#123<$k>)
    Var#140<$v> = Phi(Var#136<$v>)
    Expr_BinaryOp_Concat
        left: Var#139<$k>
        right: LITERAL('=')
        result: Var#141
    Expr_FuncCall
        name: LITERAL('urlencode')
        args[0]: Var#140<$v>
        result: Var#142
    Expr_BinaryOp_Concat
        left: Var#141
        right: Var#142
        result: Var#143
    Expr_FuncCall
        name: LITERAL('array_push')
        args[0]: Var#137<$ret>
        args[1]: Var#143
        result: Var#144
    Stmt_Jump
        target: Block#34

Block#36
    Parent: Block#33
    Var#138<$ret> = Phi(Var#121<$ret>)
    Var#145<$k> = Phi(Var#123<$k>)
    Var#146<$v> = Phi(Var#136<$v>)
    Expr_BinaryOp_Concat
        left: Var#145<$k>
        right: LITERAL('=')
        result: Var#147
    Expr_BinaryOp_Concat
        left: Var#147
        right: Var#146<$v>
        result: Var#148
    Expr_FuncCall
        name: LITERAL('array_push')
        args[0]: Var#138<$ret>
        args[1]: Var#148
        result: Var#149
    Stmt_Jump
        target: Block#34

Function add_query_arg():
Block#1
    Var#1<$_SERVER> = Phi()
    Var#2<$qs> = Phi()
    Expr_FuncCall
        name: LITERAL('func_get_args')
        result: Var#3
    Expr_Assign
        var: Var#4<$args>
        expr: Var#3
        result: Var#5
    Expr_ArrayDimFetch
        var: Var#4<$args>
        dim: LITERAL(0)
        result: Var#6
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#6
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#8<$args> = Phi(Var#4<$args>)
    Expr_Assertion<type(LITERAL('array'))>
        expr: Var#6
        result: Var#6
    Expr_FuncCall
        name: LITERAL('count')
        args[0]: Var#8<$args>
        result: Var#9
    Expr_BinaryOp_Smaller
        left: Var#9
        right: LITERAL(2)
        result: Var#10
    Stmt_JumpIf
        cond: Var#10
        if: Block#4
        else: Block#5

Block#3
    Parent: Block#1
    Var#11<$args> = Phi(Var#4<$args>)
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#6
        result: Var#6
    Expr_FuncCall
        name: LITERAL('count')
        args[0]: Var#11<$args>
        result: Var#12
    Expr_BinaryOp_Smaller
        left: Var#12
        right: LITERAL(3)
        result: Var#13
    Stmt_JumpIf
        cond: Var#13
        if: Block#6
        else: Block#7

Block#4
    Parent: Block#2
    Parent: Block#5
    Var#14 = Phi(LITERAL(true), Var#15)
    Var#16<$_SERVER> = Phi(Var#1<$_SERVER>)
    Var#17<$args> = Phi(Var#8<$args>, Var#18<$args>)
    Var#19<$qs> = Phi(Var#2<$qs>)
    Stmt_JumpIf
        cond: Var#14
        if: Block#8
        else: Block#9

Block#5
    Parent: Block#2
    Var#18<$args> = Phi(Var#8<$args>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#20
    Expr_ArrayDimFetch
        var: Var#18<$args>
        dim: LITERAL(1)
        result: Var#21
    Expr_BinaryOp_Identical
        left: Var#20
        right: Var#21
        result: Var#22
    Expr_Cast_Bool
        expr: Var#22
        result: Var#15
    Stmt_Jump
        target: Block#4

Block#6
    Parent: Block#3
    Parent: Block#7
    Var#23 = Phi(LITERAL(true), Var#24)
    Var#25<$_SERVER> = Phi(Var#1<$_SERVER>)
    Var#26<$args> = Phi(Var#11<$args>, Var#27<$args>)
    Var#28<$qs> = Phi(Var#2<$qs>)
    Stmt_JumpIf
        cond: Var#23
        if: Block#10
        else: Block#11

Block#7
    Parent: Block#3
    Var#27<$args> = Phi(Var#11<$args>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#29
    Expr_ArrayDimFetch
        var: Var#27<$args>
        dim: LITERAL(2)
        result: Var#30
    Expr_BinaryOp_Identical
        left: Var#29
        right: Var#30
        result: Var#31
    Expr_Cast_Bool
        expr: Var#31
        result: Var#24
    Stmt_Jump
        target: Block#6

Block#8
    Parent: Block#4
    Var#32<$_SERVER> = Phi(Var#16<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#32<$_SERVER>
        dim: LITERAL('REQUEST_URI')
        result: Var#33
    Expr_Assign
        var: Var#34<$uri>
        expr: Var#33
        result: Var#35
    Stmt_Jump
        target: Block#12

Block#9
    Parent: Block#4
    Var#36<$args> = Phi(Var#17<$args>)
    Expr_ArrayDimFetch
        var: Var#36<$args>
        dim: LITERAL(1)
        result: Var#37
    Expr_Assign
        var: Var#38<$uri>
        expr: Var#37
        result: Var#39
    Stmt_Jump
        target: Block#12

Block#10
    Parent: Block#6
    Var#40<$_SERVER> = Phi(Var#25<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#40<$_SERVER>
        dim: LITERAL('REQUEST_URI')
        result: Var#41
    Expr_Assign
        var: Var#42<$uri>
        expr: Var#41
        result: Var#43
    Stmt_Jump
        target: Block#13

Block#11
    Parent: Block#6
    Var#44<$args> = Phi(Var#26<$args>)
    Expr_ArrayDimFetch
        var: Var#44<$args>
        dim: LITERAL(2)
        result: Var#45
    Expr_Assign
        var: Var#46<$uri>
        expr: Var#45
        result: Var#47
    Stmt_Jump
        target: Block#13

Block#12
    Parent: Block#8
    Parent: Block#9
    Var#48<$uri> = Phi(Var#34<$uri>, Var#38<$uri>)
    Var#49<$qs> = Phi(Var#19<$qs>)
    Var#50<$args> = Phi(Var#17<$args>, Var#36<$args>)
    Stmt_Jump
        target: Block#14

Block#13
    Parent: Block#10
    Parent: Block#11
    Var#51<$uri> = Phi(Var#42<$uri>, Var#46<$uri>)
    Var#52<$qs> = Phi(Var#28<$qs>)
    Var#53<$args> = Phi(Var#26<$args>, Var#44<$args>)
    Stmt_Jump
        target: Block#14

Block#14
    Parent: Block#12
    Parent: Block#13
    Var#54<$uri> = Phi(Var#48<$uri>, Var#51<$uri>)
    Var#55<$qs> = Phi(Var#49<$qs>, Var#52<$qs>)
    Var#56<$args> = Phi(Var#50<$args>, Var#53<$args>)
    Expr_FuncCall
        name: LITERAL('strstr')
        args[0]: Var#54<$uri>
        args[1]: LITERAL('#')
        result: Var#57
    Expr_Assign
        var: Var#58<$frag>
        expr: Var#57
        result: Var#59
    Stmt_JumpIf
        cond: Var#59
        if: Block#15
        else: Block#16

Block#15
    Parent: Block#14
    Var#60<$uri> = Phi(Var#54<$uri>)
    Var#61<$frag> = Phi(Var#58<$frag>)
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#61<$frag>
        result: Var#62
    Expr_UnaryMinus
        expr: Var#62
        result: Var#63
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#60<$uri>
        args[1]: LITERAL(0)
        args[2]: Var#63
        result: Var#64
    Expr_Assign
        var: Var#65<$uri>
        expr: Var#64
        result: Var#66
    Stmt_Jump
        target: Block#17

Block#16
    Parent: Block#14
    Expr_Assign
        var: Var#67<$frag>
        expr: LITERAL('')
        result: Var#68
    Stmt_Jump
        target: Block#17

Block#17
    Parent: Block#15
    Parent: Block#16
    Var#69<$uri> = Phi(Var#65<$uri>, Var#54<$uri>)
    Var#70<$qs> = Phi(Var#55<$qs>)
    Var#71<$args> = Phi(Var#56<$args>)
    Var#72<$frag> = Phi(Var#61<$frag>, Var#67<$frag>)
    Expr_FuncCall
        name: LITERAL('stripos')
        args[0]: Var#69<$uri>
        args[1]: LITERAL('http://')
        result: Var#73
    Expr_BinaryOp_Identical
        left: LITERAL(0)
        right: Var#73
        result: Var#74
    Stmt_JumpIf
        cond: Var#74
        if: Block#18
        else: Block#19

Block#18
    Parent: Block#17
    Var#75<$uri> = Phi(Var#69<$uri>)
    Expr_Assign
        var: Var#76<$protocol>
        expr: LITERAL('http://')
        result: Var#77
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#75<$uri>
        args[1]: LITERAL(7)
        result: Var#78
    Expr_Assign
        var: Var#79<$uri>
        expr: Var#78
        result: Var#80
    Stmt_Jump
        target: Block#20

Block#19
    Parent: Block#17
    Var#81<$uri> = Phi(Var#69<$uri>)
    Expr_FuncCall
        name: LITERAL('stripos')
        args[0]: Var#81<$uri>
        args[1]: LITERAL('https://')
        result: Var#82
    Expr_BinaryOp_Identical
        left: LITERAL(0)
        right: Var#82
        result: Var#83
    Stmt_JumpIf
        cond: Var#83
        if: Block#21
        else: Block#22

Block#20
    Parent: Block#18
    Parent: Block#21
    Parent: Block#22
    Var#84<$uri> = Phi(Var#79<$uri>, Var#85<$uri>, Var#81<$uri>)
    Var#86<$protocol> = Phi(Var#76<$protocol>, Var#87<$protocol>, Var#88<$protocol>)
    Var#89<$qs> = Phi(Var#70<$qs>)
    Var#90<$args> = Phi(Var#71<$args>)
    Var#91<$frag> = Phi(Var#72<$frag>)
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#84<$uri>
        args[1]: LITERAL('?')
        result: Var#92
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#93
    Expr_BinaryOp_NotIdentical
        left: Var#92
        right: Var#93
        result: Var#94
    Stmt_JumpIf
        cond: Var#94
        if: Block#23
        else: Block#24

Block#21
    Parent: Block#19
    Var#95<$uri> = Phi(Var#81<$uri>)
    Expr_Assign
        var: Var#87<$protocol>
        expr: LITERAL('https://')
        result: Var#96
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#95<$uri>
        args[1]: LITERAL(8)
        result: Var#97
    Expr_Assign
        var: Var#85<$uri>
        expr: Var#97
        result: Var#98
    Stmt_Jump
        target: Block#20

Block#22
    Parent: Block#19
    Expr_Assign
        var: Var#88<$protocol>
        expr: LITERAL('')
        result: Var#99
    Stmt_Jump
        target: Block#20

Block#23
    Parent: Block#20
    Var#100<$uri> = Phi(Var#84<$uri>)
    Expr_FuncCall
        name: LITERAL('explode')
        args[0]: LITERAL('?')
        args[1]: Var#100<$uri>
        args[2]: LITERAL(2)
        result: Var#101
    Expr_ArrayDimFetch
        var: Var#101
        dim: LITERAL(0)
        result: Var#102
    Expr_Assign
        var: Var#103<$base>
        expr: Var#102
        result: Var#104
    Expr_ArrayDimFetch
        var: Var#101
        dim: LITERAL(1)
        result: Var#105
    Expr_Assign
        var: Var#106<$query>
        expr: Var#105
        result: Var#107
    Expr_BinaryOp_Concat
        left: Var#103<$base>
        right: LITERAL('?')
        result: Var#108
    Expr_Assign
        var: Var#109<$base>
        expr: Var#108
        result: Var#110
    Stmt_Jump
        target: Block#25

Block#24
    Parent: Block#20
    Var#111<$protocol> = Phi(Var#86<$protocol>)
    Stmt_JumpIf
        cond: Var#111<$protocol>
        if: Block#26
        else: Block#27

Block#25
    Parent: Block#23
    Parent: Block#30
    Parent: Block#31
    Var#112<$query> = Phi(Var#106<$query>, Var#113<$query>, Var#114<$query>)
    Var#115<$qs> = Phi(Var#89<$qs>, Var#116<$qs>)
    Var#117<$args> = Phi(Var#90<$args>, Var#118<$args>)
    Var#119<$protocol> = Phi(Var#86<$protocol>, Var#120<$protocol>)
    Var#121<$base> = Phi(Var#109<$base>, Var#122<$base>, Var#123<$base>)
    Var#124<$frag> = Phi(Var#91<$frag>, Var#125<$frag>)
    Expr_FuncCall
        name: LITERAL('wp_parse_str')
        args[0]: Var#112<$query>
        args[1]: Var#115<$qs>
        result: Var#126
    Expr_FuncCall
        name: LITERAL('urlencode_deep')
        args[0]: Var#115<$qs>
        result: Var#127
    Expr_Assign
        var: Var#128<$qs>
        expr: Var#127
        result: Var#129
    Expr_ArrayDimFetch
        var: Var#117<$args>
        dim: LITERAL(0)
        result: Var#130
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#130
        result: Var#131
    Stmt_JumpIf
        cond: Var#131
        if: Block#28
        else: Block#29

Block#26
    Parent: Block#24
    Parent: Block#27
    Var#132 = Phi(LITERAL(true), Var#133)
    Var#134<$uri> = Phi(Var#84<$uri>, Var#135<$uri>)
    Var#116<$qs> = Phi(Var#89<$qs>)
    Var#118<$args> = Phi(Var#90<$args>)
    Var#120<$protocol> = Phi(Var#111<$protocol>)
    Var#125<$frag> = Phi(Var#91<$frag>)
    Stmt_JumpIf
        cond: Var#132
        if: Block#30
        else: Block#31

Block#27
    Parent: Block#24
    Var#135<$uri> = Phi(Var#84<$uri>)
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#135<$uri>
        args[1]: LITERAL('=')
        result: Var#136
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#137
    Expr_BinaryOp_Identical
        left: Var#136
        right: Var#137
        result: Var#138
    Expr_Cast_Bool
        expr: Var#138
        result: Var#133
    Stmt_Jump
        target: Block#26

Block#28
    Parent: Block#25
    Var#139<$args> = Phi(Var#117<$args>)
    Expr_Assertion<type(LITERAL('array'))>
        expr: Var#130
        result: Var#130
    Expr_ArrayDimFetch
        var: Var#139<$args>
        dim: LITERAL(0)
        result: Var#140
    Iterator_Reset
        var: Var#140
    Stmt_Jump
        target: Block#32

Block#29
    Parent: Block#25
    Var#141<$args> = Phi(Var#117<$args>)
    Var#142<$qs> = Phi(Var#128<$qs>)
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#130
        result: Var#130
    Expr_ArrayDimFetch
        var: Var#141<$args>
        dim: LITERAL(1)
        result: Var#143
    Expr_ArrayDimFetch
        var: Var#141<$args>
        dim: LITERAL(0)
        result: Var#144
    Expr_ArrayDimFetch
        var: Var#142<$qs>
        dim: Var#144
        result: Var#145
    Expr_Assign
        var: Var#145
        expr: Var#143
        result: Var#146
    Stmt_Jump
        target: Block#33

Block#30
    Parent: Block#26
    Var#147<$uri> = Phi(Var#134<$uri>)
    Expr_BinaryOp_Concat
        left: Var#147<$uri>
        right: LITERAL('?')
        result: Var#148
    Expr_Assign
        var: Var#122<$base>
        expr: Var#148
        result: Var#149
    Expr_Assign
        var: Var#113<$query>
        expr: LITERAL('')
        result: Var#150
    Stmt_Jump
        target: Block#25

Block#31
    Parent: Block#26
    Var#151<$uri> = Phi(Var#134<$uri>)
    Expr_Assign
        var: Var#123<$base>
        expr: LITERAL('')
        result: Var#152
    Expr_Assign
        var: Var#114<$query>
        expr: Var#151<$uri>
        result: Var#153
    Stmt_Jump
        target: Block#25

Block#32
    Parent: Block#28
    Parent: Block#37
    Var#154<$qs> = Phi(Var#128<$qs>, Var#155<$qs>)
    Var#156<$protocol> = Phi(Var#119<$protocol>)
    Var#157<$base> = Phi(Var#121<$base>)
    Var#158<$frag> = Phi(Var#124<$frag>)
    Iterator_Valid
        var: Var#140
        result: Var#159
    Stmt_JumpIf
        cond: Var#159
        if: Block#34
        else: Block#35

Block#33
    Parent: Block#38
    Parent: Block#29
    Var#160<$qs> = Phi(Var#154<$qs>, Var#142<$qs>)
    Var#161<$protocol> = Phi(Var#156<$protocol>, Var#119<$protocol>)
    Var#162<$base> = Phi(Var#157<$base>, Var#121<$base>)
    Var#163<$frag> = Phi(Var#158<$frag>, Var#124<$frag>)
    Iterator_Reset
        var: Var#160<$qs>
    Stmt_Jump
        target: Block#36

Block#34
    Parent: Block#32
    Var#155<$qs> = Phi(Var#154<$qs>)
    Iterator_Key
        var: Var#140
        result: Var#164
    Expr_Assign
        var: Var#165<$k>
        expr: Var#164
        result: Var#166
    Iterator_Value
        var: Var#140
        result: Var#167
    Expr_Assign
        var: Var#168<$v>
        expr: Var#167
        result: Var#169
    Expr_ArrayDimFetch
        var: Var#155<$qs>
        dim: Var#165<$k>
        result: Var#170
    Expr_Assign
        var: Var#170
        expr: Var#168<$v>
        result: Var#171
    Stmt_Jump
        target: Block#37

Block#35
    Parent: Block#32
    Stmt_Jump
        target: Block#38

Block#36
    Parent: Block#33
    Parent: Block#45
    Var#172<$qs> = Phi(Var#160<$qs>, Var#173<$qs>)
    Var#174<$protocol> = Phi(Var#161<$protocol>, Var#175<$protocol>)
    Var#176<$base> = Phi(Var#162<$base>, Var#177<$base>)
    Var#178<$frag> = Phi(Var#163<$frag>, Var#179<$frag>)
    Iterator_Valid
        var: Var#160<$qs>
        result: Var#180
    Stmt_JumpIf
        cond: Var#180
        if: Block#39
        else: Block#40

Block#37
    Parent: Block#34
    Stmt_Jump
        target: Block#32

Block#38
    Parent: Block#35
    Stmt_Jump
        target: Block#33

Block#39
    Parent: Block#36
    Iterator_Key
        var: Var#160<$qs>
        result: Var#181
    Expr_Assign
        var: Var#182<$k>
        expr: Var#181
        result: Var#183
    Iterator_Value
        var: Var#160<$qs>
        result: Var#184
    Expr_Assign
        var: Var#185<$v>
        expr: Var#184
        result: Var#186
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#187
    Expr_BinaryOp_Identical
        left: Var#185<$v>
        right: Var#187
        result: Var#188
    Stmt_JumpIf
        cond: Var#188
        if: Block#41
        else: Block#42

Block#40
    Parent: Block#36
    Stmt_Jump
        target: Block#43

Block#41
    Parent: Block#39
    Var#189<$qs> = Phi(Var#172<$qs>)
    Var#190<$k> = Phi(Var#182<$k>)
    Expr_ArrayDimFetch
        var: Var#189<$qs>
        dim: Var#190<$k>
        result: Var#191
    Terminal_Unset
        exprs[0]: Var#191
    Stmt_Jump
        target: Block#44

Block#42
    Parent: Block#39
    Stmt_Jump
        target: Block#44

Block#43
    Parent: Block#40
    Var#192<$qs> = Phi(Var#172<$qs>)
    Var#193<$protocol> = Phi(Var#174<$protocol>)
    Var#194<$base> = Phi(Var#176<$base>)
    Var#195<$frag> = Phi(Var#178<$frag>)
    Expr_FuncCall
        name: LITERAL('build_query')
        args[0]: Var#192<$qs>
        result: Var#196
    Expr_Assign
        var: Var#197<$ret>
        expr: Var#196
        result: Var#198
    Expr_FuncCall
        name: LITERAL('trim')
        args[0]: Var#197<$ret>
        args[1]: LITERAL('?')
        result: Var#199
    Expr_Assign
        var: Var#200<$ret>
        expr: Var#199
        result: Var#201
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('#=(&|$)#')
        args[1]: LITERAL('$1')
        args[2]: Var#200<$ret>
        result: Var#202
    Expr_Assign
        var: Var#203<$ret>
        expr: Var#202
        result: Var#204
    Expr_BinaryOp_Concat
        left: Var#193<$protocol>
        right: Var#194<$base>
        result: Var#205
    Expr_BinaryOp_Concat
        left: Var#205
        right: Var#203<$ret>
        result: Var#206
    Expr_BinaryOp_Concat
        left: Var#206
        right: Var#195<$frag>
        result: Var#207
    Expr_Assign
        var: Var#208<$ret>
        expr: Var#207
        result: Var#209
    Expr_FuncCall
        name: LITERAL('rtrim')
        args[0]: Var#208<$ret>
        args[1]: LITERAL('?')
        result: Var#210
    Expr_Assign
        var: Var#211<$ret>
        expr: Var#210
        result: Var#212
    Terminal_Return
        expr: Var#211<$ret>

Block#44
    Parent: Block#41
    Parent: Block#42
    Var#173<$qs> = Phi(Var#189<$qs>, Var#172<$qs>)
    Var#175<$protocol> = Phi(Var#174<$protocol>)
    Var#177<$base> = Phi(Var#176<$base>)
    Var#179<$frag> = Phi(Var#178<$frag>)
    Stmt_Jump
        target: Block#45

Block#45
    Parent: Block#44
    Stmt_Jump
        target: Block#36

Function remove_query_arg():
Block#1
    Expr_Param
        name: LITERAL('key')
        result: Var#1<$key>
    Expr_Param
        name: LITERAL('query')
        defaultVar: Var#2
        result: Var#3<$query>
        defaultBlock: Block#2
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#1<$key>
        result: Var#4
    Stmt_JumpIf
        cond: Var#4
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#2

Block#3
    Parent: Block#1
    Var#5<$key> = Phi(Var#1<$key>)
    Expr_Assertion<type(LITERAL('array'))>
        expr: Var#5<$key>
        result: Var#6<$key>
    Iterator_Reset
        var: Var#6<$key>
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Var#7<$key> = Phi(Var#1<$key>)
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#7<$key>
        result: Var#8<$key>
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#3
    Parent: Block#9
    Var#9<$query> = Phi(Var#3<$query>, Var#10<$query>)
    Iterator_Valid
        var: Var#6<$key>
        result: Var#11
    Stmt_JumpIf
        cond: Var#11
        if: Block#7
        else: Block#8

Block#6
    Parent: Block#4
    Var#12<$key> = Phi(Var#8<$key>)
    Var#13<$query> = Phi(Var#3<$query>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#14
    Expr_FuncCall
        name: LITERAL('add_query_arg')
        args[0]: Var#12<$key>
        args[1]: Var#14
        args[2]: Var#13<$query>
        result: Var#15
    Terminal_Return
        expr: Var#15

Block#7
    Parent: Block#5
    Var#16<$query> = Phi(Var#9<$query>)
    Iterator_Value
        var: Var#6<$key>
        result: Var#17
    Expr_Assign
        var: Var#18<$k>
        expr: Var#17
        result: Var#19
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#20
    Expr_FuncCall
        name: LITERAL('add_query_arg')
        args[0]: Var#18<$k>
        args[1]: Var#20
        args[2]: Var#16<$query>
        result: Var#21
    Expr_Assign
        var: Var#10<$query>
        expr: Var#21
        result: Var#22
    Stmt_Jump
        target: Block#9

Block#8
    Parent: Block#5
    Stmt_Jump
        target: Block#10

Block#9
    Parent: Block#7
    Stmt_Jump
        target: Block#5

Block#10
    Parent: Block#8
    Var#23<$query> = Phi(Var#9<$query>)
    Terminal_Return
        expr: Var#23<$query>

Function wp_removable_query_args():
Block#1
    Expr_Array
        values[0]: LITERAL('activate')
        values[1]: LITERAL('activated')
        values[2]: LITERAL('approved')
        values[3]: LITERAL('deactivate')
        values[4]: LITERAL('deleted')
        values[5]: LITERAL('disabled')
        values[6]: LITERAL('enabled')
        values[7]: LITERAL('error')
        values[8]: LITERAL('hotkeys_highlight_first')
        values[9]: LITERAL('hotkeys_highlight_last')
        values[10]: LITERAL('locked')
        values[11]: LITERAL('message')
        values[12]: LITERAL('same')
        values[13]: LITERAL('saved')
        values[14]: LITERAL('settings-updated')
        values[15]: LITERAL('skipped')
        values[16]: LITERAL('spammed')
        values[17]: LITERAL('trashed')
        values[18]: LITERAL('unspammed')
        values[19]: LITERAL('untrashed')
        values[20]: LITERAL('update')
        values[21]: LITERAL('updated')
        values[22]: LITERAL('wp-post-new-reload')
        result: Var#1
    Expr_Assign
        var: Var#2<$removable_query_args>
        expr: Var#1
        result: Var#3
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('removable_query_args')
        args[1]: Var#2<$removable_query_args>
        result: Var#4
    Terminal_Return
        expr: Var#4

Function add_magic_quotes():
Block#1
    Expr_Param
        name: LITERAL('array')
        result: Var#1<$array>
    Expr_Cast_Array
        expr: Var#1<$array>
        result: Var#2
    Iterator_Reset
        var: Var#2
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Parent: Block#9
    Var#3<$array> = Phi(Var#1<$array>, Var#4<$array>)
    Iterator_Valid
        var: Var#2
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#3
        else: Block#4

Block#3
    Parent: Block#2
    Iterator_Key
        var: Var#2
        result: Var#6
    Expr_Assign
        var: Var#7<$k>
        expr: Var#6
        result: Var#8
    Iterator_Value
        var: Var#2
        result: Var#9
    Expr_Assign
        var: Var#10<$v>
        expr: Var#9
        result: Var#11
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#10<$v>
        result: Var#12
    Stmt_JumpIf
        cond: Var#12
        if: Block#5
        else: Block#6

Block#4
    Parent: Block#2
    Stmt_Jump
        target: Block#7

Block#5
    Parent: Block#3
    Var#13<$v> = Phi(Var#10<$v>)
    Var#14<$array> = Phi(Var#3<$array>)
    Var#15<$k> = Phi(Var#7<$k>)
    Expr_Assertion<type(LITERAL('array'))>
        expr: Var#13<$v>
        result: Var#16<$v>
    Expr_FuncCall
        name: LITERAL('add_magic_quotes')
        args[0]: Var#16<$v>
        result: Var#17
    Expr_ArrayDimFetch
        var: Var#14<$array>
        dim: Var#15<$k>
        result: Var#18
    Expr_Assign
        var: Var#18
        expr: Var#17
        result: Var#19
    Stmt_Jump
        target: Block#8

Block#6
    Parent: Block#3
    Var#20<$v> = Phi(Var#10<$v>)
    Var#21<$array> = Phi(Var#3<$array>)
    Var#22<$k> = Phi(Var#7<$k>)
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#20<$v>
        result: Var#23<$v>
    Expr_FuncCall
        name: LITERAL('addslashes')
        args[0]: Var#23<$v>
        result: Var#24
    Expr_ArrayDimFetch
        var: Var#21<$array>
        dim: Var#22<$k>
        result: Var#25
    Expr_Assign
        var: Var#25
        expr: Var#24
        result: Var#26
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#4
    Var#27<$array> = Phi(Var#3<$array>)
    Terminal_Return
        expr: Var#27<$array>

Block#8
    Parent: Block#5
    Parent: Block#6
    Var#4<$array> = Phi(Var#14<$array>, Var#21<$array>)
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#8
    Stmt_Jump
        target: Block#2

Function wp_remote_fopen():
Block#1
    Expr_Param
        name: LITERAL('uri')
        result: Var#1<$uri>
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Var#2<$uri> = Phi(Var#1<$uri>)
    Expr_FuncCall
        name: LITERAL('parse_url')
        args[0]: Var#2<$uri>
        result: Var#3
    Stmt_Jump
        target: Block#3

Block#3
    Parent: Block#2
    Expr_Assign
        var: Var#4<$parsed_url>
        expr: Var#3
        result: Var#5
    Expr_BooleanNot
        expr: Var#4<$parsed_url>
        result: Var#6
    Stmt_JumpIf
        cond: Var#6
        if: Block#4
        else: Block#5

Block#4
    Parent: Block#3
    Parent: Block#5
    Var#7 = Phi(LITERAL(true), Var#8)
    Var#9<$parsed_url> = Phi(Var#4<$parsed_url>, Var#10<$parsed_url>)
    Var#11<$uri> = Phi(Var#2<$uri>)
    Stmt_JumpIf
        cond: Var#7
        if: Block#6
        else: Block#7

Block#5
    Parent: Block#3
    Var#10<$parsed_url> = Phi(Var#4<$parsed_url>)
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#10<$parsed_url>
        result: Var#12
    Expr_BooleanNot
        expr: Var#12
        result: Var#13
    Expr_Cast_Bool
        expr: Var#13
        result: Var#8
    Stmt_Jump
        target: Block#4

Block#6
    Parent: Block#4
    Var#14<$parsed_url> = Phi(Var#9<$parsed_url>)
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#14<$parsed_url>
        result: Var#15<$parsed_url>
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#16
    Terminal_Return
        expr: Var#16

Block#7
    Parent: Block#4
    Var#17<$parsed_url> = Phi(Var#9<$parsed_url>)
    Expr_Assertion<not(not(type(LITERAL('array'))))>
        expr: Var#17<$parsed_url>
        result: Var#18<$parsed_url>
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#7
    Var#19<$uri> = Phi(Var#11<$uri>)
    Expr_Array
        result: Var#20
    Expr_Assign
        var: Var#21<$options>
        expr: Var#20
        result: Var#22
    Expr_ArrayDimFetch
        var: Var#21<$options>
        dim: LITERAL('timeout')
        result: Var#23
    Expr_Assign
        var: Var#23
        expr: LITERAL(10)
        result: Var#24
    Expr_FuncCall
        name: LITERAL('wp_safe_remote_get')
        args[0]: Var#19<$uri>
        args[1]: Var#21<$options>
        result: Var#25
    Expr_Assign
        var: Var#26<$response>
        expr: Var#25
        result: Var#27
    Expr_FuncCall
        name: LITERAL('is_wp_error')
        args[0]: Var#26<$response>
        result: Var#28
    Stmt_JumpIf
        cond: Var#28
        if: Block#9
        else: Block#10

Block#9
    Parent: Block#8
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#29
    Terminal_Return
        expr: Var#29

Block#10
    Parent: Block#8
    Stmt_Jump
        target: Block#11

Block#11
    Parent: Block#10
    Var#30<$response> = Phi(Var#26<$response>)
    Expr_FuncCall
        name: LITERAL('wp_remote_retrieve_body')
        args[0]: Var#30<$response>
        result: Var#31
    Terminal_Return
        expr: Var#31

Function wp():
Block#1
    Expr_Param
        name: LITERAL('query_vars')
        defaultVar: LITERAL('')
        result: Var#1<$query_vars>
        defaultBlock: Block#2
    Var#2<$wp> = Phi()
    Var#3<$wp_the_query> = Phi()
    Var#4<$wp_query> = Phi()
    Terminal_GlobalVar
        var: LITERAL('wp')
    Terminal_GlobalVar
        var: LITERAL('wp_query')
    Terminal_GlobalVar
        var: LITERAL('wp_the_query')
    Expr_MethodCall
        var: Var#2<$wp>
        name: LITERAL('main')
        args[0]: Var#1<$query_vars>
        result: Var#5
    Expr_Isset
        vars[0]: Var#3<$wp_the_query>
        result: Var#6
    Expr_BooleanNot
        expr: Var#6
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#3
        else: Block#4

Block#2

Block#3
    Parent: Block#1
    Var#8<$wp_query> = Phi(Var#4<$wp_query>)
    Expr_Assign
        var: Var#9<$wp_the_query>
        expr: Var#8<$wp_query>
        result: Var#10
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Terminal_Return

Function get_status_header_desc():
Block#1
    Expr_Param
        name: LITERAL('code')
        result: Var#1<$code>
    Var#2<$wp_header_to_desc> = Phi()
    Terminal_GlobalVar
        var: LITERAL('wp_header_to_desc')
    Expr_FuncCall
        name: LITERAL('absint')
        args[0]: Var#1<$code>
        result: Var#3
    Expr_Assign
        var: Var#4<$code>
        expr: Var#3
        result: Var#5
    Expr_Isset
        vars[0]: Var#2<$wp_header_to_desc>
        result: Var#6
    Expr_BooleanNot
        expr: Var#6
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_Array
        keys[0]: LITERAL(100)
        keys[1]: LITERAL(101)
        keys[2]: LITERAL(102)
        keys[3]: LITERAL(200)
        keys[4]: LITERAL(201)
        keys[5]: LITERAL(202)
        keys[6]: LITERAL(203)
        keys[7]: LITERAL(204)
        keys[8]: LITERAL(205)
        keys[9]: LITERAL(206)
        keys[10]: LITERAL(207)
        keys[11]: LITERAL(226)
        keys[12]: LITERAL(300)
        keys[13]: LITERAL(301)
        keys[14]: LITERAL(302)
        keys[15]: LITERAL(303)
        keys[16]: LITERAL(304)
        keys[17]: LITERAL(305)
        keys[18]: LITERAL(306)
        keys[19]: LITERAL(307)
        keys[20]: LITERAL(308)
        keys[21]: LITERAL(400)
        keys[22]: LITERAL(401)
        keys[23]: LITERAL(402)
        keys[24]: LITERAL(403)
        keys[25]: LITERAL(404)
        keys[26]: LITERAL(405)
        keys[27]: LITERAL(406)
        keys[28]: LITERAL(407)
        keys[29]: LITERAL(408)
        keys[30]: LITERAL(409)
        keys[31]: LITERAL(410)
        keys[32]: LITERAL(411)
        keys[33]: LITERAL(412)
        keys[34]: LITERAL(413)
        keys[35]: LITERAL(414)
        keys[36]: LITERAL(415)
        keys[37]: LITERAL(416)
        keys[38]: LITERAL(417)
        keys[39]: LITERAL(418)
        keys[40]: LITERAL(421)
        keys[41]: LITERAL(422)
        keys[42]: LITERAL(423)
        keys[43]: LITERAL(424)
        keys[44]: LITERAL(426)
        keys[45]: LITERAL(428)
        keys[46]: LITERAL(429)
        keys[47]: LITERAL(431)
        keys[48]: LITERAL(451)
        keys[49]: LITERAL(500)
        keys[50]: LITERAL(501)
        keys[51]: LITERAL(502)
        keys[52]: LITERAL(503)
        keys[53]: LITERAL(504)
        keys[54]: LITERAL(505)
        keys[55]: LITERAL(506)
        keys[56]: LITERAL(507)
        keys[57]: LITERAL(510)
        keys[58]: LITERAL(511)
        values[0]: LITERAL('Continue')
        values[1]: LITERAL('Switching Protocols')
        values[2]: LITERAL('Processing')
        values[3]: LITERAL('OK')
        values[4]: LITERAL('Created')
        values[5]: LITERAL('Accepted')
        values[6]: LITERAL('Non-Authoritative Information')
        values[7]: LITERAL('No Content')
        values[8]: LITERAL('Reset Content')
        values[9]: LITERAL('Partial Content')
        values[10]: LITERAL('Multi-Status')
        values[11]: LITERAL('IM Used')
        values[12]: LITERAL('Multiple Choices')
        values[13]: LITERAL('Moved Permanently')
        values[14]: LITERAL('Found')
        values[15]: LITERAL('See Other')
        values[16]: LITERAL('Not Modified')
        values[17]: LITERAL('Use Proxy')
        values[18]: LITERAL('Reserved')
        values[19]: LITERAL('Temporary Redirect')
        values[20]: LITERAL('Permanent Redirect')
        values[21]: LITERAL('Bad Request')
        values[22]: LITERAL('Unauthorized')
        values[23]: LITERAL('Payment Required')
        values[24]: LITERAL('Forbidden')
        values[25]: LITERAL('Not Found')
        values[26]: LITERAL('Method Not Allowed')
        values[27]: LITERAL('Not Acceptable')
        values[28]: LITERAL('Proxy Authentication Required')
        values[29]: LITERAL('Request Timeout')
        values[30]: LITERAL('Conflict')
        values[31]: LITERAL('Gone')
        values[32]: LITERAL('Length Required')
        values[33]: LITERAL('Precondition Failed')
        values[34]: LITERAL('Request Entity Too Large')
        values[35]: LITERAL('Request-URI Too Long')
        values[36]: LITERAL('Unsupported Media Type')
        values[37]: LITERAL('Requested Range Not Satisfiable')
        values[38]: LITERAL('Expectation Failed')
        values[39]: LITERAL('I\'m a teapot')
        values[40]: LITERAL('Misdirected Request')
        values[41]: LITERAL('Unprocessable Entity')
        values[42]: LITERAL('Locked')
        values[43]: LITERAL('Failed Dependency')
        values[44]: LITERAL('Upgrade Required')
        values[45]: LITERAL('Precondition Required')
        values[46]: LITERAL('Too Many Requests')
        values[47]: LITERAL('Request Header Fields Too Large')
        values[48]: LITERAL('Unavailable For Legal Reasons')
        values[49]: LITERAL('Internal Server Error')
        values[50]: LITERAL('Not Implemented')
        values[51]: LITERAL('Bad Gateway')
        values[52]: LITERAL('Service Unavailable')
        values[53]: LITERAL('Gateway Timeout')
        values[54]: LITERAL('HTTP Version Not Supported')
        values[55]: LITERAL('Variant Also Negotiates')
        values[56]: LITERAL('Insufficient Storage')
        values[57]: LITERAL('Not Extended')
        values[58]: LITERAL('Network Authentication Required')
        result: Var#8
    Expr_Assign
        var: Var#9<$wp_header_to_desc>
        expr: Var#8
        result: Var#10
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Var#11<$wp_header_to_desc> = Phi(Var#9<$wp_header_to_desc>, Var#2<$wp_header_to_desc>)
    Var#12<$code> = Phi(Var#4<$code>)
    Expr_ArrayDimFetch
        var: Var#11<$wp_header_to_desc>
        dim: Var#12<$code>
        result: Var#13
    Expr_Isset
        vars[0]: Var#13
        result: Var#14
    Stmt_JumpIf
        cond: Var#14
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Var#15<$wp_header_to_desc> = Phi(Var#11<$wp_header_to_desc>)
    Var#16<$code> = Phi(Var#12<$code>)
    Expr_ArrayDimFetch
        var: Var#15<$wp_header_to_desc>
        dim: Var#16<$code>
        result: Var#17
    Terminal_Return
        expr: Var#17

Block#6
    Parent: Block#4
    Terminal_Return
        expr: LITERAL('')

Function status_header():
Block#1
    Expr_Param
        name: LITERAL('code')
        result: Var#1<$code>
    Expr_Param
        name: LITERAL('description')
        defaultVar: LITERAL('')
        result: Var#2<$description>
        defaultBlock: Block#2
    Expr_BooleanNot
        expr: Var#2<$description>
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#3
        else: Block#4

Block#2

Block#3
    Parent: Block#1
    Var#4<$code> = Phi(Var#1<$code>)
    Expr_FuncCall
        name: LITERAL('get_status_header_desc')
        args[0]: Var#4<$code>
        result: Var#5
    Expr_Assign
        var: Var#6<$description>
        expr: Var#5
        result: Var#7
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Var#8<$description> = Phi(Var#6<$description>, Var#2<$description>)
    Var#9<$code> = Phi(Var#4<$code>, Var#1<$code>)
    Expr_Empty
        expr: Var#8<$description>
        result: Var#10
    Stmt_JumpIf
        cond: Var#10
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Terminal_Return

Block#7
    Parent: Block#5
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#7
    Var#11<$code> = Phi(Var#9<$code>)
    Var#12<$description> = Phi(Var#8<$description>)
    Expr_FuncCall
        name: LITERAL('wp_get_server_protocol')
        result: Var#13
    Expr_Assign
        var: Var#14<$protocol>
        expr: Var#13
        result: Var#15
    Expr_ConcatList
        list[0]: Var#14<$protocol>
        list[1]: LITERAL(' ')
        list[2]: Var#11<$code>
        list[3]: LITERAL(' ')
        list[4]: Var#12<$description>
        result: Var#16
    Expr_Assign
        var: Var#17<$status_header>
        expr: Var#16
        result: Var#18
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('apply_filters')
        result: Var#19
    Stmt_JumpIf
        cond: Var#19
        if: Block#9
        else: Block#10

Block#9
    Parent: Block#8
    Var#20<$status_header> = Phi(Var#17<$status_header>)
    Var#21<$code> = Phi(Var#11<$code>)
    Var#22<$description> = Phi(Var#12<$description>)
    Var#23<$protocol> = Phi(Var#14<$protocol>)
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('status_header')
        args[1]: Var#20<$status_header>
        args[2]: Var#21<$code>
        args[3]: Var#22<$description>
        args[4]: Var#23<$protocol>
        result: Var#24
    Expr_Assign
        var: Var#25<$status_header>
        expr: Var#24
        result: Var#26
    Stmt_Jump
        target: Block#11

Block#10
    Parent: Block#8
    Stmt_Jump
        target: Block#11

Block#11
    Parent: Block#9
    Parent: Block#10
    Var#27<$status_header> = Phi(Var#25<$status_header>, Var#17<$status_header>)
    Var#28<$code> = Phi(Var#21<$code>, Var#11<$code>)
    Stmt_Jump
        target: Block#12

Block#12
    Parent: Block#11
    Var#29<$status_header> = Phi(Var#27<$status_header>)
    Var#30<$code> = Phi(Var#28<$code>)
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#31
    Expr_FuncCall
        name: LITERAL('header')
        args[0]: Var#29<$status_header>
        args[1]: Var#31
        args[2]: Var#30<$code>
        result: Var#32
    Stmt_Jump
        target: Block#13

Block#13
    Parent: Block#12
    Terminal_Return

Function wp_get_nocache_headers():
Block#1
    Expr_Array
        keys[0]: LITERAL('Expires')
        keys[1]: LITERAL('Cache-Control')
        values[0]: LITERAL('Wed, 11 Jan 1984 05:00:00 GMT')
        values[1]: LITERAL('no-cache, must-revalidate, max-age=0')
        result: Var#1
    Expr_Assign
        var: Var#2<$headers>
        expr: Var#1
        result: Var#3
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('apply_filters')
        result: Var#4
    Stmt_JumpIf
        cond: Var#4
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#5<$headers> = Phi(Var#2<$headers>)
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('nocache_headers')
        args[1]: Var#5<$headers>
        result: Var#6
    Expr_Cast_Array
        expr: Var#6
        result: Var#7
    Expr_Assign
        var: Var#8<$headers>
        expr: Var#7
        result: Var#9
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Var#10<$headers> = Phi(Var#8<$headers>, Var#2<$headers>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#11
    Expr_ArrayDimFetch
        var: Var#10<$headers>
        dim: LITERAL('Last-Modified')
        result: Var#12
    Expr_Assign
        var: Var#12
        expr: Var#11
        result: Var#13
    Terminal_Return
        expr: Var#10<$headers>

Function nocache_headers():
Block#1
    Expr_FuncCall
        name: LITERAL('wp_get_nocache_headers')
        result: Var#1
    Expr_Assign
        var: Var#2<$headers>
        expr: Var#1
        result: Var#3
    Expr_ArrayDimFetch
        var: Var#2<$headers>
        dim: LITERAL('Last-Modified')
        result: Var#4
    Terminal_Unset
        exprs[0]: Var#4
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('header_remove')
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Expr_FuncCall
        name: LITERAL('headers_list')
        result: Var#6
    Iterator_Reset
        var: Var#6
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#2
    Expr_FuncCall
        name: LITERAL('header_remove')
        args[0]: LITERAL('Last-Modified')
        result: Var#7
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#3
    Parent: Block#17
    Var#8<$headers> = Phi(Var#2<$headers>, Var#9<$headers>)
    Iterator_Valid
        var: Var#6
        result: Var#10
    Stmt_JumpIf
        cond: Var#10
        if: Block#7
        else: Block#8

Block#6
    Parent: Block#4
    Stmt_Jump
        target: Block#9

Block#7
    Parent: Block#5
    Iterator_Value
        var: Var#6
        result: Var#11
    Expr_Assign
        var: Var#12<$header>
        expr: Var#11
        result: Var#13
    Expr_FuncCall
        name: LITERAL('stripos')
        args[0]: Var#12<$header>
        args[1]: LITERAL('Last-Modified')
        result: Var#14
    Expr_BinaryOp_Identical
        left: LITERAL(0)
        right: Var#14
        result: Var#15
    Stmt_JumpIf
        cond: Var#15
        if: Block#10
        else: Block#11

Block#8
    Parent: Block#5
    Stmt_Jump
        target: Block#12

Block#9
    Parent: Block#6
    Parent: Block#12
    Var#16<$headers> = Phi(Var#2<$headers>, Var#17<$headers>)
    Iterator_Reset
        var: Var#16<$headers>
    Stmt_Jump
        target: Block#13

Block#10
    Parent: Block#7
    Var#18<$headers> = Phi(Var#8<$headers>)
    Expr_ArrayDimFetch
        var: Var#18<$headers>
        dim: LITERAL('Last-Modified')
        result: Var#19
    Expr_Assign
        var: Var#19
        expr: LITERAL('')
        result: Var#20
    Stmt_Jump
        target: Block#12

Block#11
    Parent: Block#7
    Stmt_Jump
        target: Block#14

Block#12
    Parent: Block#8
    Parent: Block#10
    Var#17<$headers> = Phi(Var#8<$headers>, Var#18<$headers>)
    Stmt_Jump
        target: Block#9

Block#13
    Parent: Block#9
    Parent: Block#21
    Iterator_Valid
        var: Var#16<$headers>
        result: Var#21
    Stmt_JumpIf
        cond: Var#21
        if: Block#15
        else: Block#16

Block#14
    Parent: Block#11
    Var#9<$headers> = Phi(Var#8<$headers>)
    Stmt_Jump
        target: Block#17

Block#15
    Parent: Block#13
    Iterator_Key
        var: Var#16<$headers>
        result: Var#22
    Expr_Assign
        var: Var#23<$name>
        expr: Var#22
        result: Var#24
    Iterator_Value
        var: Var#16<$headers>
        result: Var#25
    Expr_Assign
        var: Var#26<$field_value>
        expr: Var#25
        result: Var#27
    Stmt_Jump
        target: Block#18

Block#16
    Parent: Block#13
    Stmt_Jump
        target: Block#19

Block#17
    Parent: Block#14
    Stmt_Jump
        target: Block#5

Block#18
    Parent: Block#15
    Var#28<$name> = Phi(Var#23<$name>)
    Var#29<$field_value> = Phi(Var#26<$field_value>)
    Expr_ConcatList
        list[0]: Var#28<$name>
        list[1]: LITERAL(': ')
        list[2]: Var#29<$field_value>
        result: Var#30
    Expr_FuncCall
        name: LITERAL('header')
        args[0]: Var#30
        result: Var#31
    Stmt_Jump
        target: Block#20

Block#19
    Parent: Block#16
    Terminal_Return

Block#20
    Parent: Block#18
    Stmt_Jump
        target: Block#21

Block#21
    Parent: Block#20
    Stmt_Jump
        target: Block#13

Function cache_javascript_headers():
Block#1
    Expr_ConstFetch
        name: LITERAL('DAY_IN_SECONDS')
        result: Var#1
    Expr_BinaryOp_Mul
        left: LITERAL(10)
        right: Var#1
        result: Var#2
    Expr_Assign
        var: Var#3<$expiresOffset>
        expr: Var#2
        result: Var#4
    Expr_FuncCall
        name: LITERAL('get_bloginfo')
        args[0]: LITERAL('charset')
        result: Var#5
    Expr_BinaryOp_Concat
        left: LITERAL('Content-Type: text/javascript; charset=')
        right: Var#5
        result: Var#6
    Expr_FuncCall
        name: LITERAL('header')
        args[0]: Var#6
        result: Var#7
    Expr_FuncCall
        name: LITERAL('header')
        args[0]: LITERAL('Vary: Accept-Encoding')
        result: Var#8
    Expr_FuncCall
        name: LITERAL('time')
        result: Var#9
    Expr_BinaryOp_Plus
        left: Var#9
        right: Var#3<$expiresOffset>
        result: Var#10
    Expr_FuncCall
        name: LITERAL('gmdate')
        args[0]: LITERAL('D, d M Y H:i:s')
        args[1]: Var#10
        result: Var#11
    Expr_BinaryOp_Concat
        left: LITERAL('Expires: ')
        right: Var#11
        result: Var#12
    Expr_BinaryOp_Concat
        left: Var#12
        right: LITERAL(' GMT')
        result: Var#13
    Expr_FuncCall
        name: LITERAL('header')
        args[0]: Var#13
        result: Var#14
    Terminal_Return

Function get_num_queries():
Block#1
    Var#1<$wpdb> = Phi()
    Terminal_GlobalVar
        var: LITERAL('wpdb')
    Expr_PropertyFetch
        var: Var#1<$wpdb>
        name: LITERAL('num_queries')
        result: Var#2
    Terminal_Return
        expr: Var#2

Function bool_from_yn():
Block#1
    Expr_Param
        name: LITERAL('yn')
        result: Var#1<$yn>
    Expr_FuncCall
        name: LITERAL('strtolower')
        args[0]: Var#1<$yn>
        result: Var#2
    Expr_BinaryOp_Equal
        left: Var#2
        right: LITERAL('y')
        result: Var#3
    Terminal_Return
        expr: Var#3

Function do_feed():
Block#1
    Var#1<$wp_query> = Phi()
    Terminal_GlobalVar
        var: LITERAL('wp_query')
    Expr_FuncCall
        name: LITERAL('get_query_var')
        args[0]: LITERAL('feed')
        result: Var#2
    Expr_Assign
        var: Var#3<$feed>
        expr: Var#2
        result: Var#4
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/^_+/')
        args[1]: LITERAL('')
        args[2]: Var#3<$feed>
        result: Var#5
    Expr_Assign
        var: Var#6<$feed>
        expr: Var#5
        result: Var#7
    Expr_BinaryOp_Equal
        left: Var#6<$feed>
        right: LITERAL('')
        result: Var#8
    Stmt_JumpIf
        cond: Var#8
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Parent: Block#3
    Var#9 = Phi(LITERAL(true), Var#10)
    Var#11<$feed> = Phi(Var#6<$feed>, Var#12<$feed>)
    Var#13<$wp_query> = Phi(Var#1<$wp_query>)
    Stmt_JumpIf
        cond: Var#9
        if: Block#4
        else: Block#5

Block#3
    Parent: Block#1
    Var#12<$feed> = Phi(Var#6<$feed>)
    Expr_BinaryOp_Equal
        left: Var#12<$feed>
        right: LITERAL('feed')
        result: Var#14
    Expr_Cast_Bool
        expr: Var#14
        result: Var#10
    Stmt_Jump
        target: Block#2

Block#4
    Parent: Block#2
    Expr_FuncCall
        name: LITERAL('get_default_feed')
        result: Var#15
    Expr_Assign
        var: Var#16<$feed>
        expr: Var#15
        result: Var#17
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#2
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#4
    Parent: Block#5
    Var#18<$feed> = Phi(Var#16<$feed>, Var#11<$feed>)
    Var#19<$wp_query> = Phi(Var#13<$wp_query>)
    Expr_ConcatList
        list[0]: LITERAL('do_feed_')
        list[1]: Var#18<$feed>
        result: Var#20
    Expr_FuncCall
        name: LITERAL('has_action')
        args[0]: Var#20
        result: Var#21
    Expr_BooleanNot
        expr: Var#21
        result: Var#22
    Stmt_JumpIf
        cond: Var#22
        if: Block#7
        else: Block#8

Block#7
    Parent: Block#6
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('ERROR: This is not a valid feed template.')
        result: Var#23
    Expr_Array
        keys[0]: LITERAL('response')
        values[0]: LITERAL(404)
        result: Var#24
    Expr_FuncCall
        name: LITERAL('wp_die')
        args[0]: Var#23
        args[1]: LITERAL('')
        args[2]: Var#24
        result: Var#25
    Stmt_Jump
        target: Block#9

Block#8
    Parent: Block#6
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#7
    Parent: Block#8
    Var#26<$feed> = Phi(Var#18<$feed>)
    Var#27<$wp_query> = Phi(Var#19<$wp_query>)
    Expr_ConcatList
        list[0]: LITERAL('do_feed_')
        list[1]: Var#26<$feed>
        result: Var#28
    Expr_PropertyFetch
        var: Var#27<$wp_query>
        name: LITERAL('is_comment_feed')
        result: Var#29
    Expr_FuncCall
        name: LITERAL('do_action')
        args[0]: Var#28
        args[1]: Var#29
        args[2]: Var#26<$feed>
        result: Var#30
    Terminal_Return

Function do_feed_rdf():
Block#1
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#1
    Expr_ConstFetch
        name: LITERAL('WPINC')
        result: Var#2
    Expr_BinaryOp_Concat
        left: Var#1
        right: Var#2
        result: Var#3
    Expr_BinaryOp_Concat
        left: Var#3
        right: LITERAL('/feed-rdf.php')
        result: Var#4
    Expr_FuncCall
        name: LITERAL('load_template')
        args[0]: Var#4
        result: Var#5
    Terminal_Return

Function do_feed_rss():
Block#1
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#1
    Expr_ConstFetch
        name: LITERAL('WPINC')
        result: Var#2
    Expr_BinaryOp_Concat
        left: Var#1
        right: Var#2
        result: Var#3
    Expr_BinaryOp_Concat
        left: Var#3
        right: LITERAL('/feed-rss.php')
        result: Var#4
    Expr_FuncCall
        name: LITERAL('load_template')
        args[0]: Var#4
        result: Var#5
    Terminal_Return

Function do_feed_rss2():
Block#1
    Expr_Param
        name: LITERAL('for_comments')
        result: Var#1<$for_comments>
    Stmt_JumpIf
        cond: Var#1<$for_comments>
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#2
    Expr_ConstFetch
        name: LITERAL('WPINC')
        result: Var#3
    Expr_BinaryOp_Concat
        left: Var#2
        right: Var#3
        result: Var#4
    Expr_BinaryOp_Concat
        left: Var#4
        right: LITERAL('/feed-rss2-comments.php')
        result: Var#5
    Expr_FuncCall
        name: LITERAL('load_template')
        args[0]: Var#5
        result: Var#6
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#7
    Expr_ConstFetch
        name: LITERAL('WPINC')
        result: Var#8
    Expr_BinaryOp_Concat
        left: Var#7
        right: Var#8
        result: Var#9
    Expr_BinaryOp_Concat
        left: Var#9
        right: LITERAL('/feed-rss2.php')
        result: Var#10
    Expr_FuncCall
        name: LITERAL('load_template')
        args[0]: Var#10
        result: Var#11
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Terminal_Return

Function do_feed_atom():
Block#1
    Expr_Param
        name: LITERAL('for_comments')
        result: Var#1<$for_comments>
    Stmt_JumpIf
        cond: Var#1<$for_comments>
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#2
    Expr_ConstFetch
        name: LITERAL('WPINC')
        result: Var#3
    Expr_BinaryOp_Concat
        left: Var#2
        right: Var#3
        result: Var#4
    Expr_BinaryOp_Concat
        left: Var#4
        right: LITERAL('/feed-atom-comments.php')
        result: Var#5
    Expr_FuncCall
        name: LITERAL('load_template')
        args[0]: Var#5
        result: Var#6
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#7
    Expr_ConstFetch
        name: LITERAL('WPINC')
        result: Var#8
    Expr_BinaryOp_Concat
        left: Var#7
        right: Var#8
        result: Var#9
    Expr_BinaryOp_Concat
        left: Var#9
        right: LITERAL('/feed-atom.php')
        result: Var#10
    Expr_FuncCall
        name: LITERAL('load_template')
        args[0]: Var#10
        result: Var#11
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Terminal_Return

Function do_robots():
Block#1
    Expr_FuncCall
        name: LITERAL('header')
        args[0]: LITERAL('Content-Type: text/plain; charset=utf-8')
        result: Var#1
    Expr_FuncCall
        name: LITERAL('do_action')
        args[0]: LITERAL('do_robotstxt')
        result: Var#2
    Expr_Assign
        var: Var#3<$output>
        expr: LITERAL('User-agent: *
        ')
        result: Var#4
    Expr_FuncCall
        name: LITERAL('get_option')
        args[0]: LITERAL('blog_public')
        result: Var#5
    Expr_Assign
        var: Var#6<$public>
        expr: Var#5
        result: Var#7
    Expr_BinaryOp_Equal
        left: LITERAL('0')
        right: Var#6<$public>
        result: Var#8
    Stmt_JumpIf
        cond: Var#8
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#9<$output> = Phi(Var#3<$output>)
    Expr_BinaryOp_Concat
        left: Var#9<$output>
        right: LITERAL('Disallow: /
        ')
        result: Var#10
    Expr_Assign
        var: Var#11<$output>
        expr: Var#10
        result: Var#12
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Expr_FuncCall
        name: LITERAL('site_url')
        result: Var#13
    Expr_FuncCall
        name: LITERAL('parse_url')
        args[0]: Var#13
        result: Var#14
    Expr_Assign
        var: Var#15<$site_url>
        expr: Var#14
        result: Var#16
    Expr_ArrayDimFetch
        var: Var#15<$site_url>
        dim: LITERAL('path')
        result: Var#17
    Expr_Empty
        expr: Var#17
        result: Var#18
    Expr_BooleanNot
        expr: Var#18
        result: Var#19
    Stmt_JumpIf
        cond: Var#19
        if: Block#5
        else: Block#6

Block#4
    Parent: Block#2
    Parent: Block#7
    Var#20<$output> = Phi(Var#11<$output>, Var#21<$output>)
    Var#22<$public> = Phi(Var#6<$public>, Var#23<$public>)
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('robots_txt')
        args[1]: Var#20<$output>
        args[2]: Var#22<$public>
        result: Var#24
    Terminal_Echo
        expr: Var#24
    Terminal_Return

Block#5
    Parent: Block#3
    Var#25<$site_url> = Phi(Var#15<$site_url>)
    Expr_ArrayDimFetch
        var: Var#25<$site_url>
        dim: LITERAL('path')
        result: Var#26
    Expr_Assign
        var: Var#27
        expr: Var#26
        result: Var#28
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#3
    Expr_Assign
        var: Var#29
        expr: LITERAL('')
        result: Var#30
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#5
    Parent: Block#6
    Var#31 = Phi(Var#27, Var#29)
    Var#32<$output> = Phi(Var#3<$output>)
    Var#23<$public> = Phi(Var#6<$public>)
    Expr_Assign
        var: Var#33<$path>
        expr: Var#31
        result: Var#34
    Expr_ConcatList
        list[0]: LITERAL('Disallow: ')
        list[1]: Var#33<$path>
        list[2]: LITERAL('/wp-admin/
        ')
        result: Var#35
    Expr_BinaryOp_Concat
        left: Var#32<$output>
        right: Var#35
        result: Var#36
    Expr_Assign
        var: Var#37<$output>
        expr: Var#36
        result: Var#38
    Expr_ConcatList
        list[0]: LITERAL('Allow: ')
        list[1]: Var#33<$path>
        list[2]: LITERAL('/wp-admin/admin-ajax.php
        ')
        result: Var#39
    Expr_BinaryOp_Concat
        left: Var#37<$output>
        right: Var#39
        result: Var#40
    Expr_Assign
        var: Var#21<$output>
        expr: Var#40
        result: Var#41
    Stmt_Jump
        target: Block#4

Function is_blog_installed():
Block#1
    Terminal_GlobalVar
        var: LITERAL('wpdb')
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#1
    Terminal_Return
        expr: Var#1

Function wp_nonce_url():
Block#1
    Expr_Param
        name: LITERAL('actionurl')
        result: Var#1<$actionurl>
    Expr_Param
        name: LITERAL('action')
        defaultVar: Var#2
        result: Var#3<$action>
        defaultBlock: Block#2
    Expr_Param
        name: LITERAL('name')
        defaultVar: LITERAL('_wpnonce')
        result: Var#4<$name>
        defaultBlock: Block#3
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: LITERAL('&amp;')
        args[1]: LITERAL('&')
        args[2]: Var#1<$actionurl>
        result: Var#5
    Expr_Assign
        var: Var#6<$actionurl>
        expr: Var#5
        result: Var#7
    Expr_FuncCall
        name: LITERAL('wp_create_nonce')
        args[0]: Var#3<$action>
        result: Var#8
    Expr_FuncCall
        name: LITERAL('add_query_arg')
        args[0]: Var#4<$name>
        args[1]: Var#8
        args[2]: Var#6<$actionurl>
        result: Var#9
    Expr_FuncCall
        name: LITERAL('esc_html')
        args[0]: Var#9
        result: Var#10
    Terminal_Return
        expr: Var#10

Block#2
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#2

Block#3

Function wp_nonce_field():
Block#1
    Expr_Param
        name: LITERAL('action')
        defaultVar: Var#1
        result: Var#2<$action>
        defaultBlock: Block#2
    Expr_Param
        name: LITERAL('name')
        defaultVar: LITERAL('_wpnonce')
        result: Var#3<$name>
        defaultBlock: Block#3
    Expr_Param
        name: LITERAL('referer')
        defaultVar: Var#4
        result: Var#5<$referer>
        defaultBlock: Block#4
    Expr_Param
        name: LITERAL('echo')
        defaultVar: Var#6
        result: Var#7<$echo>
        defaultBlock: Block#5
    Expr_FuncCall
        name: LITERAL('esc_attr')
        args[0]: Var#3<$name>
        result: Var#8
    Expr_Assign
        var: Var#9<$name>
        expr: Var#8
        result: Var#10
    Expr_BinaryOp_Concat
        left: LITERAL('<input type="hidden" id="')
        right: Var#9<$name>
        result: Var#11
    Expr_BinaryOp_Concat
        left: Var#11
        right: LITERAL('" name="')
        result: Var#12
    Expr_BinaryOp_Concat
        left: Var#12
        right: Var#9<$name>
        result: Var#13
    Expr_BinaryOp_Concat
        left: Var#13
        right: LITERAL('" value="')
        result: Var#14
    Expr_FuncCall
        name: LITERAL('wp_create_nonce')
        args[0]: Var#2<$action>
        result: Var#15
    Expr_BinaryOp_Concat
        left: Var#14
        right: Var#15
        result: Var#16
    Expr_BinaryOp_Concat
        left: Var#16
        right: LITERAL('" />')
        result: Var#17
    Expr_Assign
        var: Var#18<$nonce_field>
        expr: Var#17
        result: Var#19
    Stmt_JumpIf
        cond: Var#5<$referer>
        if: Block#6
        else: Block#7

Block#2
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#1

Block#3

Block#4
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#4

Block#5
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#6

Block#6
    Parent: Block#1
    Var#20<$nonce_field> = Phi(Var#18<$nonce_field>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#21
    Expr_FuncCall
        name: LITERAL('wp_referer_field')
        args[0]: Var#21
        result: Var#22
    Expr_BinaryOp_Concat
        left: Var#20<$nonce_field>
        right: Var#22
        result: Var#23
    Expr_Assign
        var: Var#24<$nonce_field>
        expr: Var#23
        result: Var#25
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#1
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#6
    Parent: Block#7
    Var#26<$echo> = Phi(Var#7<$echo>)
    Var#27<$nonce_field> = Phi(Var#24<$nonce_field>, Var#18<$nonce_field>)
    Stmt_JumpIf
        cond: Var#26<$echo>
        if: Block#9
        else: Block#10

Block#9
    Parent: Block#8
    Var#28<$nonce_field> = Phi(Var#27<$nonce_field>)
    Terminal_Echo
        expr: Var#28<$nonce_field>
    Stmt_Jump
        target: Block#11

Block#10
    Parent: Block#8
    Stmt_Jump
        target: Block#11

Block#11
    Parent: Block#9
    Parent: Block#10
    Var#29<$nonce_field> = Phi(Var#28<$nonce_field>, Var#27<$nonce_field>)
    Terminal_Return
        expr: Var#29<$nonce_field>

Function wp_referer_field():
Block#1
    Expr_Param
        name: LITERAL('echo')
        defaultVar: Var#1
        result: Var#2<$echo>
        defaultBlock: Block#2
    Var#3<$_SERVER> = Phi()
    Expr_ArrayDimFetch
        var: Var#3<$_SERVER>
        dim: LITERAL('REQUEST_URI')
        result: Var#4
    Expr_FuncCall
        name: LITERAL('wp_unslash')
        args[0]: Var#4
        result: Var#5
    Expr_FuncCall
        name: LITERAL('esc_attr')
        args[0]: Var#5
        result: Var#6
    Expr_BinaryOp_Concat
        left: LITERAL('<input type="hidden" name="_wp_http_referer" value="')
        right: Var#6
        result: Var#7
    Expr_BinaryOp_Concat
        left: Var#7
        right: LITERAL('" />')
        result: Var#8
    Expr_Assign
        var: Var#9<$referer_field>
        expr: Var#8
        result: Var#10
    Stmt_JumpIf
        cond: Var#2<$echo>
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#1

Block#3
    Parent: Block#1
    Var#11<$referer_field> = Phi(Var#9<$referer_field>)
    Terminal_Echo
        expr: Var#11<$referer_field>
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Var#12<$referer_field> = Phi(Var#11<$referer_field>, Var#9<$referer_field>)
    Terminal_Return
        expr: Var#12<$referer_field>

Function wp_original_referer_field():
Block#1
    Expr_Param
        name: LITERAL('echo')
        defaultVar: Var#1
        result: Var#2<$echo>
        defaultBlock: Block#2
    Expr_Param
        name: LITERAL('jump_back_to')
        defaultVar: LITERAL('current')
        result: Var#3<$jump_back_to>
        defaultBlock: Block#3
    Var#4<$_SERVER> = Phi()
    Expr_FuncCall
        name: LITERAL('wp_get_original_referer')
        result: Var#5
    Expr_Assign
        var: Var#6<$ref>
        expr: Var#5
        result: Var#7
    Expr_BooleanNot
        expr: Var#7
        result: Var#8
    Stmt_JumpIf
        cond: Var#8
        if: Block#4
        else: Block#5

Block#2
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#1

Block#3

Block#4
    Parent: Block#1
    Var#9<$jump_back_to> = Phi(Var#3<$jump_back_to>)
    Expr_BinaryOp_Equal
        left: LITERAL('previous')
        right: Var#9<$jump_back_to>
        result: Var#10
    Stmt_JumpIf
        cond: Var#10
        if: Block#6
        else: Block#7

Block#5
    Parent: Block#1
    Stmt_Jump
        target: Block#8

Block#6
    Parent: Block#4
    Expr_FuncCall
        name: LITERAL('wp_get_referer')
        result: Var#11
    Expr_Assign
        var: Var#12
        expr: Var#11
        result: Var#13
    Stmt_Jump
        target: Block#9

Block#7
    Parent: Block#4
    Var#14<$_SERVER> = Phi(Var#4<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#14<$_SERVER>
        dim: LITERAL('REQUEST_URI')
        result: Var#15
    Expr_FuncCall
        name: LITERAL('wp_unslash')
        args[0]: Var#15
        result: Var#16
    Expr_Assign
        var: Var#17
        expr: Var#16
        result: Var#18
    Stmt_Jump
        target: Block#9

Block#8
    Parent: Block#9
    Parent: Block#5
    Var#19<$ref> = Phi(Var#20<$ref>, Var#6<$ref>)
    Var#21<$echo> = Phi(Var#22<$echo>, Var#2<$echo>)
    Expr_FuncCall
        name: LITERAL('esc_attr')
        args[0]: Var#19<$ref>
        result: Var#23
    Expr_BinaryOp_Concat
        left: LITERAL('<input type="hidden" name="_wp_original_http_referer" value="')
        right: Var#23
        result: Var#24
    Expr_BinaryOp_Concat
        left: Var#24
        right: LITERAL('" />')
        result: Var#25
    Expr_Assign
        var: Var#26<$orig_referer_field>
        expr: Var#25
        result: Var#27
    Stmt_JumpIf
        cond: Var#21<$echo>
        if: Block#10
        else: Block#11

Block#9
    Parent: Block#6
    Parent: Block#7
    Var#28 = Phi(Var#12, Var#17)
    Var#22<$echo> = Phi(Var#2<$echo>)
    Expr_Assign
        var: Var#20<$ref>
        expr: Var#28
        result: Var#29
    Stmt_Jump
        target: Block#8

Block#10
    Parent: Block#8
    Var#30<$orig_referer_field> = Phi(Var#26<$orig_referer_field>)
    Terminal_Echo
        expr: Var#30<$orig_referer_field>
    Stmt_Jump
        target: Block#12

Block#11
    Parent: Block#8
    Stmt_Jump
        target: Block#12

Block#12
    Parent: Block#10
    Parent: Block#11
    Var#31<$orig_referer_field> = Phi(Var#30<$orig_referer_field>, Var#26<$orig_referer_field>)
    Terminal_Return
        expr: Var#31<$orig_referer_field>

Function wp_get_referer():
Block#1
    Var#1<$_SERVER> = Phi()
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('wp_validate_redirect')
        result: Var#2
    Expr_BooleanNot
        expr: Var#2
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#4
    Terminal_Return
        expr: Var#4

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Var#5<$_SERVER> = Phi(Var#1<$_SERVER>)
    Expr_FuncCall
        name: LITERAL('wp_get_raw_referer')
        result: Var#6
    Expr_Assign
        var: Var#7<$ref>
        expr: Var#6
        result: Var#8
    Stmt_JumpIf
        cond: Var#7<$ref>
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Var#9<$ref> = Phi(Var#7<$ref>)
    Var#10<$_SERVER> = Phi(Var#5<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#10<$_SERVER>
        dim: LITERAL('REQUEST_URI')
        result: Var#11
    Expr_FuncCall
        name: LITERAL('wp_unslash')
        args[0]: Var#11
        result: Var#12
    Expr_BinaryOp_NotIdentical
        left: Var#9<$ref>
        right: Var#12
        result: Var#13
    Expr_Cast_Bool
        expr: Var#13
        result: Var#14
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#4
    Parent: Block#5
    Var#15 = Phi(LITERAL(false), Var#14)
    Var#16<$ref> = Phi(Var#7<$ref>, Var#9<$ref>)
    Var#17<$_SERVER> = Phi(Var#5<$_SERVER>, Var#10<$_SERVER>)
    Stmt_JumpIf
        cond: Var#15
        if: Block#7
        else: Block#8

Block#7
    Parent: Block#6
    Var#18<$ref> = Phi(Var#16<$ref>)
    Var#19<$_SERVER> = Phi(Var#17<$_SERVER>)
    Expr_FuncCall
        name: LITERAL('home_url')
        result: Var#20
    Expr_ArrayDimFetch
        var: Var#19<$_SERVER>
        dim: LITERAL('REQUEST_URI')
        result: Var#21
    Expr_FuncCall
        name: LITERAL('wp_unslash')
        args[0]: Var#21
        result: Var#22
    Expr_BinaryOp_Concat
        left: Var#20
        right: Var#22
        result: Var#23
    Expr_BinaryOp_NotIdentical
        left: Var#18<$ref>
        right: Var#23
        result: Var#24
    Expr_Cast_Bool
        expr: Var#24
        result: Var#25
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#6
    Parent: Block#7
    Var#26 = Phi(LITERAL(false), Var#25)
    Var#27<$ref> = Phi(Var#16<$ref>, Var#18<$ref>)
    Stmt_JumpIf
        cond: Var#26
        if: Block#9
        else: Block#10

Block#9
    Parent: Block#8
    Var#28<$ref> = Phi(Var#27<$ref>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#29
    Expr_FuncCall
        name: LITERAL('wp_validate_redirect')
        args[0]: Var#28<$ref>
        args[1]: Var#29
        result: Var#30
    Terminal_Return
        expr: Var#30

Block#10
    Parent: Block#8
    Stmt_Jump
        target: Block#11

Block#11
    Parent: Block#10
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#31
    Terminal_Return
        expr: Var#31

Function wp_get_raw_referer():
Block#1
    Var#1<$_REQUEST> = Phi()
    Var#2<$_SERVER> = Phi()
    Expr_ArrayDimFetch
        var: Var#1<$_REQUEST>
        dim: LITERAL('_wp_http_referer')
        result: Var#3
    Expr_Empty
        expr: Var#3
        result: Var#4
    Expr_BooleanNot
        expr: Var#4
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#6<$_REQUEST> = Phi(Var#1<$_REQUEST>)
    Expr_ArrayDimFetch
        var: Var#6<$_REQUEST>
        dim: LITERAL('_wp_http_referer')
        result: Var#7
    Expr_FuncCall
        name: LITERAL('wp_unslash')
        args[0]: Var#7
        result: Var#8
    Terminal_Return
        expr: Var#8

Block#3
    Parent: Block#1
    Var#9<$_SERVER> = Phi(Var#2<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#9<$_SERVER>
        dim: LITERAL('HTTP_REFERER')
        result: Var#10
    Expr_Empty
        expr: Var#10
        result: Var#11
    Expr_BooleanNot
        expr: Var#11
        result: Var#12
    Stmt_JumpIf
        cond: Var#12
        if: Block#4
        else: Block#5

Block#4
    Parent: Block#3
    Var#13<$_SERVER> = Phi(Var#9<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#13<$_SERVER>
        dim: LITERAL('HTTP_REFERER')
        result: Var#14
    Expr_FuncCall
        name: LITERAL('wp_unslash')
        args[0]: Var#14
        result: Var#15
    Terminal_Return
        expr: Var#15

Block#5
    Parent: Block#3
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#5
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#6
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#16
    Terminal_Return
        expr: Var#16

Function wp_get_original_referer():
Block#1
    Var#1<$_REQUEST> = Phi()
    Expr_ArrayDimFetch
        var: Var#1<$_REQUEST>
        dim: LITERAL('_wp_original_http_referer')
        result: Var#2
    Expr_Empty
        expr: Var#2
        result: Var#3
    Expr_BooleanNot
        expr: Var#3
        result: Var#4
    Stmt_JumpIf
        cond: Var#4
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('wp_validate_redirect')
        result: Var#5
    Expr_Cast_Bool
        expr: Var#5
        result: Var#6
    Stmt_Jump
        target: Block#3

Block#3
    Parent: Block#1
    Parent: Block#2
    Var#7 = Phi(LITERAL(false), Var#6)
    Var#8<$_REQUEST> = Phi(Var#1<$_REQUEST>)
    Stmt_JumpIf
        cond: Var#7
        if: Block#4
        else: Block#5

Block#4
    Parent: Block#3
    Var#9<$_REQUEST> = Phi(Var#8<$_REQUEST>)
    Expr_ArrayDimFetch
        var: Var#9<$_REQUEST>
        dim: LITERAL('_wp_original_http_referer')
        result: Var#10
    Expr_FuncCall
        name: LITERAL('wp_unslash')
        args[0]: Var#10
        result: Var#11
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#12
    Expr_FuncCall
        name: LITERAL('wp_validate_redirect')
        args[0]: Var#11
        args[1]: Var#12
        result: Var#13
    Terminal_Return
        expr: Var#13

Block#5
    Parent: Block#3
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#5
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#14
    Terminal_Return
        expr: Var#14

Function wp_mkdir_p():
Block#1
    Expr_Param
        name: LITERAL('target')
        result: Var#1<$target>
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#2
    Expr_Assign
        var: Var#3<$wrapper>
        expr: Var#2
        result: Var#4
    Expr_FuncCall
        name: LITERAL('wp_is_stream')
        args[0]: Var#1<$target>
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#6<$target> = Phi(Var#1<$target>)
    Expr_FuncCall
        name: LITERAL('explode')
        args[0]: LITERAL('://')
        args[1]: Var#6<$target>
        args[2]: LITERAL(2)
        result: Var#7
    Expr_ArrayDimFetch
        var: Var#7
        dim: LITERAL(0)
        result: Var#8
    Expr_Assign
        var: Var#9<$wrapper>
        expr: Var#8
        result: Var#10
    Expr_ArrayDimFetch
        var: Var#7
        dim: LITERAL(1)
        result: Var#11
    Expr_Assign
        var: Var#12<$target>
        expr: Var#11
        result: Var#13
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Var#14<$target> = Phi(Var#12<$target>, Var#1<$target>)
    Var#15<$wrapper> = Phi(Var#9<$wrapper>, Var#3<$wrapper>)
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: LITERAL('//')
        args[1]: LITERAL('/')
        args[2]: Var#14<$target>
        result: Var#16
    Expr_Assign
        var: Var#17<$target>
        expr: Var#16
        result: Var#18
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#19
    Expr_BinaryOp_NotIdentical
        left: Var#15<$wrapper>
        right: Var#19
        result: Var#20
    Stmt_JumpIf
        cond: Var#20
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Var#21<$wrapper> = Phi(Var#15<$wrapper>)
    Var#22<$target> = Phi(Var#17<$target>)
    Expr_BinaryOp_Concat
        left: Var#21<$wrapper>
        right: LITERAL('://')
        result: Var#23
    Expr_BinaryOp_Concat
        left: Var#23
        right: Var#22<$target>
        result: Var#24
    Expr_Assign
        var: Var#25<$target>
        expr: Var#24
        result: Var#26
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#5
    Parent: Block#6
    Var#27<$target> = Phi(Var#25<$target>, Var#17<$target>)
    Expr_FuncCall
        name: LITERAL('rtrim')
        args[0]: Var#27<$target>
        args[1]: LITERAL('/')
        result: Var#28
    Expr_Assign
        var: Var#29<$target>
        expr: Var#28
        result: Var#30
    Expr_Empty
        expr: Var#29<$target>
        result: Var#31
    Stmt_JumpIf
        cond: Var#31
        if: Block#8
        else: Block#9

Block#8
    Parent: Block#7
    Expr_Assign
        var: Var#32<$target>
        expr: LITERAL('/')
        result: Var#33
    Stmt_Jump
        target: Block#10

Block#9
    Parent: Block#7
    Stmt_Jump
        target: Block#10

Block#10
    Parent: Block#8
    Parent: Block#9
    Var#34<$target> = Phi(Var#32<$target>, Var#29<$target>)
    Expr_FuncCall
        name: LITERAL('file_exists')
        args[0]: Var#34<$target>
        result: Var#35
    Stmt_JumpIf
        cond: Var#35
        if: Block#11
        else: Block#12

Block#11
    Parent: Block#10
    Stmt_Jump
        target: Block#13

Block#12
    Parent: Block#10
    Stmt_Jump
        target: Block#14

Block#13
    Parent: Block#11
    Var#36<$target> = Phi(Var#34<$target>)
    Expr_FuncCall
        name: LITERAL('is_dir')
        args[0]: Var#36<$target>
        result: Var#37
    Stmt_Jump
        target: Block#15

Block#14
    Parent: Block#12
    Var#38<$target> = Phi(Var#34<$target>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#39
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#38<$target>
        args[1]: LITERAL('../')
        result: Var#40
    Expr_BinaryOp_NotIdentical
        left: Var#39
        right: Var#40
        result: Var#41
    Stmt_JumpIf
        cond: Var#41
        if: Block#16
        else: Block#17

Block#15
    Parent: Block#13
    Terminal_Return
        expr: Var#37

Block#16
    Parent: Block#14
    Parent: Block#17
    Var#42 = Phi(LITERAL(true), Var#43)
    Var#44<$target> = Phi(Var#38<$target>, Var#45<$target>)
    Stmt_JumpIf
        cond: Var#42
        if: Block#18
        else: Block#19

Block#17
    Parent: Block#14
    Var#45<$target> = Phi(Var#38<$target>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#46
    Expr_ConstFetch
        name: LITERAL('DIRECTORY_SEPARATOR')
        result: Var#47
    Expr_BinaryOp_Concat
        left: LITERAL('..')
        right: Var#47
        result: Var#48
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#45<$target>
        args[1]: Var#48
        result: Var#49
    Expr_BinaryOp_NotIdentical
        left: Var#46
        right: Var#49
        result: Var#50
    Expr_Cast_Bool
        expr: Var#50
        result: Var#43
    Stmt_Jump
        target: Block#16

Block#18
    Parent: Block#16
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#51
    Terminal_Return
        expr: Var#51

Block#19
    Parent: Block#16
    Stmt_Jump
        target: Block#20

Block#20
    Parent: Block#19
    Var#52<$target> = Phi(Var#44<$target>)
    Expr_FuncCall
        name: LITERAL('dirname')
        args[0]: Var#52<$target>
        result: Var#53
    Expr_Assign
        var: Var#54<$target_parent>
        expr: Var#53
        result: Var#55
    Stmt_Jump
        target: Block#21

Block#21
    Parent: Block#20
    Parent: Block#26
    Var#56<$target_parent> = Phi(Var#54<$target_parent>, Var#57<$target_parent>)
    Var#58<$target> = Phi(Var#52<$target>, Var#59<$target>)
    Expr_BinaryOp_NotEqual
        left: LITERAL('.')
        right: Var#56<$target_parent>
        result: Var#60
    Stmt_JumpIf
        cond: Var#60
        if: Block#22
        else: Block#23

Block#22
    Parent: Block#21
    Var#61<$target_parent> = Phi(Var#56<$target_parent>)
    Expr_FuncCall
        name: LITERAL('is_dir')
        args[0]: Var#61<$target_parent>
        result: Var#62
    Expr_BooleanNot
        expr: Var#62
        result: Var#63
    Expr_Cast_Bool
        expr: Var#63
        result: Var#64
    Stmt_Jump
        target: Block#23

Block#23
    Parent: Block#21
    Parent: Block#22
    Var#65 = Phi(LITERAL(false), Var#64)
    Var#66<$target_parent> = Phi(Var#56<$target_parent>, Var#61<$target_parent>)
    Var#59<$target> = Phi(Var#58<$target>)
    Stmt_JumpIf
        cond: Var#65
        if: Block#24
        else: Block#25

Block#24
    Parent: Block#23
    Var#67<$target_parent> = Phi(Var#66<$target_parent>)
    Expr_FuncCall
        name: LITERAL('dirname')
        args[0]: Var#67<$target_parent>
        result: Var#68
    Expr_Assign
        var: Var#57<$target_parent>
        expr: Var#68
        result: Var#69
    Stmt_Jump
        target: Block#26

Block#25
    Parent: Block#23
    Stmt_Jump
        target: Block#27

Block#26
    Parent: Block#24
    Stmt_Jump
        target: Block#21

Block#27
    Parent: Block#25
    Stmt_Jump
        target: Block#28

Block#28
    Parent: Block#27
    Var#70<$target_parent> = Phi(Var#66<$target_parent>)
    Expr_FuncCall
        name: LITERAL('stat')
        args[0]: Var#70<$target_parent>
        result: Var#71
    Stmt_Jump
        target: Block#29

Block#29
    Parent: Block#28
    Expr_Assign
        var: Var#72<$stat>
        expr: Var#71
        result: Var#73
    Stmt_JumpIf
        cond: Var#73
        if: Block#30
        else: Block#31

Block#30
    Parent: Block#29
    Var#74<$stat> = Phi(Var#72<$stat>)
    Expr_ArrayDimFetch
        var: Var#74<$stat>
        dim: LITERAL('mode')
        result: Var#75
    Expr_BinaryOp_BitwiseAnd
        left: Var#75
        right: LITERAL(4095)
        result: Var#76
    Expr_Assign
        var: Var#77<$dir_perms>
        expr: Var#76
        result: Var#78
    Stmt_Jump
        target: Block#32

Block#31
    Parent: Block#29
    Expr_Assign
        var: Var#79<$dir_perms>
        expr: LITERAL(511)
        result: Var#80
    Stmt_Jump
        target: Block#32

Block#32
    Parent: Block#30
    Parent: Block#31
    Var#81<$target> = Phi(Var#59<$target>)
    Var#82<$dir_perms> = Phi(Var#77<$dir_perms>, Var#79<$dir_perms>)
    Var#83<$target_parent> = Phi(Var#70<$target_parent>)
    Stmt_Jump
        target: Block#33

Block#33
    Parent: Block#32
    Var#84<$target> = Phi(Var#81<$target>)
    Var#85<$dir_perms> = Phi(Var#82<$dir_perms>)
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#86
    Expr_FuncCall
        name: LITERAL('mkdir')
        args[0]: Var#84<$target>
        args[1]: Var#85<$dir_perms>
        args[2]: Var#86
        result: Var#87
    Stmt_Jump
        target: Block#34

Block#34
    Parent: Block#33
    Stmt_JumpIf
        cond: Var#87
        if: Block#35
        else: Block#36

Block#35
    Parent: Block#34
    Var#88<$dir_perms> = Phi(Var#85<$dir_perms>)
    Expr_FuncCall
        name: LITERAL('umask')
        result: Var#89
    Expr_BitwiseNot
        expr: Var#89
        result: Var#90
    Expr_BinaryOp_BitwiseAnd
        left: Var#88<$dir_perms>
        right: Var#90
        result: Var#91
    Expr_BinaryOp_NotEqual
        left: Var#88<$dir_perms>
        right: Var#91
        result: Var#92
    Stmt_JumpIf
        cond: Var#92
        if: Block#37
        else: Block#38

Block#36
    Parent: Block#34
    Stmt_Jump
        target: Block#39

Block#37
    Parent: Block#35
    Var#93<$target> = Phi(Var#84<$target>)
    Var#94<$target_parent> = Phi(Var#83<$target_parent>)
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#94<$target_parent>
        result: Var#95
    Expr_BinaryOp_Plus
        left: Var#95
        right: LITERAL(1)
        result: Var#96
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#93<$target>
        args[1]: Var#96
        result: Var#97
    Expr_FuncCall
        name: LITERAL('explode')
        args[0]: LITERAL('/')
        args[1]: Var#97
        result: Var#98
    Expr_Assign
        var: Var#99<$folder_parts>
        expr: Var#98
        result: Var#100
    Expr_Assign
        var: Var#101<$i>
        expr: LITERAL(1)
        result: Var#102
    Expr_FuncCall
        name: LITERAL('count')
        args[0]: Var#99<$folder_parts>
        result: Var#103
    Expr_Assign
        var: Var#104<$c>
        expr: Var#103
        result: Var#105
    Stmt_Jump
        target: Block#40

Block#38
    Parent: Block#35
    Stmt_Jump
        target: Block#41

Block#39
    Parent: Block#36
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#106
    Terminal_Return
        expr: Var#106

Block#40
    Parent: Block#37
    Parent: Block#47
    Var#107<$i> = Phi(Var#101<$i>, Var#108<$i>)
    Var#109<$c> = Phi(Var#104<$c>)
    Var#110<$target_parent> = Phi(Var#94<$target_parent>, Var#111<$target_parent>)
    Var#112<$folder_parts> = Phi(Var#99<$folder_parts>, Var#113<$folder_parts>)
    Var#114<$dir_perms> = Phi(Var#88<$dir_perms>, Var#115<$dir_perms>)
    Expr_BinaryOp_SmallerOrEqual
        left: Var#107<$i>
        right: Var#109<$c>
        result: Var#116
    Stmt_JumpIf
        cond: Var#116
        if: Block#42
        else: Block#43

Block#41
    Parent: Block#45
    Parent: Block#38
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#117
    Terminal_Return
        expr: Var#117

Block#42
    Parent: Block#40
    Stmt_Jump
        target: Block#44

Block#43
    Parent: Block#40
    Stmt_Jump
        target: Block#45

Block#44
    Parent: Block#42
    Var#111<$target_parent> = Phi(Var#110<$target_parent>)
    Var#113<$folder_parts> = Phi(Var#112<$folder_parts>)
    Var#118<$i> = Phi(Var#107<$i>)
    Var#115<$dir_perms> = Phi(Var#114<$dir_perms>)
    Expr_BinaryOp_Concat
        left: Var#111<$target_parent>
        right: LITERAL('/')
        result: Var#119
    Expr_FuncCall
        name: LITERAL('array_slice')
        args[0]: Var#113<$folder_parts>
        args[1]: LITERAL(0)
        args[2]: Var#118<$i>
        result: Var#120
    Expr_FuncCall
        name: LITERAL('implode')
        args[0]: LITERAL('/')
        args[1]: Var#120
        result: Var#121
    Expr_BinaryOp_Concat
        left: Var#119
        right: Var#121
        result: Var#122
    Expr_FuncCall
        name: LITERAL('chmod')
        args[0]: Var#122
        args[1]: Var#115<$dir_perms>
        result: Var#123
    Stmt_Jump
        target: Block#46

Block#45
    Parent: Block#43
    Stmt_Jump
        target: Block#41

Block#46
    Parent: Block#44
    Stmt_Jump
        target: Block#47

Block#47
    Parent: Block#46
    Var#124<$i> = Phi(Var#118<$i>)
    Expr_BinaryOp_Plus
        left: Var#124<$i>
        right: LITERAL(1)
        result: Var#125
    Expr_Assign
        var: Var#108<$i>
        expr: Var#125
        result: Var#126
    Stmt_Jump
        target: Block#40

Function path_is_absolute():
Block#1
    Expr_Param
        name: LITERAL('path')
        result: Var#1<$path>
    Expr_FuncCall
        name: LITERAL('realpath')
        args[0]: Var#1<$path>
        result: Var#2
    Expr_BinaryOp_Equal
        left: Var#2
        right: Var#1<$path>
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#4
    Terminal_Return
        expr: Var#4

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Var#5<$path> = Phi(Var#1<$path>)
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#5<$path>
        result: Var#6
    Expr_BinaryOp_Equal
        left: Var#6
        right: LITERAL(0)
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Parent: Block#6
    Var#8 = Phi(LITERAL(true), Var#9)
    Var#10<$path> = Phi(Var#5<$path>, Var#11<$path>)
    Stmt_JumpIf
        cond: Var#8
        if: Block#7
        else: Block#8

Block#6
    Parent: Block#4
    Var#11<$path> = Phi(Var#5<$path>)
    Expr_ArrayDimFetch
        var: Var#11<$path>
        dim: LITERAL(0)
        result: Var#12
    Expr_BinaryOp_Equal
        left: Var#12
        right: LITERAL('.')
        result: Var#13
    Expr_Cast_Bool
        expr: Var#13
        result: Var#9
    Stmt_Jump
        target: Block#5

Block#7
    Parent: Block#5
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#14
    Terminal_Return
        expr: Var#14

Block#8
    Parent: Block#5
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#8
    Var#15<$path> = Phi(Var#10<$path>)
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('#^[a-zA-Z]:\\\\#')
        args[1]: Var#15<$path>
        result: Var#16
    Stmt_JumpIf
        cond: Var#16
        if: Block#10
        else: Block#11

Block#10
    Parent: Block#9
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#17
    Terminal_Return
        expr: Var#17

Block#11
    Parent: Block#9
    Stmt_Jump
        target: Block#12

Block#12
    Parent: Block#11
    Var#18<$path> = Phi(Var#15<$path>)
    Expr_ArrayDimFetch
        var: Var#18<$path>
        dim: LITERAL(0)
        result: Var#19
    Expr_BinaryOp_Equal
        left: Var#19
        right: LITERAL('/')
        result: Var#20
    Stmt_JumpIf
        cond: Var#20
        if: Block#13
        else: Block#14

Block#13
    Parent: Block#12
    Parent: Block#14
    Var#21 = Phi(LITERAL(true), Var#22)
    Terminal_Return
        expr: Var#21

Block#14
    Parent: Block#12
    Var#23<$path> = Phi(Var#18<$path>)
    Expr_ArrayDimFetch
        var: Var#23<$path>
        dim: LITERAL(0)
        result: Var#24
    Expr_BinaryOp_Equal
        left: Var#24
        right: LITERAL('\\')
        result: Var#25
    Expr_Cast_Bool
        expr: Var#25
        result: Var#22
    Stmt_Jump
        target: Block#13

Function path_join():
Block#1
    Expr_Param
        name: LITERAL('base')
        result: Var#1<$base>
    Expr_Param
        name: LITERAL('path')
        result: Var#2<$path>
    Expr_FuncCall
        name: LITERAL('path_is_absolute')
        args[0]: Var#2<$path>
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#4<$path> = Phi(Var#2<$path>)
    Terminal_Return
        expr: Var#4<$path>

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Var#5<$base> = Phi(Var#1<$base>)
    Var#6<$path> = Phi(Var#2<$path>)
    Expr_FuncCall
        name: LITERAL('rtrim')
        args[0]: Var#5<$base>
        args[1]: LITERAL('/')
        result: Var#7
    Expr_BinaryOp_Concat
        left: Var#7
        right: LITERAL('/')
        result: Var#8
    Expr_FuncCall
        name: LITERAL('ltrim')
        args[0]: Var#6<$path>
        args[1]: LITERAL('/')
        result: Var#9
    Expr_BinaryOp_Concat
        left: Var#8
        right: Var#9
        result: Var#10
    Terminal_Return
        expr: Var#10

Function wp_normalize_path():
Block#1
    Expr_Param
        name: LITERAL('path')
        result: Var#1<$path>
    Expr_Assign
        var: Var#2<$wrapper>
        expr: LITERAL('')
        result: Var#3
    Expr_FuncCall
        name: LITERAL('wp_is_stream')
        args[0]: Var#1<$path>
        result: Var#4
    Stmt_JumpIf
        cond: Var#4
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#5<$path> = Phi(Var#1<$path>)
    Expr_FuncCall
        name: LITERAL('explode')
        args[0]: LITERAL('://')
        args[1]: Var#5<$path>
        args[2]: LITERAL(2)
        result: Var#6
    Expr_ArrayDimFetch
        var: Var#6
        dim: LITERAL(0)
        result: Var#7
    Expr_Assign
        var: Var#8<$wrapper>
        expr: Var#7
        result: Var#9
    Expr_ArrayDimFetch
        var: Var#6
        dim: LITERAL(1)
        result: Var#10
    Expr_Assign
        var: Var#11<$path>
        expr: Var#10
        result: Var#12
    Expr_BinaryOp_Concat
        left: Var#8<$wrapper>
        right: LITERAL('://')
        result: Var#13
    Expr_Assign
        var: Var#14<$wrapper>
        expr: Var#13
        result: Var#15
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Var#16<$path> = Phi(Var#11<$path>, Var#1<$path>)
    Var#17<$wrapper> = Phi(Var#14<$wrapper>, Var#2<$wrapper>)
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: LITERAL('\\')
        args[1]: LITERAL('/')
        args[2]: Var#16<$path>
        result: Var#18
    Expr_Assign
        var: Var#19<$path>
        expr: Var#18
        result: Var#20
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('|(?<=.)/+|')
        args[1]: LITERAL('/')
        args[2]: Var#19<$path>
        result: Var#21
    Expr_Assign
        var: Var#22<$path>
        expr: Var#21
        result: Var#23
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#22<$path>
        args[1]: LITERAL(1)
        args[2]: LITERAL(1)
        result: Var#24
    Expr_BinaryOp_Identical
        left: LITERAL(':')
        right: Var#24
        result: Var#25
    Stmt_JumpIf
        cond: Var#25
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Var#26<$path> = Phi(Var#22<$path>)
    Expr_FuncCall
        name: LITERAL('ucfirst')
        args[0]: Var#26<$path>
        result: Var#27
    Expr_Assign
        var: Var#28<$path>
        expr: Var#27
        result: Var#29
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#5
    Parent: Block#6
    Var#30<$wrapper> = Phi(Var#17<$wrapper>)
    Var#31<$path> = Phi(Var#28<$path>, Var#22<$path>)
    Expr_BinaryOp_Concat
        left: Var#30<$wrapper>
        right: Var#31<$path>
        result: Var#32
    Terminal_Return
        expr: Var#32

Function get_temp_dir():
Block#1
    Terminal_StaticVar
        var: Var#1<static<&$temp>>
        defaultVar: LITERAL('')
        defaultBlock: Block#2
    Expr_FuncCall
        name: LITERAL('defined')
        args[0]: LITERAL('WP_TEMP_DIR')
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#3
        else: Block#4

Block#2

Block#3
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('WP_TEMP_DIR')
        result: Var#3
    Expr_FuncCall
        name: LITERAL('trailingslashit')
        args[0]: Var#3
        result: Var#4
    Terminal_Return
        expr: Var#4

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#4
    Var#5<$temp> = Phi(Var#1<static<&$temp>>)
    Stmt_JumpIf
        cond: Var#5<$temp>
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Var#6<$temp> = Phi(Var#5<$temp>)
    Expr_FuncCall
        name: LITERAL('trailingslashit')
        args[0]: Var#6<$temp>
        result: Var#7
    Terminal_Return
        expr: Var#7

Block#7
    Parent: Block#5
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#7
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('sys_get_temp_dir')
        result: Var#8
    Stmt_JumpIf
        cond: Var#8
        if: Block#9
        else: Block#10

Block#9
    Parent: Block#8
    Expr_FuncCall
        name: LITERAL('sys_get_temp_dir')
        result: Var#9
    Expr_Assign
        var: Var#10<$temp>
        expr: Var#9
        result: Var#11
    Stmt_Jump
        target: Block#11

Block#10
    Parent: Block#8
    Stmt_Jump
        target: Block#12

Block#11
    Parent: Block#9
    Var#12<$temp> = Phi(Var#10<$temp>)
    Expr_FuncCall
        name: LITERAL('is_dir')
        args[0]: Var#12<$temp>
        result: Var#13
    Stmt_Jump
        target: Block#13

Block#12
    Parent: Block#22
    Parent: Block#10
    Expr_FuncCall
        name: LITERAL('ini_get')
        args[0]: LITERAL('upload_tmp_dir')
        result: Var#14
    Expr_Assign
        var: Var#15<$temp>
        expr: Var#14
        result: Var#16
    Stmt_Jump
        target: Block#14

Block#13
    Parent: Block#11
    Stmt_JumpIf
        cond: Var#13
        if: Block#15
        else: Block#16

Block#14
    Parent: Block#12
    Var#17<$temp> = Phi(Var#15<$temp>)
    Expr_FuncCall
        name: LITERAL('is_dir')
        args[0]: Var#17<$temp>
        result: Var#18
    Stmt_Jump
        target: Block#17

Block#15
    Parent: Block#13
    Var#19<$temp> = Phi(Var#12<$temp>)
    Expr_FuncCall
        name: LITERAL('wp_is_writable')
        args[0]: Var#19<$temp>
        result: Var#20
    Expr_Cast_Bool
        expr: Var#20
        result: Var#21
    Stmt_Jump
        target: Block#16

Block#16
    Parent: Block#13
    Parent: Block#15
    Var#22 = Phi(LITERAL(false), Var#21)
    Var#23<$temp> = Phi(Var#12<$temp>, Var#19<$temp>)
    Stmt_JumpIf
        cond: Var#22
        if: Block#18
        else: Block#19

Block#17
    Parent: Block#14
    Stmt_JumpIf
        cond: Var#18
        if: Block#20
        else: Block#21

Block#18
    Parent: Block#16
    Var#24<$temp> = Phi(Var#23<$temp>)
    Expr_FuncCall
        name: LITERAL('trailingslashit')
        args[0]: Var#24<$temp>
        result: Var#25
    Terminal_Return
        expr: Var#25

Block#19
    Parent: Block#16
    Stmt_Jump
        target: Block#22

Block#20
    Parent: Block#17
    Var#26<$temp> = Phi(Var#17<$temp>)
    Expr_FuncCall
        name: LITERAL('wp_is_writable')
        args[0]: Var#26<$temp>
        result: Var#27
    Expr_Cast_Bool
        expr: Var#27
        result: Var#28
    Stmt_Jump
        target: Block#21

Block#21
    Parent: Block#17
    Parent: Block#20
    Var#29 = Phi(LITERAL(false), Var#28)
    Var#30<$temp> = Phi(Var#17<$temp>, Var#26<$temp>)
    Stmt_JumpIf
        cond: Var#29
        if: Block#23
        else: Block#24

Block#22
    Parent: Block#19
    Stmt_Jump
        target: Block#12

Block#23
    Parent: Block#21
    Var#31<$temp> = Phi(Var#30<$temp>)
    Expr_FuncCall
        name: LITERAL('trailingslashit')
        args[0]: Var#31<$temp>
        result: Var#32
    Terminal_Return
        expr: Var#32

Block#24
    Parent: Block#21
    Stmt_Jump
        target: Block#25

Block#25
    Parent: Block#24
    Expr_ConstFetch
        name: LITERAL('WP_CONTENT_DIR')
        result: Var#33
    Expr_BinaryOp_Concat
        left: Var#33
        right: LITERAL('/')
        result: Var#34
    Expr_Assign
        var: Var#35<$temp>
        expr: Var#34
        result: Var#36
    Expr_FuncCall
        name: LITERAL('is_dir')
        args[0]: Var#35<$temp>
        result: Var#37
    Stmt_JumpIf
        cond: Var#37
        if: Block#26
        else: Block#27

Block#26
    Parent: Block#25
    Var#38<$temp> = Phi(Var#35<$temp>)
    Expr_FuncCall
        name: LITERAL('wp_is_writable')
        args[0]: Var#38<$temp>
        result: Var#39
    Expr_Cast_Bool
        expr: Var#39
        result: Var#40
    Stmt_Jump
        target: Block#27

Block#27
    Parent: Block#25
    Parent: Block#26
    Var#41 = Phi(LITERAL(false), Var#40)
    Var#42<$temp> = Phi(Var#35<$temp>, Var#38<$temp>)
    Stmt_JumpIf
        cond: Var#41
        if: Block#28
        else: Block#29

Block#28
    Parent: Block#27
    Var#43<$temp> = Phi(Var#42<$temp>)
    Terminal_Return
        expr: Var#43<$temp>

Block#29
    Parent: Block#27
    Stmt_Jump
        target: Block#30

Block#30
    Parent: Block#29
    Terminal_Return
        expr: LITERAL('/tmp/')

Function wp_is_writable():
Block#1
    Expr_Param
        name: LITERAL('path')
        result: Var#1<$path>
    Expr_ConstFetch
        name: LITERAL('PHP_OS')
        result: Var#2
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#2
        args[1]: LITERAL(0)
        args[2]: LITERAL(3)
        result: Var#3
    Expr_FuncCall
        name: LITERAL('strtoupper')
        args[0]: Var#3
        result: Var#4
    Expr_BinaryOp_Identical
        left: LITERAL('WIN')
        right: Var#4
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#6<$path> = Phi(Var#1<$path>)
    Expr_FuncCall
        name: LITERAL('win_is_writable')
        args[0]: Var#6<$path>
        result: Var#7
    Terminal_Return
        expr: Var#7

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Var#8<$path> = Phi(Var#1<$path>)
    Expr_FuncCall
        name: LITERAL('is_writable')
        args[0]: Var#8<$path>
        result: Var#9
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#4
    Terminal_Return
        expr: Var#9

Function win_is_writable():
Block#1
    Expr_Param
        name: LITERAL('path')
        result: Var#1<$path>
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#1<$path>
        result: Var#2
    Expr_BinaryOp_Minus
        left: Var#2
        right: LITERAL(1)
        result: Var#3
    Expr_ArrayDimFetch
        var: Var#1<$path>
        dim: Var#3
        result: Var#4
    Expr_BinaryOp_Equal
        left: Var#4
        right: LITERAL('/')
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#6<$path> = Phi(Var#1<$path>)
    Expr_FuncCall
        name: LITERAL('mt_rand')
        result: Var#7
    Expr_FuncCall
        name: LITERAL('uniqid')
        args[0]: Var#7
        result: Var#8
    Expr_BinaryOp_Concat
        left: Var#6<$path>
        right: Var#8
        result: Var#9
    Expr_BinaryOp_Concat
        left: Var#9
        right: LITERAL('.tmp')
        result: Var#10
    Expr_FuncCall
        name: LITERAL('win_is_writable')
        args[0]: Var#10
        result: Var#11
    Terminal_Return
        expr: Var#11

Block#3
    Parent: Block#1
    Var#12<$path> = Phi(Var#1<$path>)
    Expr_FuncCall
        name: LITERAL('is_dir')
        args[0]: Var#12<$path>
        result: Var#13
    Stmt_JumpIf
        cond: Var#13
        if: Block#4
        else: Block#5

Block#4
    Parent: Block#3
    Var#14<$path> = Phi(Var#12<$path>)
    Expr_BinaryOp_Concat
        left: Var#14<$path>
        right: LITERAL('/')
        result: Var#15
    Expr_FuncCall
        name: LITERAL('mt_rand')
        result: Var#16
    Expr_FuncCall
        name: LITERAL('uniqid')
        args[0]: Var#16
        result: Var#17
    Expr_BinaryOp_Concat
        left: Var#15
        right: Var#17
        result: Var#18
    Expr_BinaryOp_Concat
        left: Var#18
        right: LITERAL('.tmp')
        result: Var#19
    Expr_FuncCall
        name: LITERAL('win_is_writable')
        args[0]: Var#19
        result: Var#20
    Terminal_Return
        expr: Var#20

Block#5
    Parent: Block#3
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#5
    Var#21<$path> = Phi(Var#12<$path>)
    Expr_FuncCall
        name: LITERAL('file_exists')
        args[0]: Var#21<$path>
        result: Var#22
    Expr_BooleanNot
        expr: Var#22
        result: Var#23
    Expr_Assign
        var: Var#24<$should_delete_tmp_file>
        expr: Var#23
        result: Var#25
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#6
    Var#26<$path> = Phi(Var#21<$path>)
    Expr_FuncCall
        name: LITERAL('fopen')
        args[0]: Var#26<$path>
        args[1]: LITERAL('a')
        result: Var#27
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#7
    Expr_Assign
        var: Var#28<$f>
        expr: Var#27
        result: Var#29
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#30
    Expr_BinaryOp_Identical
        left: Var#28<$f>
        right: Var#30
        result: Var#31
    Stmt_JumpIf
        cond: Var#31
        if: Block#9
        else: Block#10

Block#9
    Parent: Block#8
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#32
    Terminal_Return
        expr: Var#32

Block#10
    Parent: Block#8
    Stmt_Jump
        target: Block#11

Block#11
    Parent: Block#10
    Var#33<$f> = Phi(Var#28<$f>)
    Var#34<$should_delete_tmp_file> = Phi(Var#24<$should_delete_tmp_file>)
    Var#35<$path> = Phi(Var#26<$path>)
    Expr_FuncCall
        name: LITERAL('fclose')
        args[0]: Var#33<$f>
        result: Var#36
    Stmt_JumpIf
        cond: Var#34<$should_delete_tmp_file>
        if: Block#12
        else: Block#13

Block#12
    Parent: Block#11
    Var#37<$path> = Phi(Var#35<$path>)
    Expr_FuncCall
        name: LITERAL('unlink')
        args[0]: Var#37<$path>
        result: Var#38
    Stmt_Jump
        target: Block#14

Block#13
    Parent: Block#11
    Stmt_Jump
        target: Block#14

Block#14
    Parent: Block#12
    Parent: Block#13
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#39
    Terminal_Return
        expr: Var#39

Function wp_get_upload_dir():
Block#1
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#1
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#2
    Expr_FuncCall
        name: LITERAL('wp_upload_dir')
        args[0]: Var#1
        args[1]: Var#2
        result: Var#3
    Terminal_Return
        expr: Var#3

Function wp_upload_dir():
Block#1
    Expr_Param
        name: LITERAL('time')
        defaultVar: Var#1
        result: Var#2<$time>
        defaultBlock: Block#2
    Expr_Param
        name: LITERAL('create_dir')
        defaultVar: Var#3
        result: Var#4<$create_dir>
        defaultBlock: Block#3
    Expr_Param
        name: LITERAL('refresh_cache')
        defaultVar: Var#5
        result: Var#6<$refresh_cache>
        defaultBlock: Block#4
    Terminal_StaticVar
        var: Var#7<static<&$cache>>
        defaultVar: Var#8
        defaultBlock: Block#5
    Terminal_StaticVar
        var: Var#9<static<&$tested_paths>>
        defaultVar: Var#10
        defaultBlock: Block#6
    Expr_FuncCall
        name: LITERAL('get_current_blog_id')
        result: Var#11
    Expr_Cast_String
        expr: Var#2<$time>
        result: Var#12
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: LITERAL('%d-%s')
        args[1]: Var#11
        args[2]: Var#12
        result: Var#13
    Expr_Assign
        var: Var#14<$key>
        expr: Var#13
        result: Var#15
    Stmt_JumpIf
        cond: Var#6<$refresh_cache>
        if: Block#7
        else: Block#8

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#1

Block#3
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#3

Block#4
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#5

Block#5
    Expr_Array
        result: Var#8

Block#6
    Expr_Array
        result: Var#10

Block#7
    Parent: Block#1
    Parent: Block#8
    Var#16 = Phi(LITERAL(true), Var#17)
    Var#18<$time> = Phi(Var#2<$time>)
    Var#19<$cache> = Phi(Var#7<static<&$cache>>, Var#20<$cache>)
    Var#21<$key> = Phi(Var#14<$key>, Var#22<$key>)
    Var#23<$create_dir> = Phi(Var#4<$create_dir>)
    Var#24<$tested_paths> = Phi(Var#9<static<&$tested_paths>>)
    Stmt_JumpIf
        cond: Var#16
        if: Block#9
        else: Block#10

Block#8
    Parent: Block#1
    Var#20<$cache> = Phi(Var#7<static<&$cache>>)
    Var#22<$key> = Phi(Var#14<$key>)
    Expr_ArrayDimFetch
        var: Var#20<$cache>
        dim: Var#22<$key>
        result: Var#25
    Expr_Empty
        expr: Var#25
        result: Var#26
    Expr_Cast_Bool
        expr: Var#26
        result: Var#17
    Stmt_Jump
        target: Block#7

Block#9
    Parent: Block#7
    Var#27<$time> = Phi(Var#18<$time>)
    Var#28<$cache> = Phi(Var#19<$cache>)
    Var#29<$key> = Phi(Var#21<$key>)
    Expr_FuncCall
        name: LITERAL('_wp_upload_dir')
        args[0]: Var#27<$time>
        result: Var#30
    Expr_ArrayDimFetch
        var: Var#28<$cache>
        dim: Var#29<$key>
        result: Var#31
    Expr_Assign
        var: Var#31
        expr: Var#30
        result: Var#32
    Stmt_Jump
        target: Block#11

Block#10
    Parent: Block#7
    Stmt_Jump
        target: Block#11

Block#11
    Parent: Block#9
    Parent: Block#10
    Var#33<$cache> = Phi(Var#28<$cache>, Var#19<$cache>)
    Var#34<$key> = Phi(Var#29<$key>, Var#21<$key>)
    Var#35<$create_dir> = Phi(Var#23<$create_dir>)
    Var#36<$tested_paths> = Phi(Var#24<$tested_paths>)
    Expr_ArrayDimFetch
        var: Var#33<$cache>
        dim: Var#34<$key>
        result: Var#37
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('upload_dir')
        args[1]: Var#37
        result: Var#38
    Expr_Assign
        var: Var#39<$uploads>
        expr: Var#38
        result: Var#40
    Stmt_JumpIf
        cond: Var#35<$create_dir>
        if: Block#12
        else: Block#13

Block#12
    Parent: Block#11
    Var#41<$uploads> = Phi(Var#39<$uploads>)
    Var#42<$tested_paths> = Phi(Var#36<$tested_paths>)
    Expr_ArrayDimFetch
        var: Var#41<$uploads>
        dim: LITERAL('path')
        result: Var#43
    Expr_Assign
        var: Var#44<$path>
        expr: Var#43
        result: Var#45
    Expr_FuncCall
        name: LITERAL('array_key_exists')
        args[0]: Var#44<$path>
        args[1]: Var#42<$tested_paths>
        result: Var#46
    Stmt_JumpIf
        cond: Var#46
        if: Block#14
        else: Block#15

Block#13
    Parent: Block#11
    Stmt_Jump
        target: Block#16

Block#14
    Parent: Block#12
    Var#47<$tested_paths> = Phi(Var#42<$tested_paths>)
    Var#48<$path> = Phi(Var#44<$path>)
    Var#49<$uploads> = Phi(Var#41<$uploads>)
    Expr_ArrayDimFetch
        var: Var#47<$tested_paths>
        dim: Var#48<$path>
        result: Var#50
    Expr_ArrayDimFetch
        var: Var#49<$uploads>
        dim: LITERAL('error')
        result: Var#51
    Expr_Assign
        var: Var#51
        expr: Var#50
        result: Var#52
    Stmt_Jump
        target: Block#17

Block#15
    Parent: Block#12
    Var#53<$path> = Phi(Var#44<$path>)
    Expr_FuncCall
        name: LITERAL('wp_mkdir_p')
        args[0]: Var#53<$path>
        result: Var#54
    Expr_BooleanNot
        expr: Var#54
        result: Var#55
    Stmt_JumpIf
        cond: Var#55
        if: Block#18
        else: Block#19

Block#16
    Parent: Block#17
    Parent: Block#13
    Var#56<$uploads> = Phi(Var#57<$uploads>, Var#39<$uploads>)
    Terminal_Return
        expr: Var#56<$uploads>

Block#17
    Parent: Block#14
    Parent: Block#22
    Var#57<$uploads> = Phi(Var#49<$uploads>, Var#58<$uploads>)
    Stmt_Jump
        target: Block#16

Block#18
    Parent: Block#15
    Var#59<$uploads> = Phi(Var#41<$uploads>)
    Expr_ArrayDimFetch
        var: Var#59<$uploads>
        dim: LITERAL('basedir')
        result: Var#60
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#61
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#60
        args[1]: Var#61
        result: Var#62
    Expr_BinaryOp_Identical
        left: LITERAL(0)
        right: Var#62
        result: Var#63
    Stmt_JumpIf
        cond: Var#63
        if: Block#20
        else: Block#21

Block#19
    Parent: Block#15
    Stmt_Jump
        target: Block#22

Block#20
    Parent: Block#18
    Var#64<$uploads> = Phi(Var#59<$uploads>)
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#65
    Expr_ArrayDimFetch
        var: Var#64<$uploads>
        dim: LITERAL('basedir')
        result: Var#66
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: Var#65
        args[1]: LITERAL('')
        args[2]: Var#66
        result: Var#67
    Expr_ArrayDimFetch
        var: Var#64<$uploads>
        dim: LITERAL('subdir')
        result: Var#68
    Expr_BinaryOp_Concat
        left: Var#67
        right: Var#68
        result: Var#69
    Expr_Assign
        var: Var#70<$error_path>
        expr: Var#69
        result: Var#71
    Stmt_Jump
        target: Block#23

Block#21
    Parent: Block#18
    Var#72<$uploads> = Phi(Var#59<$uploads>)
    Expr_ArrayDimFetch
        var: Var#72<$uploads>
        dim: LITERAL('basedir')
        result: Var#73
    Expr_FuncCall
        name: LITERAL('basename')
        args[0]: Var#73
        result: Var#74
    Expr_ArrayDimFetch
        var: Var#72<$uploads>
        dim: LITERAL('subdir')
        result: Var#75
    Expr_BinaryOp_Concat
        left: Var#74
        right: Var#75
        result: Var#76
    Expr_Assign
        var: Var#77<$error_path>
        expr: Var#76
        result: Var#78
    Stmt_Jump
        target: Block#23

Block#22
    Parent: Block#23
    Parent: Block#19
    Var#58<$uploads> = Phi(Var#79<$uploads>, Var#41<$uploads>)
    Var#80<$tested_paths> = Phi(Var#81<$tested_paths>, Var#42<$tested_paths>)
    Var#82<$path> = Phi(Var#83<$path>, Var#53<$path>)
    Expr_ArrayDimFetch
        var: Var#58<$uploads>
        dim: LITERAL('error')
        result: Var#84
    Expr_ArrayDimFetch
        var: Var#80<$tested_paths>
        dim: Var#82<$path>
        result: Var#85
    Expr_Assign
        var: Var#85
        expr: Var#84
        result: Var#86
    Stmt_Jump
        target: Block#17

Block#23
    Parent: Block#20
    Parent: Block#21
    Var#87<$error_path> = Phi(Var#70<$error_path>, Var#77<$error_path>)
    Var#79<$uploads> = Phi(Var#64<$uploads>, Var#72<$uploads>)
    Var#81<$tested_paths> = Phi(Var#42<$tested_paths>)
    Var#83<$path> = Phi(Var#53<$path>)
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('Unable to create directory %s. Is its parent directory writable by the server?')
        result: Var#88
    Expr_FuncCall
        name: LITERAL('esc_html')
        args[0]: Var#87<$error_path>
        result: Var#89
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: Var#88
        args[1]: Var#89
        result: Var#90
    Expr_ArrayDimFetch
        var: Var#79<$uploads>
        dim: LITERAL('error')
        result: Var#91
    Expr_Assign
        var: Var#91
        expr: Var#90
        result: Var#92
    Stmt_Jump
        target: Block#22

Function _wp_upload_dir():
Block#1
    Expr_Param
        name: LITERAL('time')
        defaultVar: Var#1
        result: Var#2<$time>
        defaultBlock: Block#2
    Expr_FuncCall
        name: LITERAL('get_option')
        args[0]: LITERAL('siteurl')
        result: Var#3
    Expr_Assign
        var: Var#4<$siteurl>
        expr: Var#3
        result: Var#5
    Expr_FuncCall
        name: LITERAL('get_option')
        args[0]: LITERAL('upload_path')
        result: Var#6
    Expr_FuncCall
        name: LITERAL('trim')
        args[0]: Var#6
        result: Var#7
    Expr_Assign
        var: Var#8<$upload_path>
        expr: Var#7
        result: Var#9
    Expr_Empty
        expr: Var#8<$upload_path>
        result: Var#10
    Stmt_JumpIf
        cond: Var#10
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#1

Block#3
    Parent: Block#1
    Parent: Block#4
    Var#11 = Phi(LITERAL(true), Var#12)
    Var#13<$upload_path> = Phi(Var#8<$upload_path>, Var#14<$upload_path>)
    Var#15<$siteurl> = Phi(Var#4<$siteurl>)
    Var#16<$time> = Phi(Var#2<$time>)
    Stmt_JumpIf
        cond: Var#11
        if: Block#5
        else: Block#6

Block#4
    Parent: Block#1
    Var#14<$upload_path> = Phi(Var#8<$upload_path>)
    Expr_BinaryOp_Equal
        left: LITERAL('wp-content/uploads')
        right: Var#14<$upload_path>
        result: Var#17
    Expr_Cast_Bool
        expr: Var#17
        result: Var#12
    Stmt_Jump
        target: Block#3

Block#5
    Parent: Block#3
    Expr_ConstFetch
        name: LITERAL('WP_CONTENT_DIR')
        result: Var#18
    Expr_BinaryOp_Concat
        left: Var#18
        right: LITERAL('/uploads')
        result: Var#19
    Expr_Assign
        var: Var#20<$dir>
        expr: Var#19
        result: Var#21
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#3
    Var#22<$upload_path> = Phi(Var#13<$upload_path>)
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#23
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#22<$upload_path>
        args[1]: Var#23
        result: Var#24
    Expr_BinaryOp_NotIdentical
        left: LITERAL(0)
        right: Var#24
        result: Var#25
    Stmt_JumpIf
        cond: Var#25
        if: Block#8
        else: Block#9

Block#7
    Parent: Block#5
    Parent: Block#8
    Parent: Block#9
    Var#26<$upload_path> = Phi(Var#13<$upload_path>, Var#27<$upload_path>, Var#28<$upload_path>)
    Var#29<$dir> = Phi(Var#20<$dir>, Var#30<$dir>, Var#31<$dir>)
    Var#32<$siteurl> = Phi(Var#15<$siteurl>)
    Var#33<$time> = Phi(Var#16<$time>)
    Expr_FuncCall
        name: LITERAL('get_option')
        args[0]: LITERAL('upload_url_path')
        result: Var#34
    Expr_Assign
        var: Var#35<$url>
        expr: Var#34
        result: Var#36
    Expr_BooleanNot
        expr: Var#36
        result: Var#37
    Stmt_JumpIf
        cond: Var#37
        if: Block#10
        else: Block#11

Block#8
    Parent: Block#6
    Var#27<$upload_path> = Phi(Var#22<$upload_path>)
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#38
    Expr_FuncCall
        name: LITERAL('path_join')
        args[0]: Var#38
        args[1]: Var#27<$upload_path>
        result: Var#39
    Expr_Assign
        var: Var#30<$dir>
        expr: Var#39
        result: Var#40
    Stmt_Jump
        target: Block#7

Block#9
    Parent: Block#6
    Var#28<$upload_path> = Phi(Var#22<$upload_path>)
    Expr_Assign
        var: Var#31<$dir>
        expr: Var#28<$upload_path>
        result: Var#41
    Stmt_Jump
        target: Block#7

Block#10
    Parent: Block#7
    Var#42<$upload_path> = Phi(Var#26<$upload_path>)
    Expr_Empty
        expr: Var#42<$upload_path>
        result: Var#43
    Stmt_JumpIf
        cond: Var#43
        if: Block#12
        else: Block#13

Block#11
    Parent: Block#7
    Stmt_Jump
        target: Block#14

Block#12
    Parent: Block#10
    Parent: Block#13
    Var#44 = Phi(LITERAL(true), Var#45)
    Var#46<$upload_path> = Phi(Var#42<$upload_path>, Var#47<$upload_path>)
    Var#48<$dir> = Phi(Var#29<$dir>)
    Var#49<$siteurl> = Phi(Var#32<$siteurl>)
    Var#50<$time> = Phi(Var#33<$time>)
    Stmt_JumpIf
        cond: Var#44
        if: Block#15
        else: Block#16

Block#13
    Parent: Block#10
    Var#47<$upload_path> = Phi(Var#42<$upload_path>)
    Expr_BinaryOp_Equal
        left: LITERAL('wp-content/uploads')
        right: Var#47<$upload_path>
        result: Var#51
    Expr_Cast_Bool
        expr: Var#51
        result: Var#45
    Stmt_Jump
        target: Block#12

Block#14
    Parent: Block#25
    Parent: Block#11
    Var#52<$siteurl> = Phi(Var#53<$siteurl>, Var#32<$siteurl>)
    Var#54<$dir> = Phi(Var#55<$dir>, Var#29<$dir>)
    Var#56<$url> = Phi(Var#57<$url>, Var#35<$url>)
    Var#58<$time> = Phi(Var#59<$time>, Var#33<$time>)
    Expr_FuncCall
        name: LITERAL('defined')
        args[0]: LITERAL('UPLOADS')
        result: Var#60
    Stmt_JumpIf
        cond: Var#60
        if: Block#17
        else: Block#18

Block#15
    Parent: Block#12
    Parent: Block#16
    Var#61 = Phi(LITERAL(true), Var#62)
    Var#63<$siteurl> = Phi(Var#49<$siteurl>)
    Var#64<$upload_path> = Phi(Var#46<$upload_path>, Var#65<$upload_path>)
    Var#66<$dir> = Phi(Var#48<$dir>, Var#67<$dir>)
    Var#68<$time> = Phi(Var#50<$time>)
    Stmt_JumpIf
        cond: Var#61
        if: Block#19
        else: Block#20

Block#16
    Parent: Block#12
    Var#65<$upload_path> = Phi(Var#46<$upload_path>)
    Var#67<$dir> = Phi(Var#48<$dir>)
    Expr_BinaryOp_Equal
        left: Var#65<$upload_path>
        right: Var#67<$dir>
        result: Var#69
    Expr_Cast_Bool
        expr: Var#69
        result: Var#62
    Stmt_Jump
        target: Block#15

Block#17
    Parent: Block#14
    Expr_FuncCall
        name: LITERAL('is_multisite')
        result: Var#70
    Stmt_JumpIf
        cond: Var#70
        if: Block#21
        else: Block#22

Block#18
    Parent: Block#14
    Parent: Block#22
    Var#71 = Phi(LITERAL(false), Var#72)
    Var#73<$siteurl> = Phi(Var#52<$siteurl>, Var#74<$siteurl>)
    Var#75<$dir> = Phi(Var#54<$dir>, Var#76<$dir>)
    Var#77<$url> = Phi(Var#56<$url>, Var#78<$url>)
    Var#79<$time> = Phi(Var#58<$time>, Var#80<$time>)
    Stmt_JumpIf
        cond: Var#71
        if: Block#23
        else: Block#24

Block#19
    Parent: Block#15
    Expr_ConstFetch
        name: LITERAL('WP_CONTENT_URL')
        result: Var#81
    Expr_BinaryOp_Concat
        left: Var#81
        right: LITERAL('/uploads')
        result: Var#82
    Expr_Assign
        var: Var#83<$url>
        expr: Var#82
        result: Var#84
    Stmt_Jump
        target: Block#25

Block#20
    Parent: Block#15
    Var#85<$siteurl> = Phi(Var#63<$siteurl>)
    Var#86<$upload_path> = Phi(Var#64<$upload_path>)
    Expr_FuncCall
        name: LITERAL('trailingslashit')
        args[0]: Var#85<$siteurl>
        result: Var#87
    Expr_BinaryOp_Concat
        left: Var#87
        right: Var#86<$upload_path>
        result: Var#88
    Expr_Assign
        var: Var#89<$url>
        expr: Var#88
        result: Var#90
    Stmt_Jump
        target: Block#25

Block#21
    Parent: Block#17
    Expr_FuncCall
        name: LITERAL('get_site_option')
        args[0]: LITERAL('ms_files_rewriting')
        result: Var#91
    Expr_Cast_Bool
        expr: Var#91
        result: Var#92
    Stmt_Jump
        target: Block#22

Block#22
    Parent: Block#17
    Parent: Block#21
    Var#93 = Phi(LITERAL(false), Var#92)
    Var#74<$siteurl> = Phi(Var#52<$siteurl>)
    Var#76<$dir> = Phi(Var#54<$dir>)
    Var#78<$url> = Phi(Var#56<$url>)
    Var#80<$time> = Phi(Var#58<$time>)
    Expr_BooleanNot
        expr: Var#93
        result: Var#94
    Expr_Cast_Bool
        expr: Var#94
        result: Var#72
    Stmt_Jump
        target: Block#18

Block#23
    Parent: Block#18
    Var#95<$siteurl> = Phi(Var#73<$siteurl>)
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#96
    Expr_ConstFetch
        name: LITERAL('UPLOADS')
        result: Var#97
    Expr_BinaryOp_Concat
        left: Var#96
        right: Var#97
        result: Var#98
    Expr_Assign
        var: Var#99<$dir>
        expr: Var#98
        result: Var#100
    Expr_FuncCall
        name: LITERAL('trailingslashit')
        args[0]: Var#95<$siteurl>
        result: Var#101
    Expr_ConstFetch
        name: LITERAL('UPLOADS')
        result: Var#102
    Expr_BinaryOp_Concat
        left: Var#101
        right: Var#102
        result: Var#103
    Expr_Assign
        var: Var#104<$url>
        expr: Var#103
        result: Var#105
    Stmt_Jump
        target: Block#26

Block#24
    Parent: Block#18
    Stmt_Jump
        target: Block#26

Block#25
    Parent: Block#19
    Parent: Block#20
    Var#53<$siteurl> = Phi(Var#63<$siteurl>, Var#85<$siteurl>)
    Var#55<$dir> = Phi(Var#66<$dir>)
    Var#57<$url> = Phi(Var#83<$url>, Var#89<$url>)
    Var#59<$time> = Phi(Var#68<$time>)
    Stmt_Jump
        target: Block#14

Block#26
    Parent: Block#23
    Parent: Block#24
    Var#106<$dir> = Phi(Var#99<$dir>, Var#75<$dir>)
    Var#107<$url> = Phi(Var#104<$url>, Var#77<$url>)
    Var#108<$siteurl> = Phi(Var#95<$siteurl>, Var#73<$siteurl>)
    Var#109<$time> = Phi(Var#79<$time>)
    Expr_FuncCall
        name: LITERAL('is_multisite')
        result: Var#110
    Stmt_JumpIf
        cond: Var#110
        if: Block#27
        else: Block#28

Block#27
    Parent: Block#26
    Expr_FuncCall
        name: LITERAL('is_main_network')
        result: Var#111
    Stmt_JumpIf
        cond: Var#111
        if: Block#29
        else: Block#30

Block#28
    Parent: Block#26
    Parent: Block#34
    Var#112 = Phi(LITERAL(false), Var#113)
    Var#114<$dir> = Phi(Var#106<$dir>, Var#115<$dir>)
    Var#116<$url> = Phi(Var#107<$url>, Var#117<$url>)
    Var#118<$siteurl> = Phi(Var#108<$siteurl>, Var#119<$siteurl>)
    Var#120<$time> = Phi(Var#109<$time>, Var#121<$time>)
    Stmt_JumpIf
        cond: Var#112
        if: Block#31
        else: Block#32

Block#29
    Parent: Block#27
    Expr_FuncCall
        name: LITERAL('is_main_site')
        result: Var#122
    Expr_Cast_Bool
        expr: Var#122
        result: Var#123
    Stmt_Jump
        target: Block#30

Block#30
    Parent: Block#27
    Parent: Block#29
    Var#124 = Phi(LITERAL(false), Var#123)
    Var#125<$dir> = Phi(Var#106<$dir>)
    Var#126<$url> = Phi(Var#107<$url>)
    Var#127<$siteurl> = Phi(Var#108<$siteurl>)
    Var#128<$time> = Phi(Var#109<$time>)
    Stmt_JumpIf
        cond: Var#124
        if: Block#33
        else: Block#34

Block#31
    Parent: Block#28
    Expr_FuncCall
        name: LITERAL('get_site_option')
        args[0]: LITERAL('ms_files_rewriting')
        result: Var#129
    Expr_BooleanNot
        expr: Var#129
        result: Var#130
    Stmt_JumpIf
        cond: Var#130
        if: Block#35
        else: Block#36

Block#32
    Parent: Block#28
    Stmt_Jump
        target: Block#37

Block#33
    Parent: Block#30
    Expr_FuncCall
        name: LITERAL('defined')
        args[0]: LITERAL('MULTISITE')
        result: Var#131
    Expr_Cast_Bool
        expr: Var#131
        result: Var#132
    Stmt_Jump
        target: Block#34

Block#34
    Parent: Block#30
    Parent: Block#33
    Var#133 = Phi(LITERAL(false), Var#132)
    Var#115<$dir> = Phi(Var#125<$dir>)
    Var#117<$url> = Phi(Var#126<$url>)
    Var#119<$siteurl> = Phi(Var#127<$siteurl>)
    Var#121<$time> = Phi(Var#128<$time>)
    Expr_BooleanNot
        expr: Var#133
        result: Var#134
    Expr_Cast_Bool
        expr: Var#134
        result: Var#113
    Stmt_Jump
        target: Block#28

Block#35
    Parent: Block#31
    Expr_FuncCall
        name: LITERAL('defined')
        args[0]: LITERAL('MULTISITE')
        result: Var#135
    Stmt_JumpIf
        cond: Var#135
        if: Block#38
        else: Block#39

Block#36
    Parent: Block#31
    Expr_FuncCall
        name: LITERAL('defined')
        args[0]: LITERAL('UPLOADS')
        result: Var#136
    Stmt_JumpIf
        cond: Var#136
        if: Block#40
        else: Block#41

Block#37
    Parent: Block#50
    Parent: Block#32
    Var#137<$dir> = Phi(Var#138<$dir>, Var#114<$dir>)
    Var#139<$url> = Phi(Var#140<$url>, Var#116<$url>)
    Var#141<$time> = Phi(Var#142<$time>, Var#120<$time>)
    Expr_Assign
        var: Var#143<$basedir>
        expr: Var#137<$dir>
        result: Var#144
    Expr_Assign
        var: Var#145<$baseurl>
        expr: Var#139<$url>
        result: Var#146
    Expr_Assign
        var: Var#147<$subdir>
        expr: LITERAL('')
        result: Var#148
    Expr_FuncCall
        name: LITERAL('get_option')
        args[0]: LITERAL('uploads_use_yearmonth_folders')
        result: Var#149
    Stmt_JumpIf
        cond: Var#149
        if: Block#42
        else: Block#43

Block#38
    Parent: Block#35
    Expr_FuncCall
        name: LITERAL('get_current_blog_id')
        result: Var#150
    Expr_BinaryOp_Concat
        left: LITERAL('/sites/')
        right: Var#150
        result: Var#151
    Expr_Assign
        var: Var#152<$ms_dir>
        expr: Var#151
        result: Var#153
    Stmt_Jump
        target: Block#44

Block#39
    Parent: Block#35
    Expr_FuncCall
        name: LITERAL('get_current_blog_id')
        result: Var#154
    Expr_BinaryOp_Concat
        left: LITERAL('/')
        right: Var#154
        result: Var#155
    Expr_Assign
        var: Var#156<$ms_dir>
        expr: Var#155
        result: Var#157
    Stmt_Jump
        target: Block#44

Block#40
    Parent: Block#36
    Expr_FuncCall
        name: LITERAL('ms_is_switched')
        result: Var#158
    Expr_BooleanNot
        expr: Var#158
        result: Var#159
    Expr_Cast_Bool
        expr: Var#159
        result: Var#160
    Stmt_Jump
        target: Block#41

Block#41
    Parent: Block#36
    Parent: Block#40
    Var#161 = Phi(LITERAL(false), Var#160)
    Var#162<$siteurl> = Phi(Var#118<$siteurl>)
    Var#163<$dir> = Phi(Var#114<$dir>)
    Var#164<$url> = Phi(Var#116<$url>)
    Var#165<$time> = Phi(Var#120<$time>)
    Stmt_JumpIf
        cond: Var#161
        if: Block#45
        else: Block#46

Block#42
    Parent: Block#37
    Var#166<$time> = Phi(Var#141<$time>)
    Expr_BooleanNot
        expr: Var#166<$time>
        result: Var#167
    Stmt_JumpIf
        cond: Var#167
        if: Block#47
        else: Block#48

Block#43
    Parent: Block#37
    Stmt_Jump
        target: Block#49

Block#44
    Parent: Block#38
    Parent: Block#39
    Var#168<$dir> = Phi(Var#114<$dir>)
    Var#169<$ms_dir> = Phi(Var#152<$ms_dir>, Var#156<$ms_dir>)
    Var#170<$url> = Phi(Var#116<$url>)
    Var#171<$time> = Phi(Var#120<$time>)
    Expr_BinaryOp_Concat
        left: Var#168<$dir>
        right: Var#169<$ms_dir>
        result: Var#172
    Expr_Assign
        var: Var#173<$dir>
        expr: Var#172
        result: Var#174
    Expr_BinaryOp_Concat
        left: Var#170<$url>
        right: Var#169<$ms_dir>
        result: Var#175
    Expr_Assign
        var: Var#176<$url>
        expr: Var#175
        result: Var#177
    Stmt_Jump
        target: Block#50

Block#45
    Parent: Block#41
    Expr_FuncCall
        name: LITERAL('defined')
        args[0]: LITERAL('BLOGUPLOADDIR')
        result: Var#178
    Stmt_JumpIf
        cond: Var#178
        if: Block#51
        else: Block#52

Block#46
    Parent: Block#41
    Stmt_Jump
        target: Block#50

Block#47
    Parent: Block#42
    Expr_FuncCall
        name: LITERAL('current_time')
        args[0]: LITERAL('mysql')
        result: Var#179
    Expr_Assign
        var: Var#180<$time>
        expr: Var#179
        result: Var#181
    Stmt_Jump
        target: Block#53

Block#48
    Parent: Block#42
    Stmt_Jump
        target: Block#53

Block#49
    Parent: Block#53
    Parent: Block#43
    Var#182<$dir> = Phi(Var#183<$dir>, Var#137<$dir>)
    Var#184<$subdir> = Phi(Var#185<$subdir>, Var#147<$subdir>)
    Var#186<$url> = Phi(Var#187<$url>, Var#139<$url>)
    Var#188<$basedir> = Phi(Var#189<$basedir>, Var#143<$basedir>)
    Var#190<$baseurl> = Phi(Var#191<$baseurl>, Var#145<$baseurl>)
    Expr_BinaryOp_Concat
        left: Var#182<$dir>
        right: Var#184<$subdir>
        result: Var#192
    Expr_Assign
        var: Var#193<$dir>
        expr: Var#192
        result: Var#194
    Expr_BinaryOp_Concat
        left: Var#186<$url>
        right: Var#184<$subdir>
        result: Var#195
    Expr_Assign
        var: Var#196<$url>
        expr: Var#195
        result: Var#197
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#198
    Expr_Array
        keys[0]: LITERAL('path')
        keys[1]: LITERAL('url')
        keys[2]: LITERAL('subdir')
        keys[3]: LITERAL('basedir')
        keys[4]: LITERAL('baseurl')
        keys[5]: LITERAL('error')
        values[0]: Var#193<$dir>
        values[1]: Var#196<$url>
        values[2]: Var#184<$subdir>
        values[3]: Var#188<$basedir>
        values[4]: Var#190<$baseurl>
        values[5]: Var#198
        result: Var#199
    Terminal_Return
        expr: Var#199

Block#50
    Parent: Block#44
    Parent: Block#54
    Parent: Block#46
    Var#138<$dir> = Phi(Var#173<$dir>, Var#200<$dir>, Var#163<$dir>)
    Var#140<$url> = Phi(Var#176<$url>, Var#201<$url>, Var#164<$url>)
    Var#142<$time> = Phi(Var#171<$time>, Var#202<$time>, Var#165<$time>)
    Stmt_Jump
        target: Block#37

Block#51
    Parent: Block#45
    Expr_ConstFetch
        name: LITERAL('BLOGUPLOADDIR')
        result: Var#203
    Expr_FuncCall
        name: LITERAL('untrailingslashit')
        args[0]: Var#203
        result: Var#204
    Expr_Assign
        var: Var#205<$dir>
        expr: Var#204
        result: Var#206
    Stmt_Jump
        target: Block#54

Block#52
    Parent: Block#45
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#207
    Expr_ConstFetch
        name: LITERAL('UPLOADS')
        result: Var#208
    Expr_BinaryOp_Concat
        left: Var#207
        right: Var#208
        result: Var#209
    Expr_Assign
        var: Var#210<$dir>
        expr: Var#209
        result: Var#211
    Stmt_Jump
        target: Block#54

Block#53
    Parent: Block#47
    Parent: Block#48
    Var#212<$time> = Phi(Var#180<$time>, Var#166<$time>)
    Var#183<$dir> = Phi(Var#137<$dir>)
    Var#187<$url> = Phi(Var#139<$url>)
    Var#189<$basedir> = Phi(Var#143<$basedir>)
    Var#191<$baseurl> = Phi(Var#145<$baseurl>)
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#212<$time>
        args[1]: LITERAL(0)
        args[2]: LITERAL(4)
        result: Var#213
    Expr_Assign
        var: Var#214<$y>
        expr: Var#213
        result: Var#215
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#212<$time>
        args[1]: LITERAL(5)
        args[2]: LITERAL(2)
        result: Var#216
    Expr_Assign
        var: Var#217<$m>
        expr: Var#216
        result: Var#218
    Expr_ConcatList
        list[0]: LITERAL('/')
        list[1]: Var#214<$y>
        list[2]: LITERAL('/')
        list[3]: Var#217<$m>
        result: Var#219
    Expr_Assign
        var: Var#185<$subdir>
        expr: Var#219
        result: Var#220
    Stmt_Jump
        target: Block#49

Block#54
    Parent: Block#51
    Parent: Block#52
    Var#221<$siteurl> = Phi(Var#162<$siteurl>)
    Var#200<$dir> = Phi(Var#205<$dir>, Var#210<$dir>)
    Var#202<$time> = Phi(Var#165<$time>)
    Expr_FuncCall
        name: LITERAL('trailingslashit')
        args[0]: Var#221<$siteurl>
        result: Var#222
    Expr_BinaryOp_Concat
        left: Var#222
        right: LITERAL('files')
        result: Var#223
    Expr_Assign
        var: Var#201<$url>
        expr: Var#223
        result: Var#224
    Stmt_Jump
        target: Block#50

Function wp_unique_filename():
Block#1
    Expr_Param
        name: LITERAL('dir')
        result: Var#1<$dir>
    Expr_Param
        name: LITERAL('filename')
        result: Var#2<$filename>
    Expr_Param
        name: LITERAL('unique_filename_callback')
        defaultVar: Var#3
        result: Var#4<$unique_filename_callback>
        defaultBlock: Block#2
    Expr_FuncCall
        name: LITERAL('sanitize_file_name')
        args[0]: Var#2<$filename>
        result: Var#5
    Expr_Assign
        var: Var#6<$filename>
        expr: Var#5
        result: Var#7
    Expr_FuncCall
        name: LITERAL('pathinfo')
        args[0]: Var#6<$filename>
        result: Var#8
    Expr_Assign
        var: Var#9<$info>
        expr: Var#8
        result: Var#10
    Expr_ArrayDimFetch
        var: Var#9<$info>
        dim: LITERAL('extension')
        result: Var#11
    Expr_Empty
        expr: Var#11
        result: Var#12
    Expr_BooleanNot
        expr: Var#12
        result: Var#13
    Stmt_JumpIf
        cond: Var#13
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#3

Block#3
    Parent: Block#1
    Var#14<$info> = Phi(Var#9<$info>)
    Expr_ArrayDimFetch
        var: Var#14<$info>
        dim: LITERAL('extension')
        result: Var#15
    Expr_BinaryOp_Concat
        left: LITERAL('.')
        right: Var#15
        result: Var#16
    Expr_Assign
        var: Var#17
        expr: Var#16
        result: Var#18
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Expr_Assign
        var: Var#19
        expr: LITERAL('')
        result: Var#20
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Var#21 = Phi(Var#17, Var#19)
    Var#22<$filename> = Phi(Var#6<$filename>)
    Var#23<$unique_filename_callback> = Phi(Var#4<$unique_filename_callback>)
    Var#24<$dir> = Phi(Var#1<$dir>)
    Expr_Assign
        var: Var#25<$ext>
        expr: Var#21
        result: Var#26
    Expr_FuncCall
        name: LITERAL('basename')
        args[0]: Var#22<$filename>
        args[1]: Var#25<$ext>
        result: Var#27
    Expr_Assign
        var: Var#28<$name>
        expr: Var#27
        result: Var#29
    Expr_BinaryOp_Identical
        left: Var#28<$name>
        right: Var#25<$ext>
        result: Var#30
    Stmt_JumpIf
        cond: Var#30
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Expr_Assign
        var: Var#31<$name>
        expr: LITERAL('')
        result: Var#32
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#5
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#6
    Parent: Block#7
    Var#33<$unique_filename_callback> = Phi(Var#23<$unique_filename_callback>)
    Var#34<$dir> = Phi(Var#24<$dir>)
    Var#35<$name> = Phi(Var#31<$name>, Var#28<$name>)
    Var#36<$ext> = Phi(Var#25<$ext>)
    Var#37<$filename> = Phi(Var#22<$filename>)
    Stmt_JumpIf
        cond: Var#33<$unique_filename_callback>
        if: Block#9
        else: Block#10

Block#9
    Parent: Block#8
    Var#38<$unique_filename_callback> = Phi(Var#33<$unique_filename_callback>)
    Expr_FuncCall
        name: LITERAL('is_callable')
        args[0]: Var#38<$unique_filename_callback>
        result: Var#39
    Expr_Cast_Bool
        expr: Var#39
        result: Var#40
    Stmt_Jump
        target: Block#10

Block#10
    Parent: Block#8
    Parent: Block#9
    Var#41 = Phi(LITERAL(false), Var#40)
    Var#42<$unique_filename_callback> = Phi(Var#33<$unique_filename_callback>, Var#38<$unique_filename_callback>)
    Var#43<$dir> = Phi(Var#34<$dir>)
    Var#44<$name> = Phi(Var#35<$name>)
    Var#45<$ext> = Phi(Var#36<$ext>)
    Var#46<$filename> = Phi(Var#37<$filename>)
    Stmt_JumpIf
        cond: Var#41
        if: Block#11
        else: Block#12

Block#11
    Parent: Block#10
    Var#47<$unique_filename_callback> = Phi(Var#42<$unique_filename_callback>)
    Var#48<$dir> = Phi(Var#43<$dir>)
    Var#49<$name> = Phi(Var#44<$name>)
    Var#50<$ext> = Phi(Var#45<$ext>)
    Expr_Assertion<type(LITERAL('callable'))>
        expr: Var#47<$unique_filename_callback>
        result: Var#51<$unique_filename_callback>
    Expr_FuncCall
        name: LITERAL('call_user_func')
        args[0]: Var#51<$unique_filename_callback>
        args[1]: Var#48<$dir>
        args[2]: Var#49<$name>
        args[3]: Var#50<$ext>
        result: Var#52
    Expr_Assign
        var: Var#53<$filename>
        expr: Var#52
        result: Var#54
    Stmt_Jump
        target: Block#13

Block#12
    Parent: Block#10
    Var#55<$unique_filename_callback> = Phi(Var#42<$unique_filename_callback>)
    Var#56<$ext> = Phi(Var#45<$ext>)
    Expr_Assertion<not(type(LITERAL('callable')))>
        expr: Var#55<$unique_filename_callback>
        result: Var#57<$unique_filename_callback>
    Expr_Assign
        var: Var#58<$number>
        expr: LITERAL('')
        result: Var#59
    Stmt_JumpIf
        cond: Var#56<$ext>
        if: Block#14
        else: Block#15

Block#13
    Parent: Block#11
    Parent: Block#31
    Var#60<$filename> = Phi(Var#53<$filename>, Var#61<$filename>)
    Var#62<$ext> = Phi(Var#50<$ext>, Var#63<$ext>)
    Var#64<$dir> = Phi(Var#48<$dir>, Var#65<$dir>)
    Var#66<$unique_filename_callback> = Phi(Var#51<$unique_filename_callback>, Var#67<$unique_filename_callback>)
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('wp_unique_filename')
        args[1]: Var#60<$filename>
        args[2]: Var#62<$ext>
        args[3]: Var#64<$dir>
        args[4]: Var#66<$unique_filename_callback>
        result: Var#68
    Terminal_Return
        expr: Var#68

Block#14
    Parent: Block#12
    Var#69<$ext> = Phi(Var#56<$ext>)
    Expr_FuncCall
        name: LITERAL('strtolower')
        args[0]: Var#69<$ext>
        result: Var#70
    Expr_BinaryOp_NotEqual
        left: Var#70
        right: Var#69<$ext>
        result: Var#71
    Expr_Cast_Bool
        expr: Var#71
        result: Var#72
    Stmt_Jump
        target: Block#15

Block#15
    Parent: Block#12
    Parent: Block#14
    Var#73 = Phi(LITERAL(false), Var#72)
    Var#74<$ext> = Phi(Var#56<$ext>, Var#69<$ext>)
    Var#75<$filename> = Phi(Var#46<$filename>)
    Var#76<$dir> = Phi(Var#43<$dir>)
    Var#77<$number> = Phi(Var#58<$number>)
    Var#78<$unique_filename_callback> = Phi(Var#57<$unique_filename_callback>)
    Stmt_JumpIf
        cond: Var#73
        if: Block#16
        else: Block#17

Block#16
    Parent: Block#15
    Var#79<$ext> = Phi(Var#74<$ext>)
    Var#80<$filename> = Phi(Var#75<$filename>)
    Expr_FuncCall
        name: LITERAL('strtolower')
        args[0]: Var#79<$ext>
        result: Var#81
    Expr_Assign
        var: Var#82<$ext2>
        expr: Var#81
        result: Var#83
    Expr_FuncCall
        name: LITERAL('preg_quote')
        args[0]: Var#79<$ext>
        result: Var#84
    Expr_BinaryOp_Concat
        left: LITERAL('|')
        right: Var#84
        result: Var#85
    Expr_BinaryOp_Concat
        left: Var#85
        right: LITERAL('$|')
        result: Var#86
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: Var#86
        args[1]: Var#82<$ext2>
        args[2]: Var#80<$filename>
        result: Var#87
    Expr_Assign
        var: Var#88<$filename2>
        expr: Var#87
        result: Var#89
    Stmt_Jump
        target: Block#18

Block#17
    Parent: Block#15
    Stmt_Jump
        target: Block#19

Block#18
    Parent: Block#16
    Parent: Block#27
    Var#90<$dir> = Phi(Var#76<$dir>, Var#91<$dir>)
    Var#92<$filename> = Phi(Var#80<$filename>, Var#93<$filename>)
    Var#94<$filename2> = Phi(Var#88<$filename2>, Var#95<$filename2>)
    Var#96<$number> = Phi(Var#77<$number>, Var#97<$number>)
    Var#98<$ext> = Phi(Var#79<$ext>, Var#99<$ext>)
    Var#100<$ext2> = Phi(Var#82<$ext2>, Var#101<$ext2>)
    Var#102<$unique_filename_callback> = Phi(Var#78<$unique_filename_callback>, Var#103<$unique_filename_callback>)
    Expr_ConcatList
        list[0]: LITERAL('/')
        list[1]: Var#92<$filename>
        result: Var#104
    Expr_BinaryOp_Concat
        left: Var#90<$dir>
        right: Var#104
        result: Var#105
    Expr_FuncCall
        name: LITERAL('file_exists')
        args[0]: Var#105
        result: Var#106
    Stmt_JumpIf
        cond: Var#106
        if: Block#20
        else: Block#21

Block#19
    Parent: Block#17
    Var#107<$dir> = Phi(Var#76<$dir>)
    Var#108<$filename> = Phi(Var#75<$filename>)
    Var#109<$number> = Phi(Var#77<$number>)
    Var#110<$ext> = Phi(Var#74<$ext>)
    Var#111<$unique_filename_callback> = Phi(Var#78<$unique_filename_callback>)
    Stmt_Jump
        target: Block#22

Block#20
    Parent: Block#18
    Parent: Block#21
    Var#112 = Phi(LITERAL(true), Var#113)
    Var#91<$dir> = Phi(Var#90<$dir>, Var#114<$dir>)
    Var#115<$number> = Phi(Var#96<$number>)
    Var#116<$ext> = Phi(Var#98<$ext>)
    Var#117<$filename> = Phi(Var#92<$filename>)
    Var#118<$ext2> = Phi(Var#100<$ext2>)
    Var#119<$filename2> = Phi(Var#94<$filename2>, Var#120<$filename2>)
    Var#103<$unique_filename_callback> = Phi(Var#102<$unique_filename_callback>)
    Stmt_JumpIf
        cond: Var#112
        if: Block#23
        else: Block#24

Block#21
    Parent: Block#18
    Var#114<$dir> = Phi(Var#90<$dir>)
    Var#120<$filename2> = Phi(Var#94<$filename2>)
    Expr_ConcatList
        list[0]: LITERAL('/')
        list[1]: Var#120<$filename2>
        result: Var#121
    Expr_BinaryOp_Concat
        left: Var#114<$dir>
        right: Var#121
        result: Var#122
    Expr_FuncCall
        name: LITERAL('file_exists')
        args[0]: Var#122
        result: Var#123
    Expr_Cast_Bool
        expr: Var#123
        result: Var#113
    Stmt_Jump
        target: Block#20

Block#22
    Parent: Block#19
    Parent: Block#33
    Var#65<$dir> = Phi(Var#107<$dir>, Var#124<$dir>)
    Var#61<$filename> = Phi(Var#108<$filename>, Var#125<$filename>)
    Var#126<$number> = Phi(Var#109<$number>, Var#127<$number>)
    Var#63<$ext> = Phi(Var#110<$ext>, Var#128<$ext>)
    Var#67<$unique_filename_callback> = Phi(Var#111<$unique_filename_callback>, Var#129<$unique_filename_callback>)
    Expr_ConcatList
        list[0]: LITERAL('/')
        list[1]: Var#61<$filename>
        result: Var#130
    Expr_BinaryOp_Concat
        left: Var#65<$dir>
        right: Var#130
        result: Var#131
    Expr_FuncCall
        name: LITERAL('file_exists')
        args[0]: Var#131
        result: Var#132
    Stmt_JumpIf
        cond: Var#132
        if: Block#25
        else: Block#26

Block#23
    Parent: Block#20
    Var#133<$number> = Phi(Var#115<$number>)
    Var#99<$ext> = Phi(Var#116<$ext>)
    Var#134<$filename> = Phi(Var#117<$filename>)
    Var#101<$ext2> = Phi(Var#118<$ext2>)
    Var#135<$filename2> = Phi(Var#119<$filename2>)
    Expr_BinaryOp_Plus
        left: Var#133<$number>
        right: LITERAL(1)
        result: Var#136
    Expr_Assign
        var: Var#137<$new_number>
        expr: Var#136
        result: Var#138
    Expr_ConcatList
        list[0]: LITERAL('-')
        list[1]: Var#133<$number>
        list[2]: Var#99<$ext>
        result: Var#139
    Expr_ConcatList
        list[0]: Var#133<$number>
        list[1]: Var#99<$ext>
        result: Var#140
    Expr_Array
        values[0]: Var#139
        values[1]: Var#140
        result: Var#141
    Expr_ConcatList
        list[0]: LITERAL('-')
        list[1]: Var#137<$new_number>
        list[2]: Var#99<$ext>
        result: Var#142
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: Var#141
        args[1]: Var#142
        args[2]: Var#134<$filename>
        result: Var#143
    Expr_Assign
        var: Var#93<$filename>
        expr: Var#143
        result: Var#144
    Expr_ConcatList
        list[0]: LITERAL('-')
        list[1]: Var#133<$number>
        list[2]: Var#101<$ext2>
        result: Var#145
    Expr_ConcatList
        list[0]: Var#133<$number>
        list[1]: Var#101<$ext2>
        result: Var#146
    Expr_Array
        values[0]: Var#145
        values[1]: Var#146
        result: Var#147
    Expr_ConcatList
        list[0]: LITERAL('-')
        list[1]: Var#137<$new_number>
        list[2]: Var#101<$ext2>
        result: Var#148
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: Var#147
        args[1]: Var#148
        args[2]: Var#135<$filename2>
        result: Var#149
    Expr_Assign
        var: Var#95<$filename2>
        expr: Var#149
        result: Var#150
    Expr_Assign
        var: Var#97<$number>
        expr: Var#137<$new_number>
        result: Var#151
    Stmt_Jump
        target: Block#27

Block#24
    Parent: Block#20
    Stmt_Jump
        target: Block#28

Block#25
    Parent: Block#22
    Var#152<$number> = Phi(Var#126<$number>)
    Var#153<$ext> = Phi(Var#63<$ext>)
    Expr_ConcatList
        list[0]: Var#152<$number>
        list[1]: Var#153<$ext>
        result: Var#154
    Expr_BinaryOp_Equal
        left: LITERAL('')
        right: Var#154
        result: Var#155
    Stmt_JumpIf
        cond: Var#155
        if: Block#29
        else: Block#30

Block#26
    Parent: Block#22
    Stmt_Jump
        target: Block#31

Block#27
    Parent: Block#23
    Stmt_Jump
        target: Block#18

Block#28
    Parent: Block#24
    Var#156<$filename2> = Phi(Var#119<$filename2>)
    Var#157<$ext> = Phi(Var#116<$ext>)
    Var#158<$dir> = Phi(Var#91<$dir>)
    Var#159<$unique_filename_callback> = Phi(Var#103<$unique_filename_callback>)
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('wp_unique_filename')
        args[1]: Var#156<$filename2>
        args[2]: Var#157<$ext>
        args[3]: Var#158<$dir>
        args[4]: Var#159<$unique_filename_callback>
        result: Var#160
    Terminal_Return
        expr: Var#160

Block#29
    Parent: Block#25
    Var#161<$filename> = Phi(Var#61<$filename>)
    Var#162<$number> = Phi(Var#152<$number>)
    Expr_ConcatList
        list[0]: Var#161<$filename>
        list[1]: LITERAL('-')
        result: Var#163
    Expr_BinaryOp_Plus
        left: Var#162<$number>
        right: LITERAL(1)
        result: Var#164
    Expr_Assign
        var: Var#165<$number>
        expr: Var#164
        result: Var#166
    Expr_BinaryOp_Concat
        left: Var#163
        right: Var#164
        result: Var#167
    Expr_Assign
        var: Var#168<$filename>
        expr: Var#167
        result: Var#169
    Stmt_Jump
        target: Block#32

Block#30
    Parent: Block#25
    Var#170<$number> = Phi(Var#152<$number>)
    Var#171<$ext> = Phi(Var#153<$ext>)
    Var#172<$filename> = Phi(Var#61<$filename>)
    Expr_ConcatList
        list[0]: LITERAL('-')
        list[1]: Var#170<$number>
        list[2]: Var#171<$ext>
        result: Var#173
    Expr_ConcatList
        list[0]: Var#170<$number>
        list[1]: Var#171<$ext>
        result: Var#174
    Expr_Array
        values[0]: Var#173
        values[1]: Var#174
        result: Var#175
    Expr_BinaryOp_Plus
        left: Var#170<$number>
        right: LITERAL(1)
        result: Var#176
    Expr_Assign
        var: Var#177<$number>
        expr: Var#176
        result: Var#178
    Expr_BinaryOp_Concat
        left: LITERAL('-')
        right: Var#176
        result: Var#179
    Expr_BinaryOp_Concat
        left: Var#179
        right: Var#171<$ext>
        result: Var#180
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: Var#175
        args[1]: Var#180
        args[2]: Var#172<$filename>
        result: Var#181
    Expr_Assign
        var: Var#182<$filename>
        expr: Var#181
        result: Var#183
    Stmt_Jump
        target: Block#32

Block#31
    Parent: Block#26
    Stmt_Jump
        target: Block#13

Block#32
    Parent: Block#29
    Parent: Block#30
    Var#124<$dir> = Phi(Var#65<$dir>)
    Var#125<$filename> = Phi(Var#168<$filename>, Var#182<$filename>)
    Var#127<$number> = Phi(Var#165<$number>, Var#177<$number>)
    Var#128<$ext> = Phi(Var#153<$ext>, Var#171<$ext>)
    Var#129<$unique_filename_callback> = Phi(Var#67<$unique_filename_callback>)
    Stmt_Jump
        target: Block#33

Block#33
    Parent: Block#32
    Stmt_Jump
        target: Block#22

Function wp_upload_bits():
Block#1
    Expr_Param
        name: LITERAL('name')
        result: Var#1<$name>
    Expr_Param
        name: LITERAL('deprecated')
        result: Var#2<$deprecated>
    Expr_Param
        name: LITERAL('bits')
        result: Var#3<$bits>
    Expr_Param
        name: LITERAL('time')
        defaultVar: Var#4
        result: Var#5<$time>
        defaultBlock: Block#2
    Expr_Empty
        expr: Var#2<$deprecated>
        result: Var#6
    Expr_BooleanNot
        expr: Var#6
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#4

Block#3
    Parent: Block#1
    Expr_FuncCall
        name: LITERAL('_deprecated_argument')
        args[0]: LITERAL('wp_upload_bits')
        args[1]: LITERAL('2.0.0')
        result: Var#8
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Var#9<$name> = Phi(Var#1<$name>)
    Var#10<$time> = Phi(Var#5<$time>)
    Var#11<$bits> = Phi(Var#3<$bits>)
    Expr_Empty
        expr: Var#9<$name>
        result: Var#12
    Stmt_JumpIf
        cond: Var#12
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('Empty filename')
        result: Var#13
    Expr_Array
        keys[0]: LITERAL('error')
        values[0]: Var#13
        result: Var#14
    Terminal_Return
        expr: Var#14

Block#7
    Parent: Block#5
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#7
    Var#15<$name> = Phi(Var#9<$name>)
    Var#16<$time> = Phi(Var#10<$time>)
    Var#17<$bits> = Phi(Var#11<$bits>)
    Expr_FuncCall
        name: LITERAL('wp_check_filetype')
        args[0]: Var#15<$name>
        result: Var#18
    Expr_Assign
        var: Var#19<$wp_filetype>
        expr: Var#18
        result: Var#20
    Expr_ArrayDimFetch
        var: Var#19<$wp_filetype>
        dim: LITERAL('ext')
        result: Var#21
    Expr_BooleanNot
        expr: Var#21
        result: Var#22
    Stmt_JumpIf
        cond: Var#22
        if: Block#9
        else: Block#10

Block#9
    Parent: Block#8
    Expr_FuncCall
        name: LITERAL('current_user_can')
        args[0]: LITERAL('unfiltered_upload')
        result: Var#23
    Expr_BooleanNot
        expr: Var#23
        result: Var#24
    Expr_Cast_Bool
        expr: Var#24
        result: Var#25
    Stmt_Jump
        target: Block#10

Block#10
    Parent: Block#8
    Parent: Block#9
    Var#26 = Phi(LITERAL(false), Var#25)
    Var#27<$time> = Phi(Var#16<$time>)
    Var#28<$name> = Phi(Var#15<$name>)
    Var#29<$bits> = Phi(Var#17<$bits>)
    Var#30<$wp_filetype> = Phi(Var#19<$wp_filetype>)
    Stmt_JumpIf
        cond: Var#26
        if: Block#11
        else: Block#12

Block#11
    Parent: Block#10
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('Invalid file type')
        result: Var#31
    Expr_Array
        keys[0]: LITERAL('error')
        values[0]: Var#31
        result: Var#32
    Terminal_Return
        expr: Var#32

Block#12
    Parent: Block#10
    Stmt_Jump
        target: Block#13

Block#13
    Parent: Block#12
    Var#33<$time> = Phi(Var#27<$time>)
    Var#34<$name> = Phi(Var#28<$name>)
    Var#35<$bits> = Phi(Var#29<$bits>)
    Var#36<$wp_filetype> = Phi(Var#30<$wp_filetype>)
    Expr_FuncCall
        name: LITERAL('wp_upload_dir')
        args[0]: Var#33<$time>
        result: Var#37
    Expr_Assign
        var: Var#38<$upload>
        expr: Var#37
        result: Var#39
    Expr_ArrayDimFetch
        var: Var#38<$upload>
        dim: LITERAL('error')
        result: Var#40
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#41
    Expr_BinaryOp_NotIdentical
        left: Var#40
        right: Var#41
        result: Var#42
    Stmt_JumpIf
        cond: Var#42
        if: Block#14
        else: Block#15

Block#14
    Parent: Block#13
    Var#43<$upload> = Phi(Var#38<$upload>)
    Terminal_Return
        expr: Var#43<$upload>

Block#15
    Parent: Block#13
    Stmt_Jump
        target: Block#16

Block#16
    Parent: Block#15
    Var#44<$name> = Phi(Var#34<$name>)
    Var#45<$bits> = Phi(Var#35<$bits>)
    Var#46<$time> = Phi(Var#33<$time>)
    Var#47<$upload> = Phi(Var#38<$upload>)
    Var#48<$wp_filetype> = Phi(Var#36<$wp_filetype>)
    Expr_Array
        keys[0]: LITERAL('name')
        keys[1]: LITERAL('bits')
        keys[2]: LITERAL('time')
        values[0]: Var#44<$name>
        values[1]: Var#45<$bits>
        values[2]: Var#46<$time>
        result: Var#49
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('wp_upload_bits')
        args[1]: Var#49
        result: Var#50
    Expr_Assign
        var: Var#51<$upload_bits_error>
        expr: Var#50
        result: Var#52
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#51<$upload_bits_error>
        result: Var#53
    Expr_BooleanNot
        expr: Var#53
        result: Var#54
    Stmt_JumpIf
        cond: Var#54
        if: Block#17
        else: Block#18

Block#17
    Parent: Block#16
    Var#55<$upload_bits_error> = Phi(Var#51<$upload_bits_error>)
    Var#56<$upload> = Phi(Var#47<$upload>)
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#55<$upload_bits_error>
        result: Var#57<$upload_bits_error>
    Expr_ArrayDimFetch
        var: Var#56<$upload>
        dim: LITERAL('error')
        result: Var#58
    Expr_Assign
        var: Var#58
        expr: Var#57<$upload_bits_error>
        result: Var#59
    Terminal_Return
        expr: Var#56<$upload>

Block#18
    Parent: Block#16
    Var#60<$upload_bits_error> = Phi(Var#51<$upload_bits_error>)
    Expr_Assertion<not(not(type(LITERAL('array'))))>
        expr: Var#60<$upload_bits_error>
        result: Var#61<$upload_bits_error>
    Stmt_Jump
        target: Block#19

Block#19
    Parent: Block#18
    Var#62<$upload> = Phi(Var#47<$upload>)
    Var#63<$name> = Phi(Var#44<$name>)
    Var#64<$bits> = Phi(Var#45<$bits>)
    Var#65<$wp_filetype> = Phi(Var#48<$wp_filetype>)
    Expr_ArrayDimFetch
        var: Var#62<$upload>
        dim: LITERAL('path')
        result: Var#66
    Expr_FuncCall
        name: LITERAL('wp_unique_filename')
        args[0]: Var#66
        args[1]: Var#63<$name>
        result: Var#67
    Expr_Assign
        var: Var#68<$filename>
        expr: Var#67
        result: Var#69
    Expr_ArrayDimFetch
        var: Var#62<$upload>
        dim: LITERAL('path')
        result: Var#70
    Expr_ConcatList
        list[0]: LITERAL('/')
        list[1]: Var#68<$filename>
        result: Var#71
    Expr_BinaryOp_Concat
        left: Var#70
        right: Var#71
        result: Var#72
    Expr_Assign
        var: Var#73<$new_file>
        expr: Var#72
        result: Var#74
    Expr_FuncCall
        name: LITERAL('dirname')
        args[0]: Var#73<$new_file>
        result: Var#75
    Expr_FuncCall
        name: LITERAL('wp_mkdir_p')
        args[0]: Var#75
        result: Var#76
    Expr_BooleanNot
        expr: Var#76
        result: Var#77
    Stmt_JumpIf
        cond: Var#77
        if: Block#20
        else: Block#21

Block#20
    Parent: Block#19
    Var#78<$upload> = Phi(Var#62<$upload>)
    Expr_ArrayDimFetch
        var: Var#78<$upload>
        dim: LITERAL('basedir')
        result: Var#79
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#80
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#79
        args[1]: Var#80
        result: Var#81
    Expr_BinaryOp_Identical
        left: LITERAL(0)
        right: Var#81
        result: Var#82
    Stmt_JumpIf
        cond: Var#82
        if: Block#22
        else: Block#23

Block#21
    Parent: Block#19
    Stmt_Jump
        target: Block#24

Block#22
    Parent: Block#20
    Var#83<$upload> = Phi(Var#78<$upload>)
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#84
    Expr_ArrayDimFetch
        var: Var#83<$upload>
        dim: LITERAL('basedir')
        result: Var#85
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: Var#84
        args[1]: LITERAL('')
        args[2]: Var#85
        result: Var#86
    Expr_ArrayDimFetch
        var: Var#83<$upload>
        dim: LITERAL('subdir')
        result: Var#87
    Expr_BinaryOp_Concat
        left: Var#86
        right: Var#87
        result: Var#88
    Expr_Assign
        var: Var#89<$error_path>
        expr: Var#88
        result: Var#90
    Stmt_Jump
        target: Block#25

Block#23
    Parent: Block#20
    Var#91<$upload> = Phi(Var#78<$upload>)
    Expr_ArrayDimFetch
        var: Var#91<$upload>
        dim: LITERAL('basedir')
        result: Var#92
    Expr_FuncCall
        name: LITERAL('basename')
        args[0]: Var#92
        result: Var#93
    Expr_ArrayDimFetch
        var: Var#91<$upload>
        dim: LITERAL('subdir')
        result: Var#94
    Expr_BinaryOp_Concat
        left: Var#93
        right: Var#94
        result: Var#95
    Expr_Assign
        var: Var#96<$error_path>
        expr: Var#95
        result: Var#97
    Stmt_Jump
        target: Block#25

Block#24
    Parent: Block#21
    Var#98<$new_file> = Phi(Var#73<$new_file>)
    Var#99<$bits> = Phi(Var#64<$bits>)
    Var#100<$upload> = Phi(Var#62<$upload>)
    Var#101<$filename> = Phi(Var#68<$filename>)
    Var#102<$wp_filetype> = Phi(Var#65<$wp_filetype>)
    Stmt_Jump
        target: Block#26

Block#25
    Parent: Block#22
    Parent: Block#23
    Var#103<$error_path> = Phi(Var#89<$error_path>, Var#96<$error_path>)
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('Unable to create directory %s. Is its parent directory writable by the server?')
        result: Var#104
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: Var#104
        args[1]: Var#103<$error_path>
        result: Var#105
    Expr_Assign
        var: Var#106<$message>
        expr: Var#105
        result: Var#107
    Expr_Array
        keys[0]: LITERAL('error')
        values[0]: Var#106<$message>
        result: Var#108
    Terminal_Return
        expr: Var#108

Block#26
    Parent: Block#24
    Var#109<$new_file> = Phi(Var#98<$new_file>)
    Expr_FuncCall
        name: LITERAL('fopen')
        args[0]: Var#109<$new_file>
        args[1]: LITERAL('wb')
        result: Var#110
    Stmt_Jump
        target: Block#27

Block#27
    Parent: Block#26
    Expr_Assign
        var: Var#111<$ifp>
        expr: Var#110
        result: Var#112
    Expr_BooleanNot
        expr: Var#111<$ifp>
        result: Var#113
    Stmt_JumpIf
        cond: Var#113
        if: Block#28
        else: Block#29

Block#28
    Parent: Block#27
    Var#114<$new_file> = Phi(Var#109<$new_file>)
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('Could not write file %s')
        result: Var#115
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: Var#115
        args[1]: Var#114<$new_file>
        result: Var#116
    Expr_Array
        keys[0]: LITERAL('error')
        values[0]: Var#116
        result: Var#117
    Terminal_Return
        expr: Var#117

Block#29
    Parent: Block#27
    Stmt_Jump
        target: Block#30

Block#30
    Parent: Block#29
    Var#118<$ifp> = Phi(Var#111<$ifp>)
    Var#119<$bits> = Phi(Var#99<$bits>)
    Var#120<$new_file> = Phi(Var#109<$new_file>)
    Var#121<$upload> = Phi(Var#100<$upload>)
    Var#122<$filename> = Phi(Var#101<$filename>)
    Var#123<$wp_filetype> = Phi(Var#102<$wp_filetype>)
    Stmt_Jump
        target: Block#31

Block#31
    Parent: Block#30
    Var#124<$ifp> = Phi(Var#118<$ifp>)
    Var#125<$bits> = Phi(Var#119<$bits>)
    Expr_FuncCall
        name: LITERAL('fwrite')
        args[0]: Var#124<$ifp>
        args[1]: Var#125<$bits>
        result: Var#126
    Stmt_Jump
        target: Block#32

Block#32
    Parent: Block#31
    Var#127<$ifp> = Phi(Var#124<$ifp>)
    Expr_FuncCall
        name: LITERAL('fclose')
        args[0]: Var#127<$ifp>
        result: Var#128
    Expr_FuncCall
        name: LITERAL('clearstatcache')
        result: Var#129
    Stmt_Jump
        target: Block#33

Block#33
    Parent: Block#32
    Var#130<$new_file> = Phi(Var#120<$new_file>)
    Expr_FuncCall
        name: LITERAL('dirname')
        args[0]: Var#130<$new_file>
        result: Var#131
    Expr_FuncCall
        name: LITERAL('stat')
        args[0]: Var#131
        result: Var#132
    Stmt_Jump
        target: Block#34

Block#34
    Parent: Block#33
    Expr_Assign
        var: Var#133<$stat>
        expr: Var#132
        result: Var#134
    Expr_ArrayDimFetch
        var: Var#133<$stat>
        dim: LITERAL('mode')
        result: Var#135
    Expr_BinaryOp_BitwiseAnd
        left: Var#135
        right: LITERAL(4095)
        result: Var#136
    Expr_Assign
        var: Var#137<$perms>
        expr: Var#136
        result: Var#138
    Expr_BinaryOp_BitwiseAnd
        left: Var#137<$perms>
        right: LITERAL(438)
        result: Var#139
    Expr_Assign
        var: Var#140<$perms>
        expr: Var#139
        result: Var#141
    Stmt_Jump
        target: Block#35

Block#35
    Parent: Block#34
    Var#142<$new_file> = Phi(Var#130<$new_file>)
    Var#143<$perms> = Phi(Var#140<$perms>)
    Expr_FuncCall
        name: LITERAL('chmod')
        args[0]: Var#142<$new_file>
        args[1]: Var#143<$perms>
        result: Var#144
    Stmt_Jump
        target: Block#36

Block#36
    Parent: Block#35
    Var#145<$upload> = Phi(Var#121<$upload>)
    Var#146<$filename> = Phi(Var#122<$filename>)
    Var#147<$new_file> = Phi(Var#142<$new_file>)
    Var#148<$wp_filetype> = Phi(Var#123<$wp_filetype>)
    Expr_FuncCall
        name: LITERAL('clearstatcache')
        result: Var#149
    Expr_ArrayDimFetch
        var: Var#145<$upload>
        dim: LITERAL('url')
        result: Var#150
    Expr_ConcatList
        list[0]: LITERAL('/')
        list[1]: Var#146<$filename>
        result: Var#151
    Expr_BinaryOp_Concat
        left: Var#150
        right: Var#151
        result: Var#152
    Expr_Assign
        var: Var#153<$url>
        expr: Var#152
        result: Var#154
    Expr_ArrayDimFetch
        var: Var#148<$wp_filetype>
        dim: LITERAL('type')
        result: Var#155
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#156
    Expr_Array
        keys[0]: LITERAL('file')
        keys[1]: LITERAL('url')
        keys[2]: LITERAL('type')
        keys[3]: LITERAL('error')
        values[0]: Var#147<$new_file>
        values[1]: Var#153<$url>
        values[2]: Var#155
        values[3]: Var#156
        result: Var#157
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('wp_handle_upload')
        args[1]: Var#157
        args[2]: LITERAL('sideload')
        result: Var#158
    Terminal_Return
        expr: Var#158

Function wp_ext2type():
Block#1
    Expr_Param
        name: LITERAL('ext')
        result: Var#1<$ext>
    Expr_FuncCall
        name: LITERAL('strtolower')
        args[0]: Var#1<$ext>
        result: Var#2
    Expr_Assign
        var: Var#3<$ext>
        expr: Var#2
        result: Var#4
    Expr_FuncCall
        name: LITERAL('wp_get_ext_types')
        result: Var#5
    Expr_Assign
        var: Var#6<$ext2type>
        expr: Var#5
        result: Var#7
    Iterator_Reset
        var: Var#6<$ext2type>
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Parent: Block#9
    Var#8<$ext> = Phi(Var#3<$ext>, Var#9<$ext>)
    Iterator_Valid
        var: Var#6<$ext2type>
        result: Var#10
    Stmt_JumpIf
        cond: Var#10
        if: Block#3
        else: Block#4

Block#3
    Parent: Block#2
    Var#11<$ext> = Phi(Var#8<$ext>)
    Iterator_Key
        var: Var#6<$ext2type>
        result: Var#12
    Expr_Assign
        var: Var#13<$type>
        expr: Var#12
        result: Var#14
    Iterator_Value
        var: Var#6<$ext2type>
        result: Var#15
    Expr_Assign
        var: Var#16<$exts>
        expr: Var#15
        result: Var#17
    Expr_FuncCall
        name: LITERAL('in_array')
        args[0]: Var#11<$ext>
        args[1]: Var#16<$exts>
        result: Var#18
    Stmt_JumpIf
        cond: Var#18
        if: Block#5
        else: Block#6

Block#4
    Parent: Block#2
    Stmt_Jump
        target: Block#7

Block#5
    Parent: Block#3
    Var#19<$type> = Phi(Var#13<$type>)
    Terminal_Return
        expr: Var#19<$type>

Block#6
    Parent: Block#3
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#4
    Terminal_Return

Block#8
    Parent: Block#6
    Var#9<$ext> = Phi(Var#11<$ext>)
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#8
    Stmt_Jump
        target: Block#2

Function wp_check_filetype():
Block#1
    Expr_Param
        name: LITERAL('filename')
        result: Var#1<$filename>
    Expr_Param
        name: LITERAL('mimes')
        defaultVar: Var#2
        result: Var#3<$mimes>
        defaultBlock: Block#2
    Var#4<$ext_matches> = Phi()
    Expr_Empty
        expr: Var#3<$mimes>
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#2

Block#3
    Parent: Block#1
    Expr_FuncCall
        name: LITERAL('get_allowed_mime_types')
        result: Var#6
    Expr_Assign
        var: Var#7<$mimes>
        expr: Var#6
        result: Var#8
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Var#9<$mimes> = Phi(Var#7<$mimes>, Var#3<$mimes>)
    Var#10<$filename> = Phi(Var#1<$filename>)
    Var#11<$ext_matches> = Phi(Var#4<$ext_matches>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#12
    Expr_Assign
        var: Var#13<$type>
        expr: Var#12
        result: Var#14
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#15
    Expr_Assign
        var: Var#16<$ext>
        expr: Var#15
        result: Var#17
    Iterator_Reset
        var: Var#9<$mimes>
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#5
    Parent: Block#13
    Var#18<$filename> = Phi(Var#10<$filename>, Var#19<$filename>)
    Var#20<$ext_matches> = Phi(Var#11<$ext_matches>, Var#21<$ext_matches>)
    Iterator_Valid
        var: Var#9<$mimes>
        result: Var#22
    Stmt_JumpIf
        cond: Var#22
        if: Block#7
        else: Block#8

Block#7
    Parent: Block#6
    Var#23<$filename> = Phi(Var#18<$filename>)
    Var#24<$ext_matches> = Phi(Var#20<$ext_matches>)
    Iterator_Key
        var: Var#9<$mimes>
        result: Var#25
    Expr_Assign
        var: Var#26<$ext_preg>
        expr: Var#25
        result: Var#27
    Iterator_Value
        var: Var#9<$mimes>
        result: Var#28
    Expr_Assign
        var: Var#29<$mime_match>
        expr: Var#28
        result: Var#30
    Expr_BinaryOp_Concat
        left: LITERAL('!\\.(')
        right: Var#26<$ext_preg>
        result: Var#31
    Expr_BinaryOp_Concat
        left: Var#31
        right: LITERAL(')$!i')
        result: Var#32
    Expr_Assign
        var: Var#33<$ext_preg>
        expr: Var#32
        result: Var#34
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: Var#33<$ext_preg>
        args[1]: Var#23<$filename>
        args[2]: Var#24<$ext_matches>
        result: Var#35
    Stmt_JumpIf
        cond: Var#35
        if: Block#9
        else: Block#10

Block#8
    Parent: Block#6
    Stmt_Jump
        target: Block#11

Block#9
    Parent: Block#7
    Var#36<$mime_match> = Phi(Var#29<$mime_match>)
    Var#37<$ext_matches> = Phi(Var#24<$ext_matches>)
    Expr_Assign
        var: Var#38<$type>
        expr: Var#36<$mime_match>
        result: Var#39
    Expr_ArrayDimFetch
        var: Var#37<$ext_matches>
        dim: LITERAL(1)
        result: Var#40
    Expr_Assign
        var: Var#41<$ext>
        expr: Var#40
        result: Var#42
    Stmt_Jump
        target: Block#11

Block#10
    Parent: Block#7
    Stmt_Jump
        target: Block#12

Block#11
    Parent: Block#8
    Parent: Block#9
    Expr_FuncCall
        name: LITERAL('compact')
        args[0]: LITERAL('ext')
        args[1]: LITERAL('type')
        result: Var#43
    Terminal_Return
        expr: Var#43

Block#12
    Parent: Block#10
    Var#19<$filename> = Phi(Var#23<$filename>)
    Var#21<$ext_matches> = Phi(Var#24<$ext_matches>)
    Stmt_Jump
        target: Block#13

Block#13
    Parent: Block#12
    Stmt_Jump
        target: Block#6

Function wp_check_filetype_and_ext():
Block#1
    Expr_Param
        name: LITERAL('file')
        result: Var#1<$file>
    Expr_Param
        name: LITERAL('filename')
        result: Var#2<$filename>
    Expr_Param
        name: LITERAL('mimes')
        defaultVar: Var#3
        result: Var#4<$mimes>
        defaultBlock: Block#2
    Var#5<$real_mime> = Phi()
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#6
    Expr_Assign
        var: Var#7<$proper_filename>
        expr: Var#6
        result: Var#8
    Expr_FuncCall
        name: LITERAL('wp_check_filetype')
        args[0]: Var#2<$filename>
        args[1]: Var#4<$mimes>
        result: Var#9
    Expr_Assign
        var: Var#10<$wp_filetype>
        expr: Var#9
        result: Var#11
    Expr_ArrayDimFetch
        var: Var#10<$wp_filetype>
        dim: LITERAL('ext')
        result: Var#12
    Expr_Assign
        var: Var#13<$ext>
        expr: Var#12
        result: Var#14
    Expr_ArrayDimFetch
        var: Var#10<$wp_filetype>
        dim: LITERAL('type')
        result: Var#15
    Expr_Assign
        var: Var#16<$type>
        expr: Var#15
        result: Var#17
    Expr_FuncCall
        name: LITERAL('file_exists')
        args[0]: Var#1<$file>
        result: Var#18
    Expr_BooleanNot
        expr: Var#18
        result: Var#19
    Stmt_JumpIf
        cond: Var#19
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#3

Block#3
    Parent: Block#1
    Expr_FuncCall
        name: LITERAL('compact')
        args[0]: LITERAL('ext')
        args[1]: LITERAL('type')
        args[2]: LITERAL('proper_filename')
        result: Var#20
    Terminal_Return
        expr: Var#20

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#4
    Var#21<$type> = Phi(Var#16<$type>)
    Var#22<$file> = Phi(Var#1<$file>)
    Var#23<$filename> = Phi(Var#2<$filename>)
    Var#24<$mimes> = Phi(Var#4<$mimes>)
    Var#25<$real_mime> = Phi(Var#5<$real_mime>)
    Stmt_JumpIf
        cond: Var#21<$type>
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Var#26<$type> = Phi(Var#21<$type>)
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#26<$type>
        args[1]: LITERAL('image/')
        result: Var#27
    Expr_BinaryOp_Identical
        left: LITERAL(0)
        right: Var#27
        result: Var#28
    Expr_Cast_Bool
        expr: Var#28
        result: Var#29
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#5
    Parent: Block#6
    Var#30 = Phi(LITERAL(false), Var#29)
    Var#31<$file> = Phi(Var#22<$file>)
    Var#32<$type> = Phi(Var#21<$type>, Var#26<$type>)
    Var#33<$filename> = Phi(Var#23<$filename>)
    Var#34<$mimes> = Phi(Var#24<$mimes>)
    Var#35<$real_mime> = Phi(Var#25<$real_mime>)
    Stmt_JumpIf
        cond: Var#30
        if: Block#8
        else: Block#9

Block#8
    Parent: Block#7
    Var#36<$file> = Phi(Var#31<$file>)
    Expr_FuncCall
        name: LITERAL('wp_get_image_mime')
        args[0]: Var#36<$file>
        result: Var#37
    Expr_Assign
        var: Var#38<$real_mime>
        expr: Var#37
        result: Var#39
    Expr_BooleanNot
        expr: Var#38<$real_mime>
        result: Var#40
    Stmt_JumpIf
        cond: Var#40
        if: Block#10
        else: Block#11

Block#9
    Parent: Block#7
    Stmt_Jump
        target: Block#12

Block#10
    Parent: Block#8
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#41
    Expr_Assign
        var: Var#42<$ext>
        expr: Var#41
        result: Var#43
    Expr_Assign
        var: Var#44<$type>
        expr: Var#43
        result: Var#45
    Stmt_Jump
        target: Block#13

Block#11
    Parent: Block#8
    Var#46<$real_mime> = Phi(Var#38<$real_mime>)
    Var#47<$type> = Phi(Var#32<$type>)
    Expr_BinaryOp_NotEqual
        left: Var#46<$real_mime>
        right: Var#47<$type>
        result: Var#48
    Stmt_JumpIf
        cond: Var#48
        if: Block#14
        else: Block#15

Block#12
    Parent: Block#13
    Parent: Block#9
    Var#49<$type> = Phi(Var#50<$type>, Var#32<$type>)
    Var#51<$real_mime> = Phi(Var#52<$real_mime>, Var#35<$real_mime>)
    Var#53<$file> = Phi(Var#54<$file>, Var#31<$file>)
    Var#55<$filename> = Phi(Var#56<$filename>, Var#33<$filename>)
    Var#57<$mimes> = Phi(Var#58<$mimes>, Var#34<$mimes>)
    Stmt_JumpIf
        cond: Var#49<$type>
        if: Block#16
        else: Block#17

Block#13
    Parent: Block#10
    Parent: Block#24
    Parent: Block#15
    Var#50<$type> = Phi(Var#44<$type>, Var#59<$type>, Var#47<$type>)
    Var#52<$real_mime> = Phi(Var#38<$real_mime>, Var#60<$real_mime>, Var#46<$real_mime>)
    Var#54<$file> = Phi(Var#36<$file>, Var#61<$file>)
    Var#56<$filename> = Phi(Var#33<$filename>, Var#62<$filename>)
    Var#58<$mimes> = Phi(Var#34<$mimes>, Var#63<$mimes>)
    Stmt_Jump
        target: Block#12

Block#14
    Parent: Block#11
    Var#64<$real_mime> = Phi(Var#46<$real_mime>)
    Expr_Array
        keys[0]: LITERAL('image/jpeg')
        keys[1]: LITERAL('image/png')
        keys[2]: LITERAL('image/gif')
        keys[3]: LITERAL('image/bmp')
        keys[4]: LITERAL('image/tiff')
        values[0]: LITERAL('jpg')
        values[1]: LITERAL('png')
        values[2]: LITERAL('gif')
        values[3]: LITERAL('bmp')
        values[4]: LITERAL('tif')
        result: Var#65
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('getimagesize_mimes_to_exts')
        args[1]: Var#65
        result: Var#66
    Expr_Assign
        var: Var#67<$mime_to_ext>
        expr: Var#66
        result: Var#68
    Expr_ArrayDimFetch
        var: Var#67<$mime_to_ext>
        dim: Var#64<$real_mime>
        result: Var#69
    Expr_Empty
        expr: Var#69
        result: Var#70
    Expr_BooleanNot
        expr: Var#70
        result: Var#71
    Stmt_JumpIf
        cond: Var#71
        if: Block#18
        else: Block#19

Block#15
    Parent: Block#11
    Stmt_Jump
        target: Block#13

Block#16
    Parent: Block#12
    Var#72<$real_mime> = Phi(Var#51<$real_mime>)
    Expr_BooleanNot
        expr: Var#72<$real_mime>
        result: Var#73
    Expr_Cast_Bool
        expr: Var#73
        result: Var#74
    Stmt_Jump
        target: Block#17

Block#17
    Parent: Block#12
    Parent: Block#16
    Var#75 = Phi(LITERAL(false), Var#74)
    Var#76<$file> = Phi(Var#53<$file>)
    Var#77<$type> = Phi(Var#49<$type>)
    Var#78<$filename> = Phi(Var#55<$filename>)
    Var#79<$mimes> = Phi(Var#57<$mimes>)
    Stmt_JumpIf
        cond: Var#75
        if: Block#20
        else: Block#21

Block#18
    Parent: Block#14
    Var#80<$filename> = Phi(Var#33<$filename>)
    Var#81<$mime_to_ext> = Phi(Var#67<$mime_to_ext>)
    Var#82<$real_mime> = Phi(Var#64<$real_mime>)
    Expr_FuncCall
        name: LITERAL('explode')
        args[0]: LITERAL('.')
        args[1]: Var#80<$filename>
        result: Var#83
    Expr_Assign
        var: Var#84<$filename_parts>
        expr: Var#83
        result: Var#85
    Expr_FuncCall
        name: LITERAL('array_pop')
        args[0]: Var#84<$filename_parts>
        result: Var#86
    Expr_ArrayDimFetch
        var: Var#81<$mime_to_ext>
        dim: Var#82<$real_mime>
        result: Var#87
    Expr_ArrayDimFetch
        var: Var#84<$filename_parts>
        result: Var#88
    Expr_Assign
        var: Var#88
        expr: Var#87
        result: Var#89
    Expr_FuncCall
        name: LITERAL('implode')
        args[0]: LITERAL('.')
        args[1]: Var#84<$filename_parts>
        result: Var#90
    Expr_Assign
        var: Var#91<$new_filename>
        expr: Var#90
        result: Var#92
    Expr_BinaryOp_NotEqual
        left: Var#91<$new_filename>
        right: Var#80<$filename>
        result: Var#93
    Stmt_JumpIf
        cond: Var#93
        if: Block#22
        else: Block#23

Block#19
    Parent: Block#14
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#94
    Expr_Assign
        var: Var#95<$ext>
        expr: Var#94
        result: Var#96
    Expr_Assign
        var: Var#97<$type>
        expr: Var#96
        result: Var#98
    Stmt_Jump
        target: Block#24

Block#20
    Parent: Block#17
    Expr_FuncCall
        name: LITERAL('extension_loaded')
        args[0]: LITERAL('fileinfo')
        result: Var#99
    Expr_Cast_Bool
        expr: Var#99
        result: Var#100
    Stmt_Jump
        target: Block#21

Block#21
    Parent: Block#17
    Parent: Block#20
    Var#101 = Phi(LITERAL(false), Var#100)
    Var#102<$file> = Phi(Var#76<$file>)
    Var#103<$type> = Phi(Var#77<$type>)
    Var#104<$filename> = Phi(Var#78<$filename>)
    Var#105<$mimes> = Phi(Var#79<$mimes>)
    Stmt_JumpIf
        cond: Var#101
        if: Block#25
        else: Block#26

Block#22
    Parent: Block#18
    Var#106<$new_filename> = Phi(Var#91<$new_filename>)
    Expr_Assign
        var: Var#107<$proper_filename>
        expr: Var#106<$new_filename>
        result: Var#108
    Stmt_Jump
        target: Block#27

Block#23
    Parent: Block#18
    Stmt_Jump
        target: Block#27

Block#24
    Parent: Block#27
    Parent: Block#19
    Var#59<$type> = Phi(Var#109<$type>, Var#97<$type>)
    Var#60<$real_mime> = Phi(Var#110<$real_mime>, Var#64<$real_mime>)
    Var#61<$file> = Phi(Var#111<$file>, Var#36<$file>)
    Var#62<$filename> = Phi(Var#112<$filename>, Var#33<$filename>)
    Var#63<$mimes> = Phi(Var#113<$mimes>, Var#34<$mimes>)
    Stmt_Jump
        target: Block#13

Block#25
    Parent: Block#21
    Var#114<$file> = Phi(Var#102<$file>)
    Expr_ConstFetch
        name: LITERAL('FILEINFO_MIME_TYPE')
        result: Var#115
    Expr_FuncCall
        name: LITERAL('finfo_open')
        args[0]: Var#115
        result: Var#116
    Expr_Assign
        var: Var#117<$finfo>
        expr: Var#116
        result: Var#118
    Expr_FuncCall
        name: LITERAL('finfo_file')
        args[0]: Var#117<$finfo>
        args[1]: Var#114<$file>
        result: Var#119
    Expr_Assign
        var: Var#120<$real_mime>
        expr: Var#119
        result: Var#121
    Expr_FuncCall
        name: LITERAL('finfo_close')
        args[0]: Var#117<$finfo>
        result: Var#122
    Expr_Array
        values[0]: LITERAL('application/octet-stream')
        values[1]: LITERAL('application/encrypted')
        values[2]: LITERAL('application/CDFV2-encrypted')
        values[3]: LITERAL('application/zip')
        result: Var#123
    Expr_Assign
        var: Var#124<$nonspecific_types>
        expr: Var#123
        result: Var#125
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#126
    Expr_FuncCall
        name: LITERAL('in_array')
        args[0]: Var#120<$real_mime>
        args[1]: Var#124<$nonspecific_types>
        args[2]: Var#126
        result: Var#127
    Stmt_JumpIf
        cond: Var#127
        if: Block#28
        else: Block#29

Block#26
    Parent: Block#21
    Stmt_Jump
        target: Block#30

Block#27
    Parent: Block#22
    Parent: Block#23
    Var#128<$new_filename> = Phi(Var#106<$new_filename>, Var#91<$new_filename>)
    Var#113<$mimes> = Phi(Var#34<$mimes>)
    Var#110<$real_mime> = Phi(Var#82<$real_mime>)
    Var#111<$file> = Phi(Var#36<$file>)
    Var#112<$filename> = Phi(Var#80<$filename>)
    Expr_FuncCall
        name: LITERAL('wp_check_filetype')
        args[0]: Var#128<$new_filename>
        args[1]: Var#113<$mimes>
        result: Var#129
    Expr_Assign
        var: Var#130<$wp_filetype>
        expr: Var#129
        result: Var#131
    Expr_ArrayDimFetch
        var: Var#130<$wp_filetype>
        dim: LITERAL('ext')
        result: Var#132
    Expr_Assign
        var: Var#133<$ext>
        expr: Var#132
        result: Var#134
    Expr_ArrayDimFetch
        var: Var#130<$wp_filetype>
        dim: LITERAL('type')
        result: Var#135
    Expr_Assign
        var: Var#109<$type>
        expr: Var#135
        result: Var#136
    Stmt_Jump
        target: Block#24

Block#28
    Parent: Block#25
    Var#137<$type> = Phi(Var#103<$type>)
    Expr_FuncCall
        name: LITERAL('strcspn')
        args[0]: Var#137<$type>
        args[1]: LITERAL('/')
        result: Var#138
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#137<$type>
        args[1]: LITERAL(0)
        args[2]: Var#138
        result: Var#139
    Expr_Array
        values[0]: LITERAL('application')
        values[1]: LITERAL('video')
        values[2]: LITERAL('audio')
        result: Var#140
    Expr_FuncCall
        name: LITERAL('in_array')
        args[0]: Var#139
        args[1]: Var#140
        result: Var#141
    Expr_BooleanNot
        expr: Var#141
        result: Var#142
    Stmt_JumpIf
        cond: Var#142
        if: Block#31
        else: Block#32

Block#29
    Parent: Block#25
    Var#143<$real_mime> = Phi(Var#120<$real_mime>)
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#143<$real_mime>
        args[1]: LITERAL('video/')
        result: Var#144
    Expr_BinaryOp_Identical
        left: LITERAL(0)
        right: Var#144
        result: Var#145
    Stmt_JumpIf
        cond: Var#145
        if: Block#33
        else: Block#34

Block#30
    Parent: Block#43
    Parent: Block#26
    Var#146<$type> = Phi(Var#147<$type>, Var#103<$type>)
    Var#148<$file> = Phi(Var#149<$file>, Var#102<$file>)
    Var#150<$filename> = Phi(Var#151<$filename>, Var#104<$filename>)
    Var#152<$mimes> = Phi(Var#153<$mimes>, Var#105<$mimes>)
    Stmt_JumpIf
        cond: Var#146<$type>
        if: Block#35
        else: Block#36

Block#31
    Parent: Block#28
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#154
    Expr_Assign
        var: Var#155<$ext>
        expr: Var#154
        result: Var#156
    Expr_Assign
        var: Var#157<$type>
        expr: Var#156
        result: Var#158
    Stmt_Jump
        target: Block#37

Block#32
    Parent: Block#28
    Stmt_Jump
        target: Block#37

Block#33
    Parent: Block#29
    Parent: Block#34
    Var#159 = Phi(LITERAL(true), Var#160)
    Var#161<$real_mime> = Phi(Var#143<$real_mime>, Var#162<$real_mime>)
    Var#163<$type> = Phi(Var#103<$type>)
    Var#164<$file> = Phi(Var#114<$file>)
    Var#165<$filename> = Phi(Var#104<$filename>)
    Var#166<$mimes> = Phi(Var#105<$mimes>)
    Stmt_JumpIf
        cond: Var#159
        if: Block#38
        else: Block#39

Block#34
    Parent: Block#29
    Var#162<$real_mime> = Phi(Var#143<$real_mime>)
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#162<$real_mime>
        args[1]: LITERAL('audio/')
        result: Var#167
    Expr_BinaryOp_Identical
        left: LITERAL(0)
        right: Var#167
        result: Var#168
    Expr_Cast_Bool
        expr: Var#168
        result: Var#160
    Stmt_Jump
        target: Block#33

Block#35
    Parent: Block#30
    Var#169<$type> = Phi(Var#146<$type>)
    Expr_FuncCall
        name: LITERAL('get_allowed_mime_types')
        result: Var#170
    Expr_Assign
        var: Var#171<$allowed>
        expr: Var#170
        result: Var#172
    Expr_FuncCall
        name: LITERAL('in_array')
        args[0]: Var#169<$type>
        args[1]: Var#171<$allowed>
        result: Var#173
    Expr_BooleanNot
        expr: Var#173
        result: Var#174
    Stmt_JumpIf
        cond: Var#174
        if: Block#40
        else: Block#41

Block#36
    Parent: Block#30
    Stmt_Jump
        target: Block#42

Block#37
    Parent: Block#31
    Parent: Block#32
    Var#175<$type> = Phi(Var#157<$type>, Var#137<$type>)
    Var#176<$file> = Phi(Var#114<$file>)
    Var#177<$filename> = Phi(Var#104<$filename>)
    Var#178<$mimes> = Phi(Var#105<$mimes>)
    Stmt_Jump
        target: Block#43

Block#38
    Parent: Block#33
    Var#179<$real_mime> = Phi(Var#161<$real_mime>)
    Var#180<$type> = Phi(Var#163<$type>)
    Expr_FuncCall
        name: LITERAL('strcspn')
        args[0]: Var#179<$real_mime>
        args[1]: LITERAL('/')
        result: Var#181
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#179<$real_mime>
        args[1]: LITERAL(0)
        args[2]: Var#181
        result: Var#182
    Expr_FuncCall
        name: LITERAL('strcspn')
        args[0]: Var#180<$type>
        args[1]: LITERAL('/')
        result: Var#183
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#180<$type>
        args[1]: LITERAL(0)
        args[2]: Var#183
        result: Var#184
    Expr_BinaryOp_NotIdentical
        left: Var#182
        right: Var#184
        result: Var#185
    Stmt_JumpIf
        cond: Var#185
        if: Block#44
        else: Block#45

Block#39
    Parent: Block#33
    Var#186<$type> = Phi(Var#163<$type>)
    Var#187<$real_mime> = Phi(Var#161<$real_mime>)
    Expr_BinaryOp_NotIdentical
        left: Var#186<$type>
        right: Var#187<$real_mime>
        result: Var#188
    Stmt_JumpIf
        cond: Var#188
        if: Block#46
        else: Block#47

Block#40
    Parent: Block#35
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#189
    Expr_Assign
        var: Var#190<$ext>
        expr: Var#189
        result: Var#191
    Expr_Assign
        var: Var#192<$type>
        expr: Var#191
        result: Var#193
    Stmt_Jump
        target: Block#48

Block#41
    Parent: Block#35
    Stmt_Jump
        target: Block#48

Block#42
    Parent: Block#48
    Parent: Block#36
    Var#194<$file> = Phi(Var#195<$file>, Var#148<$file>)
    Var#196<$filename> = Phi(Var#197<$filename>, Var#150<$filename>)
    Var#198<$mimes> = Phi(Var#199<$mimes>, Var#152<$mimes>)
    Expr_FuncCall
        name: LITERAL('compact')
        args[0]: LITERAL('ext')
        args[1]: LITERAL('type')
        args[2]: LITERAL('proper_filename')
        result: Var#200
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('wp_check_filetype_and_ext')
        args[1]: Var#200
        args[2]: Var#194<$file>
        args[3]: Var#196<$filename>
        args[4]: Var#198<$mimes>
        result: Var#201
    Terminal_Return
        expr: Var#201

Block#43
    Parent: Block#37
    Parent: Block#49
    Parent: Block#50
    Var#147<$type> = Phi(Var#175<$type>, Var#202<$type>, Var#203<$type>)
    Var#149<$file> = Phi(Var#176<$file>, Var#204<$file>, Var#205<$file>)
    Var#151<$filename> = Phi(Var#177<$filename>, Var#206<$filename>, Var#207<$filename>)
    Var#153<$mimes> = Phi(Var#178<$mimes>, Var#208<$mimes>, Var#209<$mimes>)
    Stmt_Jump
        target: Block#30

Block#44
    Parent: Block#38
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#210
    Expr_Assign
        var: Var#211<$ext>
        expr: Var#210
        result: Var#212
    Expr_Assign
        var: Var#213<$type>
        expr: Var#212
        result: Var#214
    Stmt_Jump
        target: Block#49

Block#45
    Parent: Block#38
    Stmt_Jump
        target: Block#49

Block#46
    Parent: Block#39
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#215
    Expr_Assign
        var: Var#216<$ext>
        expr: Var#215
        result: Var#217
    Expr_Assign
        var: Var#218<$type>
        expr: Var#217
        result: Var#219
    Stmt_Jump
        target: Block#50

Block#47
    Parent: Block#39
    Stmt_Jump
        target: Block#50

Block#48
    Parent: Block#40
    Parent: Block#41
    Var#195<$file> = Phi(Var#148<$file>)
    Var#197<$filename> = Phi(Var#150<$filename>)
    Var#199<$mimes> = Phi(Var#152<$mimes>)
    Stmt_Jump
        target: Block#42

Block#49
    Parent: Block#44
    Parent: Block#45
    Var#202<$type> = Phi(Var#213<$type>, Var#180<$type>)
    Var#204<$file> = Phi(Var#164<$file>)
    Var#206<$filename> = Phi(Var#165<$filename>)
    Var#208<$mimes> = Phi(Var#166<$mimes>)
    Stmt_Jump
        target: Block#43

Block#50
    Parent: Block#46
    Parent: Block#47
    Var#203<$type> = Phi(Var#218<$type>, Var#186<$type>)
    Var#205<$file> = Phi(Var#164<$file>)
    Var#207<$filename> = Phi(Var#165<$filename>)
    Var#209<$mimes> = Phi(Var#166<$mimes>)
    Stmt_Jump
        target: Block#43

Function wp_get_image_mime():
Block#1
    Expr_Param
        name: LITERAL('file')
        result: Var#1<$file>
    Var#2<$mime> = Phi()
    Terminal_Return
        expr: Var#2<$mime>

Function wp_get_mime_types():
Block#1
    Expr_Array
        keys[0]: LITERAL('jpg|jpeg|jpe')
        keys[1]: LITERAL('gif')
        keys[2]: LITERAL('png')
        keys[3]: LITERAL('bmp')
        keys[4]: LITERAL('tiff|tif')
        keys[5]: LITERAL('ico')
        keys[6]: LITERAL('asf|asx')
        keys[7]: LITERAL('wmv')
        keys[8]: LITERAL('wmx')
        keys[9]: LITERAL('wm')
        keys[10]: LITERAL('avi')
        keys[11]: LITERAL('divx')
        keys[12]: LITERAL('flv')
        keys[13]: LITERAL('mov|qt')
        keys[14]: LITERAL('mpeg|mpg|mpe')
        keys[15]: LITERAL('mp4|m4v')
        keys[16]: LITERAL('ogv')
        keys[17]: LITERAL('webm')
        keys[18]: LITERAL('mkv')
        keys[19]: LITERAL('3gp|3gpp')
        keys[20]: LITERAL('3g2|3gp2')
        keys[21]: LITERAL('txt|asc|c|cc|h|srt')
        keys[22]: LITERAL('csv')
        keys[23]: LITERAL('tsv')
        keys[24]: LITERAL('ics')
        keys[25]: LITERAL('rtx')
        keys[26]: LITERAL('css')
        keys[27]: LITERAL('htm|html')
        keys[28]: LITERAL('vtt')
        keys[29]: LITERAL('dfxp')
        keys[30]: LITERAL('mp3|m4a|m4b')
        keys[31]: LITERAL('ra|ram')
        keys[32]: LITERAL('wav')
        keys[33]: LITERAL('ogg|oga')
        keys[34]: LITERAL('mid|midi')
        keys[35]: LITERAL('wma')
        keys[36]: LITERAL('wax')
        keys[37]: LITERAL('mka')
        keys[38]: LITERAL('rtf')
        keys[39]: LITERAL('js')
        keys[40]: LITERAL('pdf')
        keys[41]: LITERAL('swf')
        keys[42]: LITERAL('class')
        keys[43]: LITERAL('tar')
        keys[44]: LITERAL('zip')
        keys[45]: LITERAL('gz|gzip')
        keys[46]: LITERAL('rar')
        keys[47]: LITERAL('7z')
        keys[48]: LITERAL('exe')
        keys[49]: LITERAL('psd')
        keys[50]: LITERAL('xcf')
        keys[51]: LITERAL('doc')
        keys[52]: LITERAL('pot|pps|ppt')
        keys[53]: LITERAL('wri')
        keys[54]: LITERAL('xla|xls|xlt|xlw')
        keys[55]: LITERAL('mdb')
        keys[56]: LITERAL('mpp')
        keys[57]: LITERAL('docx')
        keys[58]: LITERAL('docm')
        keys[59]: LITERAL('dotx')
        keys[60]: LITERAL('dotm')
        keys[61]: LITERAL('xlsx')
        keys[62]: LITERAL('xlsm')
        keys[63]: LITERAL('xlsb')
        keys[64]: LITERAL('xltx')
        keys[65]: LITERAL('xltm')
        keys[66]: LITERAL('xlam')
        keys[67]: LITERAL('pptx')
        keys[68]: LITERAL('pptm')
        keys[69]: LITERAL('ppsx')
        keys[70]: LITERAL('ppsm')
        keys[71]: LITERAL('potx')
        keys[72]: LITERAL('potm')
        keys[73]: LITERAL('ppam')
        keys[74]: LITERAL('sldx')
        keys[75]: LITERAL('sldm')
        keys[76]: LITERAL('onetoc|onetoc2|onetmp|onepkg')
        keys[77]: LITERAL('oxps')
        keys[78]: LITERAL('xps')
        keys[79]: LITERAL('odt')
        keys[80]: LITERAL('odp')
        keys[81]: LITERAL('ods')
        keys[82]: LITERAL('odg')
        keys[83]: LITERAL('odc')
        keys[84]: LITERAL('odb')
        keys[85]: LITERAL('odf')
        keys[86]: LITERAL('wp|wpd')
        keys[87]: LITERAL('key')
        keys[88]: LITERAL('numbers')
        keys[89]: LITERAL('pages')
        values[0]: LITERAL('image/jpeg')
        values[1]: LITERAL('image/gif')
        values[2]: LITERAL('image/png')
        values[3]: LITERAL('image/bmp')
        values[4]: LITERAL('image/tiff')
        values[5]: LITERAL('image/x-icon')
        values[6]: LITERAL('video/x-ms-asf')
        values[7]: LITERAL('video/x-ms-wmv')
        values[8]: LITERAL('video/x-ms-wmx')
        values[9]: LITERAL('video/x-ms-wm')
        values[10]: LITERAL('video/avi')
        values[11]: LITERAL('video/divx')
        values[12]: LITERAL('video/x-flv')
        values[13]: LITERAL('video/quicktime')
        values[14]: LITERAL('video/mpeg')
        values[15]: LITERAL('video/mp4')
        values[16]: LITERAL('video/ogg')
        values[17]: LITERAL('video/webm')
        values[18]: LITERAL('video/x-matroska')
        values[19]: LITERAL('video/3gpp')
        values[20]: LITERAL('video/3gpp2')
        values[21]: LITERAL('text/plain')
        values[22]: LITERAL('text/csv')
        values[23]: LITERAL('text/tab-separated-values')
        values[24]: LITERAL('text/calendar')
        values[25]: LITERAL('text/richtext')
        values[26]: LITERAL('text/css')
        values[27]: LITERAL('text/html')
        values[28]: LITERAL('text/vtt')
        values[29]: LITERAL('application/ttaf+xml')
        values[30]: LITERAL('audio/mpeg')
        values[31]: LITERAL('audio/x-realaudio')
        values[32]: LITERAL('audio/wav')
        values[33]: LITERAL('audio/ogg')
        values[34]: LITERAL('audio/midi')
        values[35]: LITERAL('audio/x-ms-wma')
        values[36]: LITERAL('audio/x-ms-wax')
        values[37]: LITERAL('audio/x-matroska')
        values[38]: LITERAL('application/rtf')
        values[39]: LITERAL('application/javascript')
        values[40]: LITERAL('application/pdf')
        values[41]: LITERAL('application/x-shockwave-flash')
        values[42]: LITERAL('application/java')
        values[43]: LITERAL('application/x-tar')
        values[44]: LITERAL('application/zip')
        values[45]: LITERAL('application/x-gzip')
        values[46]: LITERAL('application/rar')
        values[47]: LITERAL('application/x-7z-compressed')
        values[48]: LITERAL('application/x-msdownload')
        values[49]: LITERAL('application/octet-stream')
        values[50]: LITERAL('application/octet-stream')
        values[51]: LITERAL('application/msword')
        values[52]: LITERAL('application/vnd.ms-powerpoint')
        values[53]: LITERAL('application/vnd.ms-write')
        values[54]: LITERAL('application/vnd.ms-excel')
        values[55]: LITERAL('application/vnd.ms-access')
        values[56]: LITERAL('application/vnd.ms-project')
        values[57]: LITERAL('application/vnd.openxmlformats-officedocument.wordprocessingml.document')
        values[58]: LITERAL('application/vnd.ms-word.document.macroEnabled.12')
        values[59]: LITERAL('application/vnd.openxmlformats-officedocument.wordprocessingml.template')
        values[60]: LITERAL('application/vnd.ms-word.template.macroEnabled.12')
        values[61]: LITERAL('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
        values[62]: LITERAL('application/vnd.ms-excel.sheet.macroEnabled.12')
        values[63]: LITERAL('application/vnd.ms-excel.sheet.binary.macroEnabled.12')
        values[64]: LITERAL('application/vnd.openxmlformats-officedocument.spreadsheetml.template')
        values[65]: LITERAL('application/vnd.ms-excel.template.macroEnabled.12')
        values[66]: LITERAL('application/vnd.ms-excel.addin.macroEnabled.12')
        values[67]: LITERAL('application/vnd.openxmlformats-officedocument.presentationml.presentation')
        values[68]: LITERAL('application/vnd.ms-powerpoint.presentation.macroEnabled.12')
        values[69]: LITERAL('application/vnd.openxmlformats-officedocument.presentationml.slideshow')
        values[70]: LITERAL('application/vnd.ms-powerpoint.slideshow.macroEnabled.12')
        values[71]: LITERAL('application/vnd.openxmlformats-officedocument.presentationml.template')
        values[72]: LITERAL('application/vnd.ms-powerpoint.template.macroEnabled.12')
        values[73]: LITERAL('application/vnd.ms-powerpoint.addin.macroEnabled.12')
        values[74]: LITERAL('application/vnd.openxmlformats-officedocument.presentationml.slide')
        values[75]: LITERAL('application/vnd.ms-powerpoint.slide.macroEnabled.12')
        values[76]: LITERAL('application/onenote')
        values[77]: LITERAL('application/oxps')
        values[78]: LITERAL('application/vnd.ms-xpsdocument')
        values[79]: LITERAL('application/vnd.oasis.opendocument.text')
        values[80]: LITERAL('application/vnd.oasis.opendocument.presentation')
        values[81]: LITERAL('application/vnd.oasis.opendocument.spreadsheet')
        values[82]: LITERAL('application/vnd.oasis.opendocument.graphics')
        values[83]: LITERAL('application/vnd.oasis.opendocument.chart')
        values[84]: LITERAL('application/vnd.oasis.opendocument.database')
        values[85]: LITERAL('application/vnd.oasis.opendocument.formula')
        values[86]: LITERAL('application/wordperfect')
        values[87]: LITERAL('application/vnd.apple.keynote')
        values[88]: LITERAL('application/vnd.apple.numbers')
        values[89]: LITERAL('application/vnd.apple.pages')
        result: Var#1
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('mime_types')
        args[1]: Var#1
        result: Var#2
    Terminal_Return
        expr: Var#2

Function wp_get_ext_types():
Block#1
    Expr_Array
        values[0]: LITERAL('jpg')
        values[1]: LITERAL('jpeg')
        values[2]: LITERAL('jpe')
        values[3]: LITERAL('gif')
        values[4]: LITERAL('png')
        values[5]: LITERAL('bmp')
        values[6]: LITERAL('tif')
        values[7]: LITERAL('tiff')
        values[8]: LITERAL('ico')
        result: Var#1
    Expr_Array
        values[0]: LITERAL('aac')
        values[1]: LITERAL('ac3')
        values[2]: LITERAL('aif')
        values[3]: LITERAL('aiff')
        values[4]: LITERAL('m3a')
        values[5]: LITERAL('m4a')
        values[6]: LITERAL('m4b')
        values[7]: LITERAL('mka')
        values[8]: LITERAL('mp1')
        values[9]: LITERAL('mp2')
        values[10]: LITERAL('mp3')
        values[11]: LITERAL('ogg')
        values[12]: LITERAL('oga')
        values[13]: LITERAL('ram')
        values[14]: LITERAL('wav')
        values[15]: LITERAL('wma')
        result: Var#2
    Expr_Array
        values[0]: LITERAL('3g2')
        values[1]: LITERAL('3gp')
        values[2]: LITERAL('3gpp')
        values[3]: LITERAL('asf')
        values[4]: LITERAL('avi')
        values[5]: LITERAL('divx')
        values[6]: LITERAL('dv')
        values[7]: LITERAL('flv')
        values[8]: LITERAL('m4v')
        values[9]: LITERAL('mkv')
        values[10]: LITERAL('mov')
        values[11]: LITERAL('mp4')
        values[12]: LITERAL('mpeg')
        values[13]: LITERAL('mpg')
        values[14]: LITERAL('mpv')
        values[15]: LITERAL('ogm')
        values[16]: LITERAL('ogv')
        values[17]: LITERAL('qt')
        values[18]: LITERAL('rm')
        values[19]: LITERAL('vob')
        values[20]: LITERAL('wmv')
        result: Var#3
    Expr_Array
        values[0]: LITERAL('doc')
        values[1]: LITERAL('docx')
        values[2]: LITERAL('docm')
        values[3]: LITERAL('dotm')
        values[4]: LITERAL('odt')
        values[5]: LITERAL('pages')
        values[6]: LITERAL('pdf')
        values[7]: LITERAL('xps')
        values[8]: LITERAL('oxps')
        values[9]: LITERAL('rtf')
        values[10]: LITERAL('wp')
        values[11]: LITERAL('wpd')
        values[12]: LITERAL('psd')
        values[13]: LITERAL('xcf')
        result: Var#4
    Expr_Array
        values[0]: LITERAL('numbers')
        values[1]: LITERAL('ods')
        values[2]: LITERAL('xls')
        values[3]: LITERAL('xlsx')
        values[4]: LITERAL('xlsm')
        values[5]: LITERAL('xlsb')
        result: Var#5
    Expr_Array
        values[0]: LITERAL('swf')
        values[1]: LITERAL('key')
        values[2]: LITERAL('ppt')
        values[3]: LITERAL('pptx')
        values[4]: LITERAL('pptm')
        values[5]: LITERAL('pps')
        values[6]: LITERAL('ppsx')
        values[7]: LITERAL('ppsm')
        values[8]: LITERAL('sldx')
        values[9]: LITERAL('sldm')
        values[10]: LITERAL('odp')
        result: Var#6
    Expr_Array
        values[0]: LITERAL('asc')
        values[1]: LITERAL('csv')
        values[2]: LITERAL('tsv')
        values[3]: LITERAL('txt')
        result: Var#7
    Expr_Array
        values[0]: LITERAL('bz2')
        values[1]: LITERAL('cab')
        values[2]: LITERAL('dmg')
        values[3]: LITERAL('gz')
        values[4]: LITERAL('rar')
        values[5]: LITERAL('sea')
        values[6]: LITERAL('sit')
        values[7]: LITERAL('sqx')
        values[8]: LITERAL('tar')
        values[9]: LITERAL('tgz')
        values[10]: LITERAL('zip')
        values[11]: LITERAL('7z')
        result: Var#8
    Expr_Array
        values[0]: LITERAL('css')
        values[1]: LITERAL('htm')
        values[2]: LITERAL('html')
        values[3]: LITERAL('php')
        values[4]: LITERAL('js')
        result: Var#9
    Expr_Array
        keys[0]: LITERAL('image')
        keys[1]: LITERAL('audio')
        keys[2]: LITERAL('video')
        keys[3]: LITERAL('document')
        keys[4]: LITERAL('spreadsheet')
        keys[5]: LITERAL('interactive')
        keys[6]: LITERAL('text')
        keys[7]: LITERAL('archive')
        keys[8]: LITERAL('code')
        values[0]: Var#1
        values[1]: Var#2
        values[2]: Var#3
        values[3]: Var#4
        values[4]: Var#5
        values[5]: Var#6
        values[6]: Var#7
        values[7]: Var#8
        values[8]: Var#9
        result: Var#10
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('ext2type')
        args[1]: Var#10
        result: Var#11
    Terminal_Return
        expr: Var#11

Function get_allowed_mime_types():
Block#1
    Expr_Param
        name: LITERAL('user')
        defaultVar: Var#1
        result: Var#2<$user>
        defaultBlock: Block#2
    Var#3<$unfiltered> = Phi()
    Expr_FuncCall
        name: LITERAL('wp_get_mime_types')
        result: Var#4
    Expr_Assign
        var: Var#5<$t>
        expr: Var#4
        result: Var#6
    Expr_ArrayDimFetch
        var: Var#5<$t>
        dim: LITERAL('swf')
        result: Var#7
    Expr_ArrayDimFetch
        var: Var#5<$t>
        dim: LITERAL('exe')
        result: Var#8
    Terminal_Unset
        exprs[0]: Var#7
        exprs[1]: Var#8
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('current_user_can')
        result: Var#9
    Stmt_JumpIf
        cond: Var#9
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#1

Block#3
    Parent: Block#1
    Var#10<$user> = Phi(Var#2<$user>)
    Stmt_JumpIf
        cond: Var#10<$user>
        if: Block#5
        else: Block#6

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#7

Block#5
    Parent: Block#3
    Var#11<$user> = Phi(Var#10<$user>)
    Expr_FuncCall
        name: LITERAL('user_can')
        args[0]: Var#11<$user>
        args[1]: LITERAL('unfiltered_html')
        result: Var#12
    Expr_Assign
        var: Var#13
        expr: Var#12
        result: Var#14
    Stmt_Jump
        target: Block#8

Block#6
    Parent: Block#3
    Expr_FuncCall
        name: LITERAL('current_user_can')
        args[0]: LITERAL('unfiltered_html')
        result: Var#15
    Expr_Assign
        var: Var#16
        expr: Var#15
        result: Var#17
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#8
    Parent: Block#4
    Var#18<$unfiltered> = Phi(Var#19<$unfiltered>, Var#3<$unfiltered>)
    Var#20<$t> = Phi(Var#21<$t>, Var#5<$t>)
    Var#22<$user> = Phi(Var#23<$user>, Var#2<$user>)
    Expr_Empty
        expr: Var#18<$unfiltered>
        result: Var#24
    Stmt_JumpIf
        cond: Var#24
        if: Block#9
        else: Block#10

Block#8
    Parent: Block#5
    Parent: Block#6
    Var#25 = Phi(Var#13, Var#16)
    Var#21<$t> = Phi(Var#5<$t>)
    Var#23<$user> = Phi(Var#11<$user>, Var#10<$user>)
    Expr_Assign
        var: Var#19<$unfiltered>
        expr: Var#25
        result: Var#26
    Stmt_Jump
        target: Block#7

Block#9
    Parent: Block#7
    Var#27<$t> = Phi(Var#20<$t>)
    Expr_ArrayDimFetch
        var: Var#27<$t>
        dim: LITERAL('htm|html')
        result: Var#28
    Expr_ArrayDimFetch
        var: Var#27<$t>
        dim: LITERAL('js')
        result: Var#29
    Terminal_Unset
        exprs[0]: Var#28
        exprs[1]: Var#29
    Stmt_Jump
        target: Block#11

Block#10
    Parent: Block#7
    Stmt_Jump
        target: Block#11

Block#11
    Parent: Block#9
    Parent: Block#10
    Var#30<$t> = Phi(Var#27<$t>, Var#20<$t>)
    Var#31<$user> = Phi(Var#22<$user>)
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('upload_mimes')
        args[1]: Var#30<$t>
        args[2]: Var#31<$user>
        result: Var#32
    Terminal_Return
        expr: Var#32

Function wp_nonce_ays():
Block#1
    Expr_Param
        name: LITERAL('action')
        result: Var#1<$action>
    Var#2<$_REQUEST> = Phi()
    Expr_BinaryOp_Equal
        left: LITERAL('log-out')
        right: Var#1<$action>
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#4<$_REQUEST> = Phi(Var#2<$_REQUEST>)
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('You are attempting to log out of %s')
        result: Var#5
    Expr_FuncCall
        name: LITERAL('get_bloginfo')
        args[0]: LITERAL('name')
        result: Var#6
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: Var#5
        args[1]: Var#6
        result: Var#7
    Expr_BinaryOp_Concat
        left: Var#7
        right: LITERAL('</p><p>')
        result: Var#8
    Expr_Assign
        var: Var#9<$html>
        expr: Var#8
        result: Var#10
    Expr_ArrayDimFetch
        var: Var#4<$_REQUEST>
        dim: LITERAL('redirect_to')
        result: Var#11
    Expr_Isset
        vars[0]: Var#11
        result: Var#12
    Stmt_JumpIf
        cond: Var#12
        if: Block#4
        else: Block#5

Block#3
    Parent: Block#1
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('Are you sure you want to do this?')
        result: Var#13
    Expr_Assign
        var: Var#14<$html>
        expr: Var#13
        result: Var#15
    Expr_FuncCall
        name: LITERAL('wp_get_referer')
        result: Var#16
    Stmt_JumpIf
        cond: Var#16
        if: Block#6
        else: Block#7

Block#4
    Parent: Block#2
    Var#17<$_REQUEST> = Phi(Var#4<$_REQUEST>)
    Expr_ArrayDimFetch
        var: Var#17<$_REQUEST>
        dim: LITERAL('redirect_to')
        result: Var#18
    Expr_Assign
        var: Var#19
        expr: Var#18
        result: Var#20
    Stmt_Jump
        target: Block#8

Block#5
    Parent: Block#2
    Expr_Assign
        var: Var#21
        expr: LITERAL('')
        result: Var#22
    Stmt_Jump
        target: Block#8

Block#6
    Parent: Block#3
    Var#23<$html> = Phi(Var#14<$html>)
    Expr_FuncCall
        name: LITERAL('wp_get_referer')
        result: Var#24
    Expr_FuncCall
        name: LITERAL('remove_query_arg')
        args[0]: LITERAL('updated')
        args[1]: Var#24
        result: Var#25
    Expr_FuncCall
        name: LITERAL('esc_url')
        args[0]: Var#25
        result: Var#26
    Expr_BinaryOp_Concat
        left: LITERAL('</p><p><a href=\'')
        right: Var#26
        result: Var#27
    Expr_BinaryOp_Concat
        left: Var#27
        right: LITERAL('\'>')
        result: Var#28
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('Please try again.')
        result: Var#29
    Expr_BinaryOp_Concat
        left: Var#28
        right: Var#29
        result: Var#30
    Expr_BinaryOp_Concat
        left: Var#30
        right: LITERAL('</a>')
        result: Var#31
    Expr_BinaryOp_Concat
        left: Var#23<$html>
        right: Var#31
        result: Var#32
    Expr_Assign
        var: Var#33<$html>
        expr: Var#32
        result: Var#34
    Stmt_Jump
        target: Block#9

Block#7
    Parent: Block#3
    Stmt_Jump
        target: Block#9

Block#8
    Parent: Block#4
    Parent: Block#5
    Var#35 = Phi(Var#19, Var#21)
    Var#36<$html> = Phi(Var#9<$html>)
    Expr_Assign
        var: Var#37<$redirect_to>
        expr: Var#35
        result: Var#38
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('Do you really want to <a href=\'%s\'>log out</a>?')
        result: Var#39
    Expr_FuncCall
        name: LITERAL('wp_logout_url')
        args[0]: Var#37<$redirect_to>
        result: Var#40
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: Var#39
        args[1]: Var#40
        result: Var#41
    Expr_BinaryOp_Concat
        left: Var#36<$html>
        right: Var#41
        result: Var#42
    Expr_Assign
        var: Var#43<$html>
        expr: Var#42
        result: Var#44
    Stmt_Jump
        target: Block#10

Block#9
    Parent: Block#6
    Parent: Block#7
    Var#45<$html> = Phi(Var#33<$html>, Var#14<$html>)
    Stmt_Jump
        target: Block#10

Block#10
    Parent: Block#8
    Parent: Block#9
    Var#46<$html> = Phi(Var#43<$html>, Var#45<$html>)
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('WordPress Failure Notice')
        result: Var#47
    Expr_FuncCall
        name: LITERAL('wp_die')
        args[0]: Var#46<$html>
        args[1]: Var#47
        args[2]: LITERAL(403)
        result: Var#48
    Terminal_Return

Function wp_die():
Block#1
    Expr_Param
        name: LITERAL('message')
        defaultVar: LITERAL('')
        result: Var#1<$message>
        defaultBlock: Block#2
    Expr_Param
        name: LITERAL('title')
        defaultVar: LITERAL('')
        result: Var#2<$title>
        defaultBlock: Block#3
    Expr_Param
        name: LITERAL('args')
        defaultVar: Var#3
        result: Var#4<$args>
        defaultBlock: Block#4
    Expr_FuncCall
        name: LITERAL('is_int')
        args[0]: Var#4<$args>
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#5
        else: Block#6

Block#2

Block#3

Block#4
    Expr_Array
        result: Var#3

Block#5
    Parent: Block#1
    Var#6<$args> = Phi(Var#4<$args>)
    Expr_Assertion<type(LITERAL('int'))>
        expr: Var#6<$args>
        result: Var#7<$args>
    Expr_Array
        keys[0]: LITERAL('response')
        values[0]: Var#7<$args>
        result: Var#8
    Expr_Assign
        var: Var#9<$args>
        expr: Var#8
        result: Var#10
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#1
    Var#11<$args> = Phi(Var#4<$args>)
    Var#12<$title> = Phi(Var#2<$title>)
    Expr_Assertion<not(type(LITERAL('int')))>
        expr: Var#11<$args>
        result: Var#13<$args>
    Expr_FuncCall
        name: LITERAL('is_int')
        args[0]: Var#12<$title>
        result: Var#14
    Stmt_JumpIf
        cond: Var#14
        if: Block#8
        else: Block#9

Block#7
    Parent: Block#5
    Parent: Block#8
    Parent: Block#9
    Var#15<$message> = Phi(Var#1<$message>)
    Var#16<$title> = Phi(Var#2<$title>, Var#17<$title>, Var#18<$title>)
    Var#19<$args> = Phi(Var#9<$args>, Var#20<$args>, Var#13<$args>)
    Expr_FuncCall
        name: LITERAL('defined')
        args[0]: LITERAL('DOING_AJAX')
        result: Var#21
    Stmt_JumpIf
        cond: Var#21
        if: Block#10
        else: Block#11

Block#8
    Parent: Block#6
    Var#22<$title> = Phi(Var#12<$title>)
    Expr_Assertion<type(LITERAL('int'))>
        expr: Var#22<$title>
        result: Var#23<$title>
    Expr_Array
        keys[0]: LITERAL('response')
        values[0]: Var#23<$title>
        result: Var#24
    Expr_Assign
        var: Var#20<$args>
        expr: Var#24
        result: Var#25
    Expr_Assign
        var: Var#17<$title>
        expr: LITERAL('')
        result: Var#26
    Stmt_Jump
        target: Block#7

Block#9
    Parent: Block#6
    Var#27<$title> = Phi(Var#12<$title>)
    Expr_Assertion<not(type(LITERAL('int')))>
        expr: Var#27<$title>
        result: Var#18<$title>
    Stmt_Jump
        target: Block#7

Block#10
    Parent: Block#7
    Expr_ConstFetch
        name: LITERAL('DOING_AJAX')
        result: Var#28
    Expr_Cast_Bool
        expr: Var#28
        result: Var#29
    Stmt_Jump
        target: Block#11

Block#11
    Parent: Block#7
    Parent: Block#10
    Var#30 = Phi(LITERAL(false), Var#29)
    Var#31<$message> = Phi(Var#15<$message>)
    Var#32<$title> = Phi(Var#16<$title>)
    Var#33<$args> = Phi(Var#19<$args>)
    Stmt_JumpIf
        cond: Var#30
        if: Block#12
        else: Block#13

Block#12
    Parent: Block#11
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('wp_die_ajax_handler')
        args[1]: LITERAL('_ajax_wp_die_handler')
        result: Var#34
    Expr_Assign
        var: Var#35<$function>
        expr: Var#34
        result: Var#36
    Stmt_Jump
        target: Block#14

Block#13
    Parent: Block#11
    Expr_FuncCall
        name: LITERAL('defined')
        args[0]: LITERAL('XMLRPC_REQUEST')
        result: Var#37
    Stmt_JumpIf
        cond: Var#37
        if: Block#15
        else: Block#16

Block#14
    Parent: Block#12
    Parent: Block#17
    Parent: Block#18
    Var#38<$function> = Phi(Var#35<$function>, Var#39<$function>, Var#40<$function>)
    Var#41<$message> = Phi(Var#31<$message>, Var#42<$message>)
    Var#43<$title> = Phi(Var#32<$title>, Var#44<$title>)
    Var#45<$args> = Phi(Var#33<$args>, Var#46<$args>)
    Expr_FuncCall
        name: LITERAL('call_user_func')
        args[0]: Var#38<$function>
        args[1]: Var#41<$message>
        args[2]: Var#43<$title>
        args[3]: Var#45<$args>
        result: Var#47
    Terminal_Return

Block#15
    Parent: Block#13
    Expr_ConstFetch
        name: LITERAL('XMLRPC_REQUEST')
        result: Var#48
    Expr_Cast_Bool
        expr: Var#48
        result: Var#49
    Stmt_Jump
        target: Block#16

Block#16
    Parent: Block#13
    Parent: Block#15
    Var#50 = Phi(LITERAL(false), Var#49)
    Var#42<$message> = Phi(Var#31<$message>)
    Var#44<$title> = Phi(Var#32<$title>)
    Var#46<$args> = Phi(Var#33<$args>)
    Stmt_JumpIf
        cond: Var#50
        if: Block#17
        else: Block#18

Block#17
    Parent: Block#16
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('wp_die_xmlrpc_handler')
        args[1]: LITERAL('_xmlrpc_wp_die_handler')
        result: Var#51
    Expr_Assign
        var: Var#39<$function>
        expr: Var#51
        result: Var#52
    Stmt_Jump
        target: Block#14

Block#18
    Parent: Block#16
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('wp_die_handler')
        args[1]: LITERAL('_default_wp_die_handler')
        result: Var#53
    Expr_Assign
        var: Var#40<$function>
        expr: Var#53
        result: Var#54
    Stmt_Jump
        target: Block#14

Function _default_wp_die_handler():
Block#1
    Expr_Param
        name: LITERAL('message')
        result: Var#1<$message>
    Expr_Param
        name: LITERAL('title')
        defaultVar: LITERAL('')
        result: Var#2<$title>
        defaultBlock: Block#2
    Expr_Param
        name: LITERAL('args')
        defaultVar: Var#3
        result: Var#4<$args>
        defaultBlock: Block#3
    Expr_Array
        keys[0]: LITERAL('response')
        values[0]: LITERAL(500)
        result: Var#5
    Expr_Assign
        var: Var#6<$defaults>
        expr: Var#5
        result: Var#7
    Expr_FuncCall
        name: LITERAL('wp_parse_args')
        args[0]: Var#4<$args>
        args[1]: Var#6<$defaults>
        result: Var#8
    Expr_Assign
        var: Var#9<$r>
        expr: Var#8
        result: Var#10
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('__')
        result: Var#11
    Expr_Assign
        var: Var#12<$have_gettext>
        expr: Var#11
        result: Var#13
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('is_wp_error')
        result: Var#14
    Stmt_JumpIf
        cond: Var#14
        if: Block#4
        else: Block#5

Block#2

Block#3
    Expr_Array
        result: Var#3

Block#4
    Parent: Block#1
    Var#15<$message> = Phi(Var#1<$message>)
    Expr_FuncCall
        name: LITERAL('is_wp_error')
        args[0]: Var#15<$message>
        result: Var#16
    Expr_Cast_Bool
        expr: Var#16
        result: Var#17
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#1
    Parent: Block#4
    Var#18 = Phi(LITERAL(false), Var#17)
    Var#19<$title> = Phi(Var#2<$title>)
    Var#20<$message> = Phi(Var#1<$message>, Var#15<$message>)
    Var#21<$r> = Phi(Var#9<$r>)
    Var#22<$have_gettext> = Phi(Var#12<$have_gettext>)
    Stmt_JumpIf
        cond: Var#18
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Var#23<$title> = Phi(Var#19<$title>)
    Expr_Empty
        expr: Var#23<$title>
        result: Var#24
    Stmt_JumpIf
        cond: Var#24
        if: Block#8
        else: Block#9

Block#7
    Parent: Block#5
    Var#25<$message> = Phi(Var#20<$message>)
    Expr_FuncCall
        name: LITERAL('is_string')
        args[0]: Var#25<$message>
        result: Var#26
    Stmt_JumpIf
        cond: Var#26
        if: Block#10
        else: Block#11

Block#8
    Parent: Block#6
    Var#27<$message> = Phi(Var#20<$message>)
    Expr_MethodCall
        var: Var#27<$message>
        name: LITERAL('get_error_data')
        result: Var#28
    Expr_Assign
        var: Var#29<$error_data>
        expr: Var#28
        result: Var#30
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#29<$error_data>
        result: Var#31
    Stmt_JumpIf
        cond: Var#31
        if: Block#12
        else: Block#13

Block#9
    Parent: Block#6
    Stmt_Jump
        target: Block#14

Block#10
    Parent: Block#7
    Var#32<$message> = Phi(Var#25<$message>)
    Expr_Assertion<type(LITERAL('string'))>
        expr: Var#32<$message>
        result: Var#33<$message>
    Expr_ConcatList
        list[0]: LITERAL('<p>')
        list[1]: Var#33<$message>
        list[2]: LITERAL('</p>')
        result: Var#34
    Expr_Assign
        var: Var#35<$message>
        expr: Var#34
        result: Var#36
    Stmt_Jump
        target: Block#15

Block#11
    Parent: Block#7
    Var#37<$message> = Phi(Var#25<$message>)
    Expr_Assertion<not(type(LITERAL('string')))>
        expr: Var#37<$message>
        result: Var#38<$message>
    Stmt_Jump
        target: Block#15

Block#12
    Parent: Block#8
    Var#39<$error_data> = Phi(Var#29<$error_data>)
    Expr_ArrayDimFetch
        var: Var#39<$error_data>
        dim: LITERAL('title')
        result: Var#40
    Expr_Isset
        vars[0]: Var#40
        result: Var#41
    Expr_Cast_Bool
        expr: Var#41
        result: Var#42
    Stmt_Jump
        target: Block#13

Block#13
    Parent: Block#8
    Parent: Block#12
    Var#43 = Phi(LITERAL(false), Var#42)
    Var#44<$error_data> = Phi(Var#29<$error_data>, Var#39<$error_data>)
    Var#45<$message> = Phi(Var#27<$message>)
    Var#46<$r> = Phi(Var#21<$r>)
    Var#47<$have_gettext> = Phi(Var#22<$have_gettext>)
    Var#48<$title> = Phi(Var#23<$title>)
    Stmt_JumpIf
        cond: Var#43
        if: Block#16
        else: Block#17

Block#14
    Parent: Block#23
    Parent: Block#9
    Var#49<$message> = Phi(Var#50<$message>, Var#20<$message>)
    Var#51<$r> = Phi(Var#52<$r>, Var#21<$r>)
    Var#53<$have_gettext> = Phi(Var#54<$have_gettext>, Var#22<$have_gettext>)
    Var#55<$title> = Phi(Var#56<$title>, Var#23<$title>)
    Expr_MethodCall
        var: Var#49<$message>
        name: LITERAL('get_error_messages')
        result: Var#57
    Expr_Assign
        var: Var#58<$errors>
        expr: Var#57
        result: Var#59
    Expr_FuncCall
        name: LITERAL('count')
        args[0]: Var#58<$errors>
        result: Var#60
    Stmt_Switch
        cond: Var#60
        cases[0]: LITERAL(0)
        cases[1]: LITERAL(1)
        targets[0]: Block#18
        targets[1]: Block#19
        default: Block#20

Block#15
    Parent: Block#24
    Parent: Block#10
    Parent: Block#11
    Var#61<$r> = Phi(Var#62<$r>, Var#21<$r>)
    Var#63<$have_gettext> = Phi(Var#64<$have_gettext>, Var#22<$have_gettext>)
    Var#65<$message> = Phi(Var#66<$message>, Var#35<$message>, Var#38<$message>)
    Var#67<$title> = Phi(Var#68<$title>, Var#19<$title>)
    Expr_ArrayDimFetch
        var: Var#61<$r>
        dim: LITERAL('back_link')
        result: Var#69
    Expr_Isset
        vars[0]: Var#69
        result: Var#70
    Stmt_JumpIf
        cond: Var#70
        if: Block#21
        else: Block#22

Block#16
    Parent: Block#13
    Var#71<$error_data> = Phi(Var#44<$error_data>)
    Expr_Assertion<type(LITERAL('array'))>
        expr: Var#71<$error_data>
        result: Var#72<$error_data>
    Expr_ArrayDimFetch
        var: Var#72<$error_data>
        dim: LITERAL('title')
        result: Var#73
    Expr_Assign
        var: Var#74<$title>
        expr: Var#73
        result: Var#75
    Stmt_Jump
        target: Block#23

Block#17
    Parent: Block#13
    Var#76<$error_data> = Phi(Var#44<$error_data>)
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#76<$error_data>
        result: Var#77<$error_data>
    Stmt_Jump
        target: Block#23

Block#18
    Parent: Block#14
    Expr_Assign
        var: Var#78<$message>
        expr: LITERAL('')
        result: Var#79
    Stmt_Jump
        target: Block#24

Block#19
    Parent: Block#14
    Var#80<$errors> = Phi(Var#58<$errors>)
    Expr_ArrayDimFetch
        var: Var#80<$errors>
        dim: LITERAL(0)
        result: Var#81
    Expr_ConcatList
        list[0]: LITERAL('<p>')
        list[1]: Var#81
        list[2]: LITERAL('</p>')
        result: Var#82
    Expr_Assign
        var: Var#83<$message>
        expr: Var#82
        result: Var#84
    Stmt_Jump
        target: Block#24

Block#20
    Parent: Block#14
    Var#85<$errors> = Phi(Var#58<$errors>)
    Expr_FuncCall
        name: LITERAL('join')
        args[0]: LITERAL('</li>
        		<li>')
        args[1]: Var#85<$errors>
        result: Var#86
    Expr_BinaryOp_Concat
        left: LITERAL('<ul>
        		<li>')
        right: Var#86
        result: Var#87
    Expr_BinaryOp_Concat
        left: Var#87
        right: LITERAL('</li>
        	</ul>')
        result: Var#88
    Expr_Assign
        var: Var#89<$message>
        expr: Var#88
        result: Var#90
    Stmt_Jump
        target: Block#24

Block#21
    Parent: Block#15
    Var#91<$r> = Phi(Var#61<$r>)
    Expr_ArrayDimFetch
        var: Var#91<$r>
        dim: LITERAL('back_link')
        result: Var#92
    Expr_Cast_Bool
        expr: Var#92
        result: Var#93
    Stmt_Jump
        target: Block#22

Block#22
    Parent: Block#15
    Parent: Block#21
    Var#94 = Phi(LITERAL(false), Var#93)
    Var#95<$have_gettext> = Phi(Var#63<$have_gettext>)
    Var#96<$message> = Phi(Var#65<$message>)
    Var#97<$r> = Phi(Var#61<$r>, Var#91<$r>)
    Var#98<$title> = Phi(Var#67<$title>)
    Stmt_JumpIf
        cond: Var#94
        if: Block#25
        else: Block#26

Block#23
    Parent: Block#16
    Parent: Block#17
    Var#50<$message> = Phi(Var#45<$message>)
    Var#52<$r> = Phi(Var#46<$r>)
    Var#54<$have_gettext> = Phi(Var#47<$have_gettext>)
    Var#56<$title> = Phi(Var#74<$title>, Var#48<$title>)
    Stmt_Jump
        target: Block#14

Block#24
    Parent: Block#18
    Parent: Block#19
    Parent: Block#20
    Var#62<$r> = Phi(Var#99<$r>, Var#51<$r>)
    Var#64<$have_gettext> = Phi(Var#100<$have_gettext>, Var#53<$have_gettext>)
    Var#66<$message> = Phi(Var#101<$message>, Var#78<$message>, Var#83<$message>, Var#89<$message>)
    Var#68<$title> = Phi(Var#102<$title>, Var#55<$title>)
    Stmt_Jump
        target: Block#15

Block#25
    Parent: Block#22
    Var#103<$have_gettext> = Phi(Var#95<$have_gettext>)
    Stmt_JumpIf
        cond: Var#103<$have_gettext>
        if: Block#27
        else: Block#28

Block#26
    Parent: Block#22
    Stmt_Jump
        target: Block#29

Block#27
    Parent: Block#25
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('&laquo; Back')
        result: Var#104
    Expr_Assign
        var: Var#105
        expr: Var#104
        result: Var#106
    Stmt_Jump
        target: Block#30

Block#28
    Parent: Block#25
    Expr_Assign
        var: Var#107
        expr: LITERAL('&laquo; Back')
        result: Var#108
    Stmt_Jump
        target: Block#30

Block#29
    Parent: Block#30
    Parent: Block#26
    Var#109<$r> = Phi(Var#110<$r>, Var#97<$r>)
    Var#111<$title> = Phi(Var#112<$title>, Var#98<$title>)
    Var#113<$have_gettext> = Phi(Var#114<$have_gettext>, Var#95<$have_gettext>)
    Var#115<$message> = Phi(Var#116<$message>, Var#96<$message>)
    Expr_FuncCall
        name: LITERAL('did_action')
        args[0]: LITERAL('admin_head')
        result: Var#117
    Expr_BooleanNot
        expr: Var#117
        result: Var#118
    Stmt_JumpIf
        cond: Var#118
        if: Block#31
        else: Block#32

Block#30
    Parent: Block#27
    Parent: Block#28
    Var#119 = Phi(Var#105, Var#107)
    Var#120<$message> = Phi(Var#96<$message>)
    Var#110<$r> = Phi(Var#97<$r>)
    Var#112<$title> = Phi(Var#98<$title>)
    Var#114<$have_gettext> = Phi(Var#103<$have_gettext>)
    Expr_Assign
        var: Var#121<$back_text>
        expr: Var#119
        result: Var#122
    Expr_ConcatList
        list[0]: LITERAL('
        <p><a href=\'javascript:history.back()\'>')
        list[1]: Var#121<$back_text>
        list[2]: LITERAL('</a></p>')
        result: Var#123
    Expr_BinaryOp_Concat
        left: Var#120<$message>
        right: Var#123
        result: Var#124
    Expr_Assign
        var: Var#116<$message>
        expr: Var#124
        result: Var#125
    Stmt_Jump
        target: Block#29

Block#31
    Parent: Block#29
    Expr_FuncCall
        name: LITERAL('headers_sent')
        result: Var#126
    Expr_BooleanNot
        expr: Var#126
        result: Var#127
    Stmt_JumpIf
        cond: Var#127
        if: Block#33
        else: Block#34

Block#32
    Parent: Block#29
    Stmt_Jump
        target: Block#35

Block#33
    Parent: Block#31
    Var#128<$r> = Phi(Var#109<$r>)
    Expr_ArrayDimFetch
        var: Var#128<$r>
        dim: LITERAL('response')
        result: Var#129
    Expr_FuncCall
        name: LITERAL('status_header')
        args[0]: Var#129
        result: Var#130
    Expr_FuncCall
        name: LITERAL('nocache_headers')
        result: Var#131
    Expr_FuncCall
        name: LITERAL('header')
        args[0]: LITERAL('Content-Type: text/html; charset=utf-8')
        result: Var#132
    Stmt_Jump
        target: Block#36

Block#34
    Parent: Block#31
    Stmt_Jump
        target: Block#36

Block#35
    Parent: Block#62
    Parent: Block#32
    Var#133<$message> = Phi(Var#134<$message>, Var#115<$message>)
    Terminal_Echo
        expr: LITERAL('	')
    Terminal_Echo
        expr: Var#133<$message>
    Terminal_Echo
        expr: LITERAL('</body>
        </html>
        ')
    Expr_Exit
        result: Var#135
    Terminal_Return

Block#36
    Parent: Block#33
    Parent: Block#34
    Var#136<$title> = Phi(Var#111<$title>)
    Var#137<$have_gettext> = Phi(Var#113<$have_gettext>)
    Var#138<$r> = Phi(Var#128<$r>, Var#109<$r>)
    Var#139<$message> = Phi(Var#115<$message>)
    Expr_Empty
        expr: Var#136<$title>
        result: Var#140
    Stmt_JumpIf
        cond: Var#140
        if: Block#37
        else: Block#38

Block#37
    Parent: Block#36
    Var#141<$have_gettext> = Phi(Var#137<$have_gettext>)
    Stmt_JumpIf
        cond: Var#141<$have_gettext>
        if: Block#39
        else: Block#40

Block#38
    Parent: Block#36
    Stmt_Jump
        target: Block#41

Block#39
    Parent: Block#37
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('WordPress &rsaquo; Error')
        result: Var#142
    Expr_Assign
        var: Var#143
        expr: Var#142
        result: Var#144
    Stmt_Jump
        target: Block#42

Block#40
    Parent: Block#37
    Expr_Assign
        var: Var#145
        expr: LITERAL('WordPress &rsaquo; Error')
        result: Var#146
    Stmt_Jump
        target: Block#42

Block#41
    Parent: Block#42
    Parent: Block#38
    Var#147<$r> = Phi(Var#148<$r>, Var#138<$r>)
    Var#149<$title> = Phi(Var#150<$title>, Var#136<$title>)
    Var#151<$message> = Phi(Var#152<$message>, Var#139<$message>)
    Expr_Assign
        var: Var#153<$text_direction>
        expr: LITERAL('ltr')
        result: Var#154
    Expr_ArrayDimFetch
        var: Var#147<$r>
        dim: LITERAL('text_direction')
        result: Var#155
    Expr_Isset
        vars[0]: Var#155
        result: Var#156
    Stmt_JumpIf
        cond: Var#156
        if: Block#43
        else: Block#44

Block#42
    Parent: Block#39
    Parent: Block#40
    Var#157 = Phi(Var#143, Var#145)
    Var#148<$r> = Phi(Var#138<$r>)
    Var#152<$message> = Phi(Var#139<$message>)
    Expr_Assign
        var: Var#150<$title>
        expr: Var#157
        result: Var#158
    Stmt_Jump
        target: Block#41

Block#43
    Parent: Block#41
    Var#159<$r> = Phi(Var#147<$r>)
    Expr_ArrayDimFetch
        var: Var#159<$r>
        dim: LITERAL('text_direction')
        result: Var#160
    Expr_BinaryOp_Equal
        left: LITERAL('rtl')
        right: Var#160
        result: Var#161
    Expr_Cast_Bool
        expr: Var#161
        result: Var#162
    Stmt_Jump
        target: Block#44

Block#44
    Parent: Block#41
    Parent: Block#43
    Var#163 = Phi(LITERAL(false), Var#162)
    Var#164<$text_direction> = Phi(Var#153<$text_direction>)
    Var#165<$title> = Phi(Var#149<$title>)
    Var#166<$message> = Phi(Var#151<$message>)
    Stmt_JumpIf
        cond: Var#163
        if: Block#45
        else: Block#46

Block#45
    Parent: Block#44
    Expr_Assign
        var: Var#167<$text_direction>
        expr: LITERAL('rtl')
        result: Var#168
    Stmt_Jump
        target: Block#47

Block#46
    Parent: Block#44
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('is_rtl')
        result: Var#169
    Stmt_JumpIf
        cond: Var#169
        if: Block#48
        else: Block#49

Block#47
    Parent: Block#45
    Parent: Block#52
    Parent: Block#53
    Var#170<$text_direction> = Phi(Var#167<$text_direction>, Var#171<$text_direction>, Var#172<$text_direction>)
    Var#173<$title> = Phi(Var#165<$title>, Var#174<$title>)
    Var#175<$message> = Phi(Var#166<$message>, Var#176<$message>)
    Terminal_Echo
        expr: LITERAL('<!DOCTYPE html>
        <!-- Ticket #11289, IE bug fix: always pad the error page with enough characters such that it is greater than 512 bytes, even after gzip compression abcdefghijklmnopqrstuvwxyz1234567890aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz11223344556677889900abacbcbdcdcededfefegfgfhghgihihjijikjkjlklkmlmlnmnmononpopoqpqprqrqsrsrtstsubcbcdcdedefefgfabcadefbghicjkldmnoepqrfstugvwxhyz1i234j567k890laabmbccnddeoeffpgghqhiirjjksklltmmnunoovppqwqrrxsstytuuzvvw0wxx1yyz2z113223434455666777889890091abc2def3ghi4jkl5mno6pqr7stu8vwx9yz11aab2bcc3dd4ee5ff6gg7hh8ii9j0jk1kl2lmm3nnoo4p5pq6qrr7ss8tt9uuvv0wwx1x2yyzz13aba4cbcb5dcdc6dedfef8egf9gfh0ghg1ihi2hji3jik4jkj5lkl6kml7mln8mnm9ono
        -->
        <html xmlns="http://www.w3.org/1999/xhtml" ')
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('language_attributes')
        result: Var#177
    Stmt_JumpIf
        cond: Var#177
        if: Block#50
        else: Block#51

Block#48
    Parent: Block#46
    Expr_FuncCall
        name: LITERAL('is_rtl')
        result: Var#178
    Expr_Cast_Bool
        expr: Var#178
        result: Var#179
    Stmt_Jump
        target: Block#49

Block#49
    Parent: Block#46
    Parent: Block#48
    Var#180 = Phi(LITERAL(false), Var#179)
    Var#172<$text_direction> = Phi(Var#164<$text_direction>)
    Var#174<$title> = Phi(Var#165<$title>)
    Var#176<$message> = Phi(Var#166<$message>)
    Stmt_JumpIf
        cond: Var#180
        if: Block#52
        else: Block#53

Block#50
    Parent: Block#47
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('is_rtl')
        result: Var#181
    Expr_Cast_Bool
        expr: Var#181
        result: Var#182
    Stmt_Jump
        target: Block#51

Block#51
    Parent: Block#47
    Parent: Block#50
    Var#183 = Phi(LITERAL(false), Var#182)
    Var#184<$text_direction> = Phi(Var#170<$text_direction>)
    Var#185<$title> = Phi(Var#173<$title>)
    Var#186<$message> = Phi(Var#175<$message>)
    Stmt_JumpIf
        cond: Var#183
        if: Block#54
        else: Block#55

Block#52
    Parent: Block#49
    Expr_Assign
        var: Var#171<$text_direction>
        expr: LITERAL('rtl')
        result: Var#187
    Stmt_Jump
        target: Block#47

Block#53
    Parent: Block#49
    Stmt_Jump
        target: Block#47

Block#54
    Parent: Block#51
    Expr_FuncCall
        name: LITERAL('language_attributes')
        result: Var#188
    Stmt_Jump
        target: Block#56

Block#55
    Parent: Block#51
    Var#189<$text_direction> = Phi(Var#184<$text_direction>)
    Expr_ConcatList
        list[0]: LITERAL('dir=\'')
        list[1]: Var#189<$text_direction>
        list[2]: LITERAL('\'')
        result: Var#190
    Terminal_Echo
        expr: Var#190
    Stmt_Jump
        target: Block#56

Block#56
    Parent: Block#54
    Parent: Block#55
    Var#191<$title> = Phi(Var#185<$title>)
    Var#192<$text_direction> = Phi(Var#184<$text_direction>, Var#189<$text_direction>)
    Var#193<$message> = Phi(Var#186<$message>)
    Terminal_Echo
        expr: LITERAL('>
        <head>
        	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        	<meta name="viewport" content="width=device-width">
        	')
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('wp_no_robots')
        result: Var#194
    Stmt_JumpIf
        cond: Var#194
        if: Block#57
        else: Block#58

Block#57
    Parent: Block#56
    Expr_FuncCall
        name: LITERAL('wp_no_robots')
        result: Var#195
    Stmt_Jump
        target: Block#59

Block#58
    Parent: Block#56
    Stmt_Jump
        target: Block#59

Block#59
    Parent: Block#57
    Parent: Block#58
    Var#196<$title> = Phi(Var#191<$title>)
    Var#197<$text_direction> = Phi(Var#192<$text_direction>)
    Var#198<$message> = Phi(Var#193<$message>)
    Terminal_Echo
        expr: LITERAL('	<title>')
    Terminal_Echo
        expr: Var#196<$title>
    Terminal_Echo
        expr: LITERAL('</title>
        	<style type="text/css">
        		html {
        			background: #f1f1f1;
        		}
        		body {
        			background: #fff;
        			color: #444;
        			font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
        			margin: 2em auto;
        			padding: 1em 2em;
        			max-width: 700px;
        			-webkit-box-shadow: 0 1px 3px rgba(0,0,0,0.13);
        			box-shadow: 0 1px 3px rgba(0,0,0,0.13);
        		}
        		h1 {
        			border-bottom: 1px solid #dadada;
        			clear: both;
        			color: #666;
        			font-size: 24px;
        			margin: 30px 0 0 0;
        			padding: 0;
        			padding-bottom: 7px;
        		}
        		#error-page {
        			margin-top: 50px;
        		}
        		#error-page p {
        			font-size: 14px;
        			line-height: 1.5;
        			margin: 25px 0 20px;
        		}
        		#error-page code {
        			font-family: Consolas, Monaco, monospace;
        		}
        		ul li {
        			margin-bottom: 10px;
        			font-size: 14px ;
        		}
        		a {
        			color: #0073aa;
        		}
        		a:hover,
        		a:active {
        			color: #00a0d2;
        		}
        		a:focus {
        			color: #124964;
        		    -webkit-box-shadow:
        		    	0 0 0 1px #5b9dd9,
        				0 0 2px 1px rgba(30, 140, 190, .8);
        		    box-shadow:
        		    	0 0 0 1px #5b9dd9,
        				0 0 2px 1px rgba(30, 140, 190, .8);
        			outline: none;
        		}
        		.button {
        			background: #f7f7f7;
        			border: 1px solid #ccc;
        			color: #555;
        			display: inline-block;
        			text-decoration: none;
        			font-size: 13px;
        			line-height: 26px;
        			height: 28px;
        			margin: 0;
        			padding: 0 10px 1px;
        			cursor: pointer;
        			-webkit-border-radius: 3px;
        			-webkit-appearance: none;
        			border-radius: 3px;
        			white-space: nowrap;
        			-webkit-box-sizing: border-box;
        			-moz-box-sizing:    border-box;
        			box-sizing:         border-box;
        
        			-webkit-box-shadow: 0 1px 0 #ccc;
        			box-shadow: 0 1px 0 #ccc;
        		 	vertical-align: top;
        		}
        
        		.button.button-large {
        			height: 30px;
        			line-height: 28px;
        			padding: 0 12px 2px;
        		}
        
        		.button:hover,
        		.button:focus {
        			background: #fafafa;
        			border-color: #999;
        			color: #23282d;
        		}
        
        		.button:focus  {
        			border-color: #5b9dd9;
        			-webkit-box-shadow: 0 0 3px rgba( 0, 115, 170, .8 );
        			box-shadow: 0 0 3px rgba( 0, 115, 170, .8 );
        			outline: none;
        		}
        
        		.button:active {
        			background: #eee;
        			border-color: #999;
        		 	-webkit-box-shadow: inset 0 2px 5px -3px rgba( 0, 0, 0, 0.5 );
        		 	box-shadow: inset 0 2px 5px -3px rgba( 0, 0, 0, 0.5 );
        		 	-webkit-transform: translateY(1px);
        		 	-ms-transform: translateY(1px);
        		 	transform: translateY(1px);
        		}
        
        		')
    Expr_BinaryOp_Equal
        left: LITERAL('rtl')
        right: Var#197<$text_direction>
        result: Var#199
    Stmt_JumpIf
        cond: Var#199
        if: Block#60
        else: Block#61

Block#60
    Parent: Block#59
    Terminal_Echo
        expr: LITERAL('body { font-family: Tahoma, Arial; }')
    Stmt_Jump
        target: Block#62

Block#61
    Parent: Block#59
    Stmt_Jump
        target: Block#62

Block#62
    Parent: Block#60
    Parent: Block#61
    Var#134<$message> = Phi(Var#198<$message>)
    Terminal_Echo
        expr: LITERAL('	</style>
        </head>
        <body id="error-page">
        ')
    Stmt_Jump
        target: Block#35

Function _xmlrpc_wp_die_handler():
Block#1
    Expr_Param
        name: LITERAL('message')
        result: Var#1<$message>
    Expr_Param
        name: LITERAL('title')
        defaultVar: LITERAL('')
        result: Var#2<$title>
        defaultBlock: Block#2
    Expr_Param
        name: LITERAL('args')
        defaultVar: Var#3
        result: Var#4<$args>
        defaultBlock: Block#3
    Var#5<$wp_xmlrpc_server> = Phi()
    Terminal_GlobalVar
        var: LITERAL('wp_xmlrpc_server')
    Expr_Array
        keys[0]: LITERAL('response')
        values[0]: LITERAL(500)
        result: Var#6
    Expr_Assign
        var: Var#7<$defaults>
        expr: Var#6
        result: Var#8
    Expr_FuncCall
        name: LITERAL('wp_parse_args')
        args[0]: Var#4<$args>
        args[1]: Var#7<$defaults>
        result: Var#9
    Expr_Assign
        var: Var#10<$r>
        expr: Var#9
        result: Var#11
    Stmt_JumpIf
        cond: Var#5<$wp_xmlrpc_server>
        if: Block#4
        else: Block#5

Block#2

Block#3
    Expr_Array
        result: Var#3

Block#4
    Parent: Block#1
    Var#12<$r> = Phi(Var#10<$r>)
    Var#13<$message> = Phi(Var#1<$message>)
    Var#14<$wp_xmlrpc_server> = Phi(Var#5<$wp_xmlrpc_server>)
    Expr_ArrayDimFetch
        var: Var#12<$r>
        dim: LITERAL('response')
        result: Var#15
    Expr_New
        class: LITERAL('IXR_Error')
        args[0]: Var#15
        args[1]: Var#13<$message>
        result: Var#16
    Expr_Assign
        var: Var#17<$error>
        expr: Var#16
        result: Var#18
    Expr_MethodCall
        var: Var#17<$error>
        name: LITERAL('getXml')
        result: Var#19
    Expr_MethodCall
        var: Var#14<$wp_xmlrpc_server>
        name: LITERAL('output')
        args[0]: Var#19
        result: Var#20
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#1
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#4
    Parent: Block#5
    Expr_Exit
        result: Var#21
    Terminal_Return

Function _ajax_wp_die_handler():
Block#1
    Expr_Param
        name: LITERAL('message')
        defaultVar: LITERAL('')
        result: Var#1<$message>
        defaultBlock: Block#2
    Expr_FuncCall
        name: LITERAL('is_scalar')
        args[0]: Var#1<$message>
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#3
        else: Block#4

Block#2

Block#3
    Parent: Block#1
    Var#3<$message> = Phi(Var#1<$message>)
    Expr_Cast_String
        expr: Var#3<$message>
        result: Var#4
    Expr_Exit
        expr: Var#4
        result: Var#5
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Expr_Exit
        expr: LITERAL('0')
        result: Var#6
    Terminal_Return

Function _scalar_wp_die_handler():
Block#1
    Expr_Param
        name: LITERAL('message')
        defaultVar: LITERAL('')
        result: Var#1<$message>
        defaultBlock: Block#2
    Expr_FuncCall
        name: LITERAL('is_scalar')
        args[0]: Var#1<$message>
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#3
        else: Block#4

Block#2

Block#3
    Parent: Block#1
    Var#3<$message> = Phi(Var#1<$message>)
    Expr_Cast_String
        expr: Var#3<$message>
        result: Var#4
    Expr_Exit
        expr: Var#4
        result: Var#5
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Expr_Exit
        result: Var#6
    Terminal_Return

Function wp_json_encode():
Block#1
    Expr_Param
        name: LITERAL('data')
        result: Var#1<$data>
    Expr_Param
        name: LITERAL('options')
        defaultVar: LITERAL(0)
        result: Var#2<$options>
        defaultBlock: Block#2
    Expr_Param
        name: LITERAL('depth')
        defaultVar: LITERAL(512)
        result: Var#3<$depth>
        defaultBlock: Block#3
    Expr_ConstFetch
        name: LITERAL('PHP_VERSION')
        result: Var#4
    Expr_FuncCall
        name: LITERAL('version_compare')
        args[0]: Var#4
        args[1]: LITERAL('5.5')
        args[2]: LITERAL('>=')
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#4
        else: Block#5

Block#2

Block#3

Block#4
    Parent: Block#1
    Var#6<$data> = Phi(Var#1<$data>)
    Var#7<$options> = Phi(Var#2<$options>)
    Var#8<$depth> = Phi(Var#3<$depth>)
    Expr_Array
        values[0]: Var#6<$data>
        values[1]: Var#7<$options>
        values[2]: Var#8<$depth>
        result: Var#9
    Expr_Assign
        var: Var#10<$args>
        expr: Var#9
        result: Var#11
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('PHP_VERSION')
        result: Var#12
    Expr_FuncCall
        name: LITERAL('version_compare')
        args[0]: Var#12
        args[1]: LITERAL('5.3')
        args[2]: LITERAL('>=')
        result: Var#13
    Stmt_JumpIf
        cond: Var#13
        if: Block#7
        else: Block#8

Block#6
    Parent: Block#4
    Parent: Block#7
    Parent: Block#8
    Var#14<$data> = Phi(Var#6<$data>, Var#15<$data>, Var#16<$data>)
    Var#17<$args> = Phi(Var#10<$args>, Var#18<$args>, Var#19<$args>)
    Expr_FuncCall
        name: LITERAL('_wp_json_prepare_data')
        args[0]: Var#14<$data>
        result: Var#20
    Expr_ArrayDimFetch
        var: Var#17<$args>
        dim: LITERAL(0)
        result: Var#21
    Expr_Assign
        var: Var#21
        expr: Var#20
        result: Var#22
    Stmt_Jump
        target: Block#9

Block#7
    Parent: Block#5
    Var#15<$data> = Phi(Var#1<$data>)
    Var#23<$options> = Phi(Var#2<$options>)
    Expr_Array
        values[0]: Var#15<$data>
        values[1]: Var#23<$options>
        result: Var#24
    Expr_Assign
        var: Var#18<$args>
        expr: Var#24
        result: Var#25
    Stmt_Jump
        target: Block#6

Block#8
    Parent: Block#5
    Var#16<$data> = Phi(Var#1<$data>)
    Expr_Array
        values[0]: Var#16<$data>
        result: Var#26
    Expr_Assign
        var: Var#19<$args>
        expr: Var#26
        result: Var#27
    Stmt_Jump
        target: Block#6

Block#9
    Parent: Block#6
    Var#28<$args> = Phi(Var#17<$args>)
    Expr_FuncCall
        name: LITERAL('call_user_func_array')
        args[0]: LITERAL('json_encode')
        args[1]: Var#28<$args>
        result: Var#29
    Stmt_Jump
        target: Block#10

Block#10
    Parent: Block#9
    Expr_Assign
        var: Var#30<$json>
        expr: Var#29
        result: Var#31
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#32
    Expr_BinaryOp_NotIdentical
        left: Var#32
        right: Var#30<$json>
        result: Var#33
    Stmt_JumpIf
        cond: Var#33
        if: Block#11
        else: Block#12

Block#11
    Parent: Block#10
    Expr_ConstFetch
        name: LITERAL('PHP_VERSION')
        result: Var#34
    Expr_FuncCall
        name: LITERAL('version_compare')
        args[0]: Var#34
        args[1]: LITERAL('5.5')
        args[2]: LITERAL('>=')
        result: Var#35
    Stmt_JumpIf
        cond: Var#35
        if: Block#13
        else: Block#14

Block#12
    Parent: Block#10
    Parent: Block#13
    Var#36 = Phi(LITERAL(false), Var#37)
    Var#38<$json> = Phi(Var#30<$json>, Var#39<$json>)
    Var#40<$args> = Phi(Var#28<$args>, Var#41<$args>)
    Stmt_JumpIf
        cond: Var#36
        if: Block#15
        else: Block#16

Block#13
    Parent: Block#11
    Parent: Block#14
    Var#42 = Phi(LITERAL(true), Var#43)
    Var#39<$json> = Phi(Var#30<$json>, Var#44<$json>)
    Var#41<$args> = Phi(Var#28<$args>)
    Expr_Cast_Bool
        expr: Var#42
        result: Var#37
    Stmt_Jump
        target: Block#12

Block#14
    Parent: Block#11
    Var#44<$json> = Phi(Var#30<$json>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#45
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#44<$json>
        args[1]: LITERAL('null')
        result: Var#46
    Expr_BinaryOp_Identical
        left: Var#45
        right: Var#46
        result: Var#47
    Expr_Cast_Bool
        expr: Var#47
        result: Var#43
    Stmt_Jump
        target: Block#13

Block#15
    Parent: Block#12
    Var#48<$json> = Phi(Var#38<$json>)
    Terminal_Return
        expr: Var#48<$json>

Block#16
    Parent: Block#12
    Stmt_Jump
        target: Block#17

Block#17
    Parent: Block#16
    Var#49<$args> = Phi(Var#40<$args>)
    Expr_FuncCall
        name: LITERAL('call_user_func_array')
        args[0]: LITERAL('json_encode')
        args[1]: Var#49<$args>
        result: Var#50
    Terminal_Return
        expr: Var#50

Function _wp_json_sanity_check():
Block#1
    Expr_Param
        name: LITERAL('data')
        result: Var#1<$data>
    Expr_Param
        name: LITERAL('depth')
        result: Var#2<$depth>
    Expr_BinaryOp_Smaller
        left: Var#2<$depth>
        right: LITERAL(0)
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_New
        class: LITERAL('Exception')
        args[0]: LITERAL('Reached depth limit')
        result: Var#4
    Terminal_Throw
        expr: Var#4

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Var#5<$data> = Phi(Var#1<$data>)
    Var#6<$depth> = Phi(Var#2<$depth>)
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#5<$data>
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Var#8<$data> = Phi(Var#5<$data>)
    Expr_Assertion<type(LITERAL('array'))>
        expr: Var#8<$data>
        result: Var#9<$data>
    Expr_Array
        result: Var#10
    Expr_Assign
        var: Var#11<$output>
        expr: Var#10
        result: Var#12
    Iterator_Reset
        var: Var#9<$data>
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Var#13<$data> = Phi(Var#5<$data>)
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#13<$data>
        result: Var#14<$data>
    Expr_FuncCall
        name: LITERAL('is_object')
        args[0]: Var#14<$data>
        result: Var#15
    Stmt_JumpIf
        cond: Var#15
        if: Block#8
        else: Block#9

Block#7
    Parent: Block#5
    Parent: Block#37
    Var#16<$depth> = Phi(Var#6<$depth>, Var#17<$depth>)
    Var#18<$output> = Phi(Var#11<$output>, Var#19<$output>)
    Iterator_Valid
        var: Var#9<$data>
        result: Var#20
    Stmt_JumpIf
        cond: Var#20
        if: Block#10
        else: Block#11

Block#8
    Parent: Block#6
    Var#21<$data> = Phi(Var#14<$data>)
    Expr_Assertion<type(LITERAL('object'))>
        expr: Var#21<$data>
        result: Var#22<$data>
    Expr_New
        class: LITERAL('stdClass')
        result: Var#23
    Expr_Assign
        var: Var#24<$output>
        expr: Var#23
        result: Var#25
    Iterator_Reset
        var: Var#22<$data>
    Stmt_Jump
        target: Block#12

Block#9
    Parent: Block#6
    Var#26<$data> = Phi(Var#14<$data>)
    Expr_Assertion<not(type(LITERAL('object')))>
        expr: Var#26<$data>
        result: Var#27<$data>
    Expr_FuncCall
        name: LITERAL('is_string')
        args[0]: Var#27<$data>
        result: Var#28
    Stmt_JumpIf
        cond: Var#28
        if: Block#13
        else: Block#14

Block#10
    Parent: Block#7
    Iterator_Key
        var: Var#9<$data>
        result: Var#29
    Expr_Assign
        var: Var#30<$id>
        expr: Var#29
        result: Var#31
    Iterator_Value
        var: Var#9<$data>
        result: Var#32
    Expr_Assign
        var: Var#33<$el>
        expr: Var#32
        result: Var#34
    Expr_FuncCall
        name: LITERAL('is_string')
        args[0]: Var#30<$id>
        result: Var#35
    Stmt_JumpIf
        cond: Var#35
        if: Block#15
        else: Block#16

Block#11
    Parent: Block#7
    Stmt_Jump
        target: Block#17

Block#12
    Parent: Block#8
    Parent: Block#41
    Var#36<$depth> = Phi(Var#6<$depth>, Var#37<$depth>)
    Var#38<$output> = Phi(Var#24<$output>, Var#39<$output>)
    Iterator_Valid
        var: Var#22<$data>
        result: Var#40
    Stmt_JumpIf
        cond: Var#40
        if: Block#18
        else: Block#19

Block#13
    Parent: Block#9
    Var#41<$data> = Phi(Var#27<$data>)
    Expr_Assertion<type(LITERAL('string'))>
        expr: Var#41<$data>
        result: Var#42<$data>
    Expr_FuncCall
        name: LITERAL('_wp_json_convert_string')
        args[0]: Var#42<$data>
        result: Var#43
    Terminal_Return
        expr: Var#43

Block#14
    Parent: Block#9
    Var#44<$data> = Phi(Var#27<$data>)
    Expr_Assertion<not(type(LITERAL('string')))>
        expr: Var#44<$data>
        result: Var#45<$data>
    Terminal_Return
        expr: Var#45<$data>

Block#15
    Parent: Block#10
    Var#46<$id> = Phi(Var#30<$id>)
    Expr_Assertion<type(LITERAL('string'))>
        expr: Var#46<$id>
        result: Var#47<$id>
    Expr_FuncCall
        name: LITERAL('_wp_json_convert_string')
        args[0]: Var#47<$id>
        result: Var#48
    Expr_Assign
        var: Var#49<$clean_id>
        expr: Var#48
        result: Var#50
    Stmt_Jump
        target: Block#20

Block#16
    Parent: Block#10
    Var#51<$id> = Phi(Var#30<$id>)
    Expr_Assertion<not(type(LITERAL('string')))>
        expr: Var#51<$id>
        result: Var#52<$id>
    Expr_Assign
        var: Var#53<$clean_id>
        expr: Var#52<$id>
        result: Var#54
    Stmt_Jump
        target: Block#20

Block#17
    Parent: Block#11
    Stmt_Jump
        target: Block#21

Block#18
    Parent: Block#12
    Iterator_Key
        var: Var#22<$data>
        result: Var#55
    Expr_Assign
        var: Var#56<$id>
        expr: Var#55
        result: Var#57
    Iterator_Value
        var: Var#22<$data>
        result: Var#58
    Expr_Assign
        var: Var#59<$el>
        expr: Var#58
        result: Var#60
    Expr_FuncCall
        name: LITERAL('is_string')
        args[0]: Var#56<$id>
        result: Var#61
    Stmt_JumpIf
        cond: Var#61
        if: Block#22
        else: Block#23

Block#19
    Parent: Block#12
    Stmt_Jump
        target: Block#24

Block#20
    Parent: Block#15
    Parent: Block#16
    Var#62<$el> = Phi(Var#33<$el>)
    Var#63<$depth> = Phi(Var#16<$depth>)
    Var#64<$output> = Phi(Var#18<$output>)
    Var#65<$clean_id> = Phi(Var#49<$clean_id>, Var#53<$clean_id>)
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#62<$el>
        result: Var#66
    Stmt_JumpIf
        cond: Var#66
        if: Block#25
        else: Block#26

Block#21
    Parent: Block#17
    Parent: Block#24
    Var#67<$output> = Phi(Var#18<$output>, Var#38<$output>)
    Terminal_Return
        expr: Var#67<$output>

Block#22
    Parent: Block#18
    Var#68<$id> = Phi(Var#56<$id>)
    Expr_Assertion<type(LITERAL('string'))>
        expr: Var#68<$id>
        result: Var#69<$id>
    Expr_FuncCall
        name: LITERAL('_wp_json_convert_string')
        args[0]: Var#69<$id>
        result: Var#70
    Expr_Assign
        var: Var#71<$clean_id>
        expr: Var#70
        result: Var#72
    Stmt_Jump
        target: Block#27

Block#23
    Parent: Block#18
    Var#73<$id> = Phi(Var#56<$id>)
    Expr_Assertion<not(type(LITERAL('string')))>
        expr: Var#73<$id>
        result: Var#74<$id>
    Expr_Assign
        var: Var#75<$clean_id>
        expr: Var#74<$id>
        result: Var#76
    Stmt_Jump
        target: Block#27

Block#24
    Parent: Block#19
    Stmt_Jump
        target: Block#21

Block#25
    Parent: Block#20
    Parent: Block#26
    Var#77 = Phi(LITERAL(true), Var#78)
    Var#79<$el> = Phi(Var#62<$el>, Var#80<$el>)
    Var#81<$depth> = Phi(Var#63<$depth>)
    Var#82<$output> = Phi(Var#64<$output>)
    Var#83<$clean_id> = Phi(Var#65<$clean_id>)
    Stmt_JumpIf
        cond: Var#77
        if: Block#28
        else: Block#29

Block#26
    Parent: Block#20
    Var#80<$el> = Phi(Var#62<$el>)
    Expr_FuncCall
        name: LITERAL('is_object')
        args[0]: Var#80<$el>
        result: Var#84
    Expr_Cast_Bool
        expr: Var#84
        result: Var#78
    Stmt_Jump
        target: Block#25

Block#27
    Parent: Block#22
    Parent: Block#23
    Var#85<$el> = Phi(Var#59<$el>)
    Var#86<$depth> = Phi(Var#36<$depth>)
    Var#87<$output> = Phi(Var#38<$output>)
    Var#88<$clean_id> = Phi(Var#71<$clean_id>, Var#75<$clean_id>)
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#85<$el>
        result: Var#89
    Stmt_JumpIf
        cond: Var#89
        if: Block#30
        else: Block#31

Block#28
    Parent: Block#25
    Var#90<$el> = Phi(Var#79<$el>)
    Var#91<$depth> = Phi(Var#81<$depth>)
    Var#92<$output> = Phi(Var#82<$output>)
    Var#93<$clean_id> = Phi(Var#83<$clean_id>)
    Expr_Assertion<(type(LITERAL('array'))|type(LITERAL('object')))>
        expr: Var#90<$el>
        result: Var#94<$el>
    Expr_BinaryOp_Minus
        left: Var#91<$depth>
        right: LITERAL(1)
        result: Var#95
    Expr_FuncCall
        name: LITERAL('_wp_json_sanity_check')
        args[0]: Var#94<$el>
        args[1]: Var#95
        result: Var#96
    Expr_ArrayDimFetch
        var: Var#92<$output>
        dim: Var#93<$clean_id>
        result: Var#97
    Expr_Assign
        var: Var#97
        expr: Var#96
        result: Var#98
    Stmt_Jump
        target: Block#32

Block#29
    Parent: Block#25
    Var#99<$el> = Phi(Var#79<$el>)
    Expr_Assertion<not((type(LITERAL('array'))|type(LITERAL('object'))))>
        expr: Var#99<$el>
        result: Var#100<$el>
    Expr_FuncCall
        name: LITERAL('is_string')
        args[0]: Var#100<$el>
        result: Var#101
    Stmt_JumpIf
        cond: Var#101
        if: Block#33
        else: Block#34

Block#30
    Parent: Block#27
    Parent: Block#31
    Var#102 = Phi(LITERAL(true), Var#103)
    Var#104<$el> = Phi(Var#85<$el>, Var#105<$el>)
    Var#106<$depth> = Phi(Var#86<$depth>)
    Var#107<$output> = Phi(Var#87<$output>)
    Var#108<$clean_id> = Phi(Var#88<$clean_id>)
    Stmt_JumpIf
        cond: Var#102
        if: Block#35
        else: Block#36

Block#31
    Parent: Block#27
    Var#105<$el> = Phi(Var#85<$el>)
    Expr_FuncCall
        name: LITERAL('is_object')
        args[0]: Var#105<$el>
        result: Var#109
    Expr_Cast_Bool
        expr: Var#109
        result: Var#103
    Stmt_Jump
        target: Block#30

Block#32
    Parent: Block#28
    Parent: Block#33
    Parent: Block#34
    Var#17<$depth> = Phi(Var#91<$depth>, Var#81<$depth>)
    Var#19<$output> = Phi(Var#92<$output>, Var#110<$output>, Var#111<$output>)
    Stmt_Jump
        target: Block#37

Block#33
    Parent: Block#29
    Var#112<$el> = Phi(Var#100<$el>)
    Var#110<$output> = Phi(Var#82<$output>)
    Var#113<$clean_id> = Phi(Var#83<$clean_id>)
    Expr_Assertion<type(LITERAL('string'))>
        expr: Var#112<$el>
        result: Var#114<$el>
    Expr_FuncCall
        name: LITERAL('_wp_json_convert_string')
        args[0]: Var#114<$el>
        result: Var#115
    Expr_ArrayDimFetch
        var: Var#110<$output>
        dim: Var#113<$clean_id>
        result: Var#116
    Expr_Assign
        var: Var#116
        expr: Var#115
        result: Var#117
    Stmt_Jump
        target: Block#32

Block#34
    Parent: Block#29
    Var#118<$el> = Phi(Var#100<$el>)
    Var#111<$output> = Phi(Var#82<$output>)
    Var#119<$clean_id> = Phi(Var#83<$clean_id>)
    Expr_Assertion<not(type(LITERAL('string')))>
        expr: Var#118<$el>
        result: Var#120<$el>
    Expr_ArrayDimFetch
        var: Var#111<$output>
        dim: Var#119<$clean_id>
        result: Var#121
    Expr_Assign
        var: Var#121
        expr: Var#120<$el>
        result: Var#122
    Stmt_Jump
        target: Block#32

Block#35
    Parent: Block#30
    Var#123<$el> = Phi(Var#104<$el>)
    Var#124<$depth> = Phi(Var#106<$depth>)
    Var#125<$output> = Phi(Var#107<$output>)
    Var#126<$clean_id> = Phi(Var#108<$clean_id>)
    Expr_Assertion<(type(LITERAL('array'))|type(LITERAL('object')))>
        expr: Var#123<$el>
        result: Var#127<$el>
    Expr_BinaryOp_Minus
        left: Var#124<$depth>
        right: LITERAL(1)
        result: Var#128
    Expr_FuncCall
        name: LITERAL('_wp_json_sanity_check')
        args[0]: Var#127<$el>
        args[1]: Var#128
        result: Var#129
    Expr_PropertyFetch
        var: Var#125<$output>
        name: Var#126<$clean_id>
        result: Var#130
    Expr_Assign
        var: Var#130
        expr: Var#129
        result: Var#131
    Stmt_Jump
        target: Block#38

Block#36
    Parent: Block#30
    Var#132<$el> = Phi(Var#104<$el>)
    Expr_Assertion<not((type(LITERAL('array'))|type(LITERAL('object'))))>
        expr: Var#132<$el>
        result: Var#133<$el>
    Expr_FuncCall
        name: LITERAL('is_string')
        args[0]: Var#133<$el>
        result: Var#134
    Stmt_JumpIf
        cond: Var#134
        if: Block#39
        else: Block#40

Block#37
    Parent: Block#32
    Stmt_Jump
        target: Block#7

Block#38
    Parent: Block#35
    Parent: Block#39
    Parent: Block#40
    Var#37<$depth> = Phi(Var#124<$depth>, Var#106<$depth>)
    Var#39<$output> = Phi(Var#125<$output>, Var#135<$output>, Var#136<$output>)
    Stmt_Jump
        target: Block#41

Block#39
    Parent: Block#36
    Var#137<$el> = Phi(Var#133<$el>)
    Var#135<$output> = Phi(Var#107<$output>)
    Var#138<$clean_id> = Phi(Var#108<$clean_id>)
    Expr_Assertion<type(LITERAL('string'))>
        expr: Var#137<$el>
        result: Var#139<$el>
    Expr_FuncCall
        name: LITERAL('_wp_json_convert_string')
        args[0]: Var#139<$el>
        result: Var#140
    Expr_PropertyFetch
        var: Var#135<$output>
        name: Var#138<$clean_id>
        result: Var#141
    Expr_Assign
        var: Var#141
        expr: Var#140
        result: Var#142
    Stmt_Jump
        target: Block#38

Block#40
    Parent: Block#36
    Var#143<$el> = Phi(Var#133<$el>)
    Var#136<$output> = Phi(Var#107<$output>)
    Var#144<$clean_id> = Phi(Var#108<$clean_id>)
    Expr_Assertion<not(type(LITERAL('string')))>
        expr: Var#143<$el>
        result: Var#145<$el>
    Expr_PropertyFetch
        var: Var#136<$output>
        name: Var#144<$clean_id>
        result: Var#146
    Expr_Assign
        var: Var#146
        expr: Var#145<$el>
        result: Var#147
    Stmt_Jump
        target: Block#38

Block#41
    Parent: Block#38
    Stmt_Jump
        target: Block#12

Function _wp_json_convert_string():
Block#1
    Expr_Param
        name: LITERAL('string')
        result: Var#1<$string>
    Terminal_StaticVar
        var: Var#2<static<&$use_mb>>
        defaultVar: Var#3
        defaultBlock: Block#2
    Expr_FuncCall
        name: LITERAL('is_null')
        args[0]: static<&$use_mb>
        result: Var#4
    Stmt_JumpIf
        cond: Var#4
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#3

Block#3
    Parent: Block#1
    Expr_Assertion<type(LITERAL('null'))>
        expr: static<&$use_mb>
        result: Var#5<static<&$use_mb>>
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('mb_convert_encoding')
        result: Var#6
    Expr_Assign
        var: Var#7<$use_mb>
        expr: Var#6
        result: Var#8
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Expr_Assertion<not(type(LITERAL('null')))>
        expr: static<&$use_mb>
        result: Var#9<static<&$use_mb>>
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Var#10<$use_mb> = Phi(Var#7<$use_mb>, Var#9<static<&$use_mb>>)
    Var#11<$string> = Phi(Var#1<$string>)
    Stmt_JumpIf
        cond: Var#10<$use_mb>
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Var#12<$string> = Phi(Var#11<$string>)
    Expr_FuncCall
        name: LITERAL('mb_detect_order')
        result: Var#13
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#14
    Expr_FuncCall
        name: LITERAL('mb_detect_encoding')
        args[0]: Var#12<$string>
        args[1]: Var#13
        args[2]: Var#14
        result: Var#15
    Expr_Assign
        var: Var#16<$encoding>
        expr: Var#15
        result: Var#17
    Stmt_JumpIf
        cond: Var#16<$encoding>
        if: Block#8
        else: Block#9

Block#7
    Parent: Block#5
    Var#18<$string> = Phi(Var#11<$string>)
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#19
    Expr_FuncCall
        name: LITERAL('wp_check_invalid_utf8')
        args[0]: Var#18<$string>
        args[1]: Var#19
        result: Var#20
    Terminal_Return
        expr: Var#20

Block#8
    Parent: Block#6
    Var#21<$string> = Phi(Var#12<$string>)
    Var#22<$encoding> = Phi(Var#16<$encoding>)
    Expr_FuncCall
        name: LITERAL('mb_convert_encoding')
        args[0]: Var#21<$string>
        args[1]: LITERAL('UTF-8')
        args[2]: Var#22<$encoding>
        result: Var#23
    Terminal_Return
        expr: Var#23

Block#9
    Parent: Block#6
    Var#24<$string> = Phi(Var#12<$string>)
    Expr_FuncCall
        name: LITERAL('mb_convert_encoding')
        args[0]: Var#24<$string>
        args[1]: LITERAL('UTF-8')
        args[2]: LITERAL('UTF-8')
        result: Var#25
    Terminal_Return
        expr: Var#25

Function _wp_json_prepare_data():
Block#1
    Expr_Param
        name: LITERAL('data')
        result: Var#1<$data>
    Expr_FuncCall
        name: LITERAL('defined')
        args[0]: LITERAL('WP_JSON_SERIALIZE_COMPATIBLE')
        result: Var#2
    Expr_BooleanNot
        expr: Var#2
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Parent: Block#3
    Var#4 = Phi(LITERAL(true), Var#5)
    Var#6<$data> = Phi(Var#1<$data>)
    Stmt_JumpIf
        cond: Var#4
        if: Block#4
        else: Block#5

Block#3
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('WP_JSON_SERIALIZE_COMPATIBLE')
        result: Var#7
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#8
    Expr_BinaryOp_Identical
        left: Var#7
        right: Var#8
        result: Var#9
    Expr_Cast_Bool
        expr: Var#9
        result: Var#5
    Stmt_Jump
        target: Block#2

Block#4
    Parent: Block#2
    Var#10<$data> = Phi(Var#6<$data>)
    Terminal_Return
        expr: Var#10<$data>

Block#5
    Parent: Block#2
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#5
    Var#11<$data> = Phi(Var#6<$data>)
    Expr_FuncCall
        name: LITERAL('gettype')
        args[0]: Var#11<$data>
        result: Var#12
    Stmt_Switch
        cond: Var#12
        cases[0]: LITERAL('boolean')
        cases[1]: LITERAL('integer')
        cases[2]: LITERAL('double')
        cases[3]: LITERAL('string')
        cases[4]: LITERAL('NULL')
        cases[5]: LITERAL('array')
        cases[6]: LITERAL('object')
        targets[0]: Block#7
        targets[1]: Block#8
        targets[2]: Block#9
        targets[3]: Block#10
        targets[4]: Block#11
        targets[5]: Block#12
        targets[6]: Block#13
        default: Block#14

Block#7
    Parent: Block#6
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#6
    Parent: Block#7
    Var#13<$data> = Phi(Var#11<$data>)
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#6
    Parent: Block#8
    Var#14<$data> = Phi(Var#11<$data>, Var#13<$data>)
    Stmt_Jump
        target: Block#10

Block#10
    Parent: Block#6
    Parent: Block#9
    Var#15<$data> = Phi(Var#11<$data>, Var#14<$data>)
    Stmt_Jump
        target: Block#11

Block#11
    Parent: Block#6
    Parent: Block#10
    Var#16<$data> = Phi(Var#11<$data>, Var#15<$data>)
    Terminal_Return
        expr: Var#16<$data>

Block#12
    Parent: Block#6
    Var#17<$data> = Phi(Var#11<$data>)
    Expr_FuncCall
        name: LITERAL('array_map')
        args[0]: LITERAL('_wp_json_prepare_data')
        args[1]: Var#17<$data>
        result: Var#18
    Terminal_Return
        expr: Var#18

Block#13
    Parent: Block#6
    Var#19<$data> = Phi(Var#11<$data>)
    Expr_FuncCall
        name: LITERAL('is_object')
        args[0]: Var#19<$data>
        result: Var#20
    Expr_BooleanNot
        expr: Var#20
        result: Var#21
    Stmt_JumpIf
        cond: Var#21
        if: Block#15
        else: Block#16

Block#14
    Parent: Block#6
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#22
    Terminal_Return
        expr: Var#22

Block#15
    Parent: Block#13
    Var#23<$data> = Phi(Var#19<$data>)
    Expr_Assertion<not(type(LITERAL('object')))>
        expr: Var#23<$data>
        result: Var#24<$data>
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#25
    Terminal_Return
        expr: Var#25

Block#16
    Parent: Block#13
    Var#26<$data> = Phi(Var#19<$data>)
    Expr_Assertion<not(not(type(LITERAL('object'))))>
        expr: Var#26<$data>
        result: Var#27<$data>
    Stmt_Jump
        target: Block#17

Block#17
    Parent: Block#16
    Var#28<$data> = Phi(Var#27<$data>)
    Expr_InstanceOf
        expr: Var#28<$data>
        class: LITERAL('JsonSerializable')
        result: Var#29
    Stmt_JumpIf
        cond: Var#29
        if: Block#18
        else: Block#19

Block#18
    Parent: Block#17
    Var#30<$data> = Phi(Var#28<$data>)
    Expr_Assertion<type(LITERAL('JsonSerializable'))>
        expr: Var#30<$data>
        result: Var#31<$data>
    Expr_MethodCall
        var: Var#31<$data>
        name: LITERAL('jsonSerialize')
        result: Var#32
    Expr_Assign
        var: Var#33<$data>
        expr: Var#32
        result: Var#34
    Stmt_Jump
        target: Block#20

Block#19
    Parent: Block#17
    Var#35<$data> = Phi(Var#28<$data>)
    Expr_Assertion<not(type(LITERAL('JsonSerializable')))>
        expr: Var#35<$data>
        result: Var#36<$data>
    Expr_FuncCall
        name: LITERAL('get_object_vars')
        args[0]: Var#36<$data>
        result: Var#37
    Expr_Assign
        var: Var#38<$data>
        expr: Var#37
        result: Var#39
    Stmt_Jump
        target: Block#20

Block#20
    Parent: Block#18
    Parent: Block#19
    Var#40<$data> = Phi(Var#33<$data>, Var#38<$data>)
    Expr_FuncCall
        name: LITERAL('_wp_json_prepare_data')
        args[0]: Var#40<$data>
        result: Var#41
    Terminal_Return
        expr: Var#41

Function wp_send_json():
Block#1
    Expr_Param
        name: LITERAL('response')
        result: Var#1<$response>
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Expr_FuncCall
        name: LITERAL('get_option')
        args[0]: LITERAL('blog_charset')
        result: Var#2
    Expr_BinaryOp_Concat
        left: LITERAL('Content-Type: application/json; charset=')
        right: Var#2
        result: Var#3
    Expr_FuncCall
        name: LITERAL('header')
        args[0]: Var#3
        result: Var#4
    Stmt_Jump
        target: Block#3

Block#3
    Parent: Block#2
    Var#5<$response> = Phi(Var#1<$response>)
    Expr_FuncCall
        name: LITERAL('wp_json_encode')
        args[0]: Var#5<$response>
        result: Var#6
    Terminal_Echo
        expr: Var#6
    Expr_FuncCall
        name: LITERAL('defined')
        args[0]: LITERAL('DOING_AJAX')
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#4
        else: Block#5

Block#4
    Parent: Block#3
    Expr_ConstFetch
        name: LITERAL('DOING_AJAX')
        result: Var#8
    Expr_Cast_Bool
        expr: Var#8
        result: Var#9
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Var#10 = Phi(LITERAL(false), Var#9)
    Stmt_JumpIf
        cond: Var#10
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Expr_FuncCall
        name: LITERAL('wp_die')
        result: Var#11
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#5
    Expr_Exit
        result: Var#12
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#6
    Parent: Block#7
    Terminal_Return

Function wp_send_json_success():
Block#1
    Expr_Param
        name: LITERAL('data')
        defaultVar: Var#1
        result: Var#2<$data>
        defaultBlock: Block#2
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#3
    Expr_Array
        keys[0]: LITERAL('success')
        values[0]: Var#3
        result: Var#4
    Expr_Assign
        var: Var#5<$response>
        expr: Var#4
        result: Var#6
    Expr_Isset
        vars[0]: Var#2<$data>
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#1

Block#3
    Parent: Block#1
    Var#8<$data> = Phi(Var#2<$data>)
    Var#9<$response> = Phi(Var#5<$response>)
    Expr_ArrayDimFetch
        var: Var#9<$response>
        dim: LITERAL('data')
        result: Var#10
    Expr_Assign
        var: Var#10
        expr: Var#8<$data>
        result: Var#11
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Var#12<$response> = Phi(Var#9<$response>, Var#5<$response>)
    Expr_FuncCall
        name: LITERAL('wp_send_json')
        args[0]: Var#12<$response>
        result: Var#13
    Terminal_Return

Function wp_send_json_error():
Block#1
    Expr_Param
        name: LITERAL('data')
        defaultVar: Var#1
        result: Var#2<$data>
        defaultBlock: Block#2
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#3
    Expr_Array
        keys[0]: LITERAL('success')
        values[0]: Var#3
        result: Var#4
    Expr_Assign
        var: Var#5<$response>
        expr: Var#4
        result: Var#6
    Expr_Isset
        vars[0]: Var#2<$data>
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#1

Block#3
    Parent: Block#1
    Var#8<$data> = Phi(Var#2<$data>)
    Expr_FuncCall
        name: LITERAL('is_wp_error')
        args[0]: Var#8<$data>
        result: Var#9
    Stmt_JumpIf
        cond: Var#9
        if: Block#5
        else: Block#6

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#7

Block#5
    Parent: Block#3
    Var#10<$data> = Phi(Var#8<$data>)
    Expr_Array
        result: Var#11
    Expr_Assign
        var: Var#12<$result>
        expr: Var#11
        result: Var#13
    Expr_PropertyFetch
        var: Var#10<$data>
        name: LITERAL('errors')
        result: Var#14
    Iterator_Reset
        var: Var#14
    Stmt_Jump
        target: Block#8

Block#6
    Parent: Block#3
    Var#15<$data> = Phi(Var#8<$data>)
    Var#16<$response> = Phi(Var#5<$response>)
    Expr_ArrayDimFetch
        var: Var#16<$response>
        dim: LITERAL('data')
        result: Var#17
    Expr_Assign
        var: Var#17
        expr: Var#15<$data>
        result: Var#18
    Stmt_Jump
        target: Block#9

Block#7
    Parent: Block#9
    Parent: Block#4
    Var#19<$response> = Phi(Var#20<$response>, Var#5<$response>)
    Expr_FuncCall
        name: LITERAL('wp_send_json')
        args[0]: Var#19<$response>
        result: Var#21
    Terminal_Return

Block#8
    Parent: Block#5
    Parent: Block#18
    Var#22<$result> = Phi(Var#12<$result>, Var#23<$result>)
    Var#24<$response> = Phi(Var#5<$response>, Var#25<$response>)
    Iterator_Valid
        var: Var#14
        result: Var#26
    Stmt_JumpIf
        cond: Var#26
        if: Block#10
        else: Block#11

Block#9
    Parent: Block#13
    Parent: Block#6
    Var#20<$response> = Phi(Var#27<$response>, Var#16<$response>)
    Stmt_Jump
        target: Block#7

Block#10
    Parent: Block#8
    Iterator_Key
        var: Var#14
        result: Var#28
    Expr_Assign
        var: Var#29<$code>
        expr: Var#28
        result: Var#30
    Iterator_Value
        var: Var#14
        result: Var#31
    Expr_Assign
        var: Var#32<$messages>
        expr: Var#31
        result: Var#33
    Iterator_Reset
        var: Var#32<$messages>
    Stmt_Jump
        target: Block#12

Block#11
    Parent: Block#8
    Stmt_Jump
        target: Block#13

Block#12
    Parent: Block#10
    Parent: Block#16
    Var#34<$code> = Phi(Var#29<$code>, Var#35<$code>)
    Var#23<$result> = Phi(Var#22<$result>, Var#36<$result>)
    Var#25<$response> = Phi(Var#24<$response>)
    Iterator_Valid
        var: Var#32<$messages>
        result: Var#37
    Stmt_JumpIf
        cond: Var#37
        if: Block#14
        else: Block#15

Block#13
    Parent: Block#11
    Var#38<$result> = Phi(Var#22<$result>)
    Var#27<$response> = Phi(Var#24<$response>)
    Expr_ArrayDimFetch
        var: Var#27<$response>
        dim: LITERAL('data')
        result: Var#39
    Expr_Assign
        var: Var#39
        expr: Var#38<$result>
        result: Var#40
    Stmt_Jump
        target: Block#9

Block#14
    Parent: Block#12
    Var#35<$code> = Phi(Var#34<$code>)
    Var#36<$result> = Phi(Var#23<$result>)
    Iterator_Value
        var: Var#32<$messages>
        result: Var#41
    Expr_Assign
        var: Var#42<$message>
        expr: Var#41
        result: Var#43
    Expr_Array
        keys[0]: LITERAL('code')
        keys[1]: LITERAL('message')
        values[0]: Var#35<$code>
        values[1]: Var#42<$message>
        result: Var#44
    Expr_ArrayDimFetch
        var: Var#36<$result>
        result: Var#45
    Expr_Assign
        var: Var#45
        expr: Var#44
        result: Var#46
    Stmt_Jump
        target: Block#16

Block#15
    Parent: Block#12
    Stmt_Jump
        target: Block#17

Block#16
    Parent: Block#14
    Stmt_Jump
        target: Block#12

Block#17
    Parent: Block#15
    Stmt_Jump
        target: Block#18

Block#18
    Parent: Block#17
    Stmt_Jump
        target: Block#8

Function wp_check_jsonp_callback():
Block#1
    Expr_Param
        name: LITERAL('callback')
        result: Var#1<$callback>
    Var#2<$illegal_char_count> = Phi()
    Expr_FuncCall
        name: LITERAL('is_string')
        args[0]: Var#1<$callback>
        result: Var#3
    Expr_BooleanNot
        expr: Var#3
        result: Var#4
    Stmt_JumpIf
        cond: Var#4
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#5<$callback> = Phi(Var#1<$callback>)
    Expr_Assertion<not(type(LITERAL('string')))>
        expr: Var#5<$callback>
        result: Var#6<$callback>
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#7
    Terminal_Return
        expr: Var#7

Block#3
    Parent: Block#1
    Var#8<$callback> = Phi(Var#1<$callback>)
    Expr_Assertion<not(not(type(LITERAL('string'))))>
        expr: Var#8<$callback>
        result: Var#9<$callback>
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Var#10<$callback> = Phi(Var#9<$callback>)
    Var#11<$illegal_char_count> = Phi(Var#2<$illegal_char_count>)
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#12
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/[^\\w\\.]/')
        args[1]: LITERAL('')
        args[2]: Var#10<$callback>
        args[3]: Var#12
        args[4]: Var#11<$illegal_char_count>
        result: Var#13
    Expr_Assign
        var: Var#14<$jsonp_callback>
        expr: Var#13
        result: Var#15
    Expr_BinaryOp_Identical
        left: LITERAL(0)
        right: Var#11<$illegal_char_count>
        result: Var#16
    Terminal_Return
        expr: Var#16

Function _config_wp_home():
Block#1
    Expr_Param
        name: LITERAL('url')
        defaultVar: LITERAL('')
        result: Var#1<$url>
        defaultBlock: Block#2
    Expr_FuncCall
        name: LITERAL('defined')
        args[0]: LITERAL('WP_HOME')
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#3
        else: Block#4

Block#2

Block#3
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('WP_HOME')
        result: Var#3
    Expr_FuncCall
        name: LITERAL('untrailingslashit')
        args[0]: Var#3
        result: Var#4
    Terminal_Return
        expr: Var#4

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#4
    Var#5<$url> = Phi(Var#1<$url>)
    Terminal_Return
        expr: Var#5<$url>

Function _config_wp_siteurl():
Block#1
    Expr_Param
        name: LITERAL('url')
        defaultVar: LITERAL('')
        result: Var#1<$url>
        defaultBlock: Block#2
    Expr_FuncCall
        name: LITERAL('defined')
        args[0]: LITERAL('WP_SITEURL')
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#3
        else: Block#4

Block#2

Block#3
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('WP_SITEURL')
        result: Var#3
    Expr_FuncCall
        name: LITERAL('untrailingslashit')
        args[0]: Var#3
        result: Var#4
    Terminal_Return
        expr: Var#4

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#4
    Var#5<$url> = Phi(Var#1<$url>)
    Terminal_Return
        expr: Var#5<$url>

Function _mce_set_direction():
Block#1
    Expr_Param
        name: LITERAL('mce_init')
        result: Var#1<$mce_init>
    Expr_FuncCall
        name: LITERAL('is_rtl')
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#3<$mce_init> = Phi(Var#1<$mce_init>)
    Expr_ArrayDimFetch
        var: Var#3<$mce_init>
        dim: LITERAL('directionality')
        result: Var#4
    Expr_Assign
        var: Var#4
        expr: LITERAL('rtl')
        result: Var#5
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#6
    Expr_ArrayDimFetch
        var: Var#3<$mce_init>
        dim: LITERAL('rtl_ui')
        result: Var#7
    Expr_Assign
        var: Var#7
        expr: Var#6
        result: Var#8
    Expr_ArrayDimFetch
        var: Var#3<$mce_init>
        dim: LITERAL('plugins')
        result: Var#9
    Expr_Empty
        expr: Var#9
        result: Var#10
    Expr_BooleanNot
        expr: Var#10
        result: Var#11
    Stmt_JumpIf
        cond: Var#11
        if: Block#4
        else: Block#5

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#6

Block#4
    Parent: Block#2
    Var#12<$mce_init> = Phi(Var#3<$mce_init>)
    Expr_ArrayDimFetch
        var: Var#12<$mce_init>
        dim: LITERAL('plugins')
        result: Var#13
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#13
        args[1]: LITERAL('directionality')
        result: Var#14
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#15
    Expr_BinaryOp_Identical
        left: Var#14
        right: Var#15
        result: Var#16
    Expr_Cast_Bool
        expr: Var#16
        result: Var#17
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#2
    Parent: Block#4
    Var#18 = Phi(LITERAL(false), Var#17)
    Var#19<$mce_init> = Phi(Var#3<$mce_init>, Var#12<$mce_init>)
    Stmt_JumpIf
        cond: Var#18
        if: Block#7
        else: Block#8

Block#6
    Parent: Block#14
    Parent: Block#3
    Var#20<$mce_init> = Phi(Var#21<$mce_init>, Var#1<$mce_init>)
    Terminal_Return
        expr: Var#20<$mce_init>

Block#7
    Parent: Block#5
    Var#22<$mce_init> = Phi(Var#19<$mce_init>)
    Expr_ArrayDimFetch
        var: Var#22<$mce_init>
        dim: LITERAL('plugins')
        result: Var#23
    Expr_BinaryOp_Concat
        left: Var#23
        right: LITERAL(',directionality')
        result: Var#24
    Expr_Assign
        var: Var#23
        expr: Var#24
        result: Var#25
    Stmt_Jump
        target: Block#9

Block#8
    Parent: Block#5
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#7
    Parent: Block#8
    Var#26<$mce_init> = Phi(Var#22<$mce_init>, Var#19<$mce_init>)
    Expr_ArrayDimFetch
        var: Var#26<$mce_init>
        dim: LITERAL('toolbar1')
        result: Var#27
    Expr_Empty
        expr: Var#27
        result: Var#28
    Expr_BooleanNot
        expr: Var#28
        result: Var#29
    Stmt_JumpIf
        cond: Var#29
        if: Block#10
        else: Block#11

Block#10
    Parent: Block#9
    Var#30<$mce_init> = Phi(Var#26<$mce_init>)
    Expr_ArrayDimFetch
        var: Var#30<$mce_init>
        dim: LITERAL('toolbar1')
        result: Var#31
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('/\\bltr\\b/')
        args[1]: Var#31
        result: Var#32
    Expr_BooleanNot
        expr: Var#32
        result: Var#33
    Expr_Cast_Bool
        expr: Var#33
        result: Var#34
    Stmt_Jump
        target: Block#11

Block#11
    Parent: Block#9
    Parent: Block#10
    Var#35 = Phi(LITERAL(false), Var#34)
    Var#36<$mce_init> = Phi(Var#26<$mce_init>, Var#30<$mce_init>)
    Stmt_JumpIf
        cond: Var#35
        if: Block#12
        else: Block#13

Block#12
    Parent: Block#11
    Var#37<$mce_init> = Phi(Var#36<$mce_init>)
    Expr_ArrayDimFetch
        var: Var#37<$mce_init>
        dim: LITERAL('toolbar1')
        result: Var#38
    Expr_BinaryOp_Concat
        left: Var#38
        right: LITERAL(',ltr')
        result: Var#39
    Expr_Assign
        var: Var#38
        expr: Var#39
        result: Var#40
    Stmt_Jump
        target: Block#14

Block#13
    Parent: Block#11
    Stmt_Jump
        target: Block#14

Block#14
    Parent: Block#12
    Parent: Block#13
    Var#21<$mce_init> = Phi(Var#37<$mce_init>, Var#36<$mce_init>)
    Stmt_Jump
        target: Block#6

Function smilies_init():
Block#1
    Var#1<$wpsmiliestrans> = Phi()
    Terminal_GlobalVar
        var: LITERAL('wpsmiliestrans')
    Terminal_GlobalVar
        var: LITERAL('wp_smiliessearch')
    Expr_FuncCall
        name: LITERAL('get_option')
        args[0]: LITERAL('use_smilies')
        result: Var#2
    Expr_BooleanNot
        expr: Var#2
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Terminal_Return

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Var#4<$wpsmiliestrans> = Phi(Var#1<$wpsmiliestrans>)
    Expr_Isset
        vars[0]: Var#4<$wpsmiliestrans>
        result: Var#5
    Expr_BooleanNot
        expr: Var#5
        result: Var#6
    Stmt_JumpIf
        cond: Var#6
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Expr_Array
        keys[0]: LITERAL(':mrgreen:')
        keys[1]: LITERAL(':neutral:')
        keys[2]: LITERAL(':twisted:')
        keys[3]: LITERAL(':arrow:')
        keys[4]: LITERAL(':shock:')
        keys[5]: LITERAL(':smile:')
        keys[6]: LITERAL(':???:')
        keys[7]: LITERAL(':cool:')
        keys[8]: LITERAL(':evil:')
        keys[9]: LITERAL(':grin:')
        keys[10]: LITERAL(':idea:')
        keys[11]: LITERAL(':oops:')
        keys[12]: LITERAL(':razz:')
        keys[13]: LITERAL(':roll:')
        keys[14]: LITERAL(':wink:')
        keys[15]: LITERAL(':cry:')
        keys[16]: LITERAL(':eek:')
        keys[17]: LITERAL(':lol:')
        keys[18]: LITERAL(':mad:')
        keys[19]: LITERAL(':sad:')
        keys[20]: LITERAL('8-)')
        keys[21]: LITERAL('8-O')
        keys[22]: LITERAL(':-(')
        keys[23]: LITERAL(':-)')
        keys[24]: LITERAL(':-?')
        keys[25]: LITERAL(':-D')
        keys[26]: LITERAL(':-P')
        keys[27]: LITERAL(':-o')
        keys[28]: LITERAL(':-x')
        keys[29]: LITERAL(':-|')
        keys[30]: LITERAL(';-)')
        keys[31]: LITERAL('8O')
        keys[32]: LITERAL(':(')
        keys[33]: LITERAL(':)')
        keys[34]: LITERAL(':?')
        keys[35]: LITERAL(':D')
        keys[36]: LITERAL(':P')
        keys[37]: LITERAL(':o')
        keys[38]: LITERAL(':x')
        keys[39]: LITERAL(':|')
        keys[40]: LITERAL(';)')
        keys[41]: LITERAL(':!:')
        keys[42]: LITERAL(':?:')
        values[0]: LITERAL('mrgreen.png')
        values[1]: LITERAL('😐')
        values[2]: LITERAL('😈')
        values[3]: LITERAL('➡')
        values[4]: LITERAL('😯')
        values[5]: LITERAL('🙂')
        values[6]: LITERAL('😕')
        values[7]: LITERAL('😎')
        values[8]: LITERAL('👿')
        values[9]: LITERAL('😀')
        values[10]: LITERAL('💡')
        values[11]: LITERAL('😳')
        values[12]: LITERAL('😛')
        values[13]: LITERAL('🙄')
        values[14]: LITERAL('😉')
        values[15]: LITERAL('😥')
        values[16]: LITERAL('😮')
        values[17]: LITERAL('😆')
        values[18]: LITERAL('😡')
        values[19]: LITERAL('🙁')
        values[20]: LITERAL('😎')
        values[21]: LITERAL('😯')
        values[22]: LITERAL('🙁')
        values[23]: LITERAL('🙂')
        values[24]: LITERAL('😕')
        values[25]: LITERAL('😀')
        values[26]: LITERAL('😛')
        values[27]: LITERAL('😮')
        values[28]: LITERAL('😡')
        values[29]: LITERAL('😐')
        values[30]: LITERAL('😉')
        values[31]: LITERAL('😯')
        values[32]: LITERAL('🙁')
        values[33]: LITERAL('🙂')
        values[34]: LITERAL('😕')
        values[35]: LITERAL('😀')
        values[36]: LITERAL('😛')
        values[37]: LITERAL('😮')
        values[38]: LITERAL('😡')
        values[39]: LITERAL('😐')
        values[40]: LITERAL('😉')
        values[41]: LITERAL('❗')
        values[42]: LITERAL('❓')
        result: Var#7
    Expr_Assign
        var: Var#8<$wpsmiliestrans>
        expr: Var#7
        result: Var#9
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#5
    Parent: Block#6
    Var#10<$wpsmiliestrans> = Phi(Var#8<$wpsmiliestrans>, Var#4<$wpsmiliestrans>)
    Expr_FuncCall
        name: LITERAL('count')
        args[0]: Var#10<$wpsmiliestrans>
        result: Var#11
    Expr_BinaryOp_Equal
        left: Var#11
        right: LITERAL(0)
        result: Var#12
    Stmt_JumpIf
        cond: Var#12
        if: Block#8
        else: Block#9

Block#8
    Parent: Block#7
    Terminal_Return

Block#9
    Parent: Block#7
    Stmt_Jump
        target: Block#10

Block#10
    Parent: Block#9
    Var#13<$wpsmiliestrans> = Phi(Var#10<$wpsmiliestrans>)
    Expr_FuncCall
        name: LITERAL('krsort')
        args[0]: Var#13<$wpsmiliestrans>
        result: Var#14
    Expr_FuncCall
        name: LITERAL('wp_spaces_regexp')
        result: Var#15
    Expr_Assign
        var: Var#16<$spaces>
        expr: Var#15
        result: Var#17
    Expr_BinaryOp_Concat
        left: LITERAL('/(?<=')
        right: Var#16<$spaces>
        result: Var#18
    Expr_BinaryOp_Concat
        left: Var#18
        right: LITERAL('|^)')
        result: Var#19
    Expr_Assign
        var: Var#20<$wp_smiliessearch>
        expr: Var#19
        result: Var#21
    Expr_Assign
        var: Var#22<$subchar>
        expr: LITERAL('')
        result: Var#23
    Expr_Cast_Array
        expr: Var#13<$wpsmiliestrans>
        result: Var#24
    Iterator_Reset
        var: Var#24
    Stmt_Jump
        target: Block#11

Block#11
    Parent: Block#10
    Parent: Block#21
    Var#25<$subchar> = Phi(Var#22<$subchar>, Var#26<$subchar>)
    Var#27<$wp_smiliessearch> = Phi(Var#20<$wp_smiliessearch>, Var#28<$wp_smiliessearch>)
    Var#29<$spaces> = Phi(Var#16<$spaces>, Var#30<$spaces>)
    Iterator_Valid
        var: Var#24
        result: Var#31
    Stmt_JumpIf
        cond: Var#31
        if: Block#12
        else: Block#13

Block#12
    Parent: Block#11
    Var#32<$subchar> = Phi(Var#25<$subchar>)
    Iterator_Key
        var: Var#24
        result: Var#33
    Expr_Assign
        var: Var#34<$smiley>
        expr: Var#33
        result: Var#35
    Iterator_Value
        var: Var#24
        result: Var#36
    Expr_Assign
        var: Var#37<$img>
        expr: Var#36
        result: Var#38
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#34<$smiley>
        args[1]: LITERAL(0)
        args[2]: LITERAL(1)
        result: Var#39
    Expr_Assign
        var: Var#40<$firstchar>
        expr: Var#39
        result: Var#41
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#34<$smiley>
        args[1]: LITERAL(1)
        result: Var#42
    Expr_Assign
        var: Var#43<$rest>
        expr: Var#42
        result: Var#44
    Expr_BinaryOp_NotEqual
        left: Var#40<$firstchar>
        right: Var#32<$subchar>
        result: Var#45
    Stmt_JumpIf
        cond: Var#45
        if: Block#14
        else: Block#15

Block#13
    Parent: Block#11
    Stmt_Jump
        target: Block#16

Block#14
    Parent: Block#12
    Var#46<$subchar> = Phi(Var#32<$subchar>)
    Expr_BinaryOp_NotEqual
        left: Var#46<$subchar>
        right: LITERAL('')
        result: Var#47
    Stmt_JumpIf
        cond: Var#47
        if: Block#17
        else: Block#18

Block#15
    Parent: Block#12
    Var#48<$wp_smiliessearch> = Phi(Var#27<$wp_smiliessearch>)
    Expr_BinaryOp_Concat
        left: Var#48<$wp_smiliessearch>
        right: LITERAL('|')
        result: Var#49
    Expr_Assign
        var: Var#50<$wp_smiliessearch>
        expr: Var#49
        result: Var#51
    Stmt_Jump
        target: Block#19

Block#16
    Parent: Block#13
    Var#52<$wp_smiliessearch> = Phi(Var#27<$wp_smiliessearch>)
    Var#53<$spaces> = Phi(Var#29<$spaces>)
    Expr_BinaryOp_Concat
        left: LITERAL(')(?=')
        right: Var#53<$spaces>
        result: Var#54
    Expr_BinaryOp_Concat
        left: Var#54
        right: LITERAL('|$)/m')
        result: Var#55
    Expr_BinaryOp_Concat
        left: Var#52<$wp_smiliessearch>
        right: Var#55
        result: Var#56
    Expr_Assign
        var: Var#57<$wp_smiliessearch>
        expr: Var#56
        result: Var#58
    Terminal_Return

Block#17
    Parent: Block#14
    Var#59<$wp_smiliessearch> = Phi(Var#27<$wp_smiliessearch>)
    Var#60<$spaces> = Phi(Var#29<$spaces>)
    Expr_BinaryOp_Concat
        left: LITERAL(')(?=')
        right: Var#60<$spaces>
        result: Var#61
    Expr_BinaryOp_Concat
        left: Var#61
        right: LITERAL('|$)')
        result: Var#62
    Expr_BinaryOp_Concat
        left: Var#59<$wp_smiliessearch>
        right: Var#62
        result: Var#63
    Expr_Assign
        var: Var#64<$wp_smiliessearch>
        expr: Var#63
        result: Var#65
    Expr_BinaryOp_Concat
        left: LITERAL('|(?<=')
        right: Var#60<$spaces>
        result: Var#66
    Expr_BinaryOp_Concat
        left: Var#66
        right: LITERAL('|^)')
        result: Var#67
    Expr_BinaryOp_Concat
        left: Var#64<$wp_smiliessearch>
        right: Var#67
        result: Var#68
    Expr_Assign
        var: Var#69<$wp_smiliessearch>
        expr: Var#68
        result: Var#70
    Stmt_Jump
        target: Block#20

Block#18
    Parent: Block#14
    Stmt_Jump
        target: Block#20

Block#19
    Parent: Block#20
    Parent: Block#15
    Var#26<$subchar> = Phi(Var#71<$subchar>, Var#32<$subchar>)
    Var#30<$spaces> = Phi(Var#72<$spaces>, Var#29<$spaces>)
    Var#73<$wp_smiliessearch> = Phi(Var#74<$wp_smiliessearch>, Var#50<$wp_smiliessearch>)
    Var#75<$rest> = Phi(Var#76<$rest>, Var#43<$rest>)
    Expr_FuncCall
        name: LITERAL('preg_quote')
        args[0]: Var#75<$rest>
        args[1]: LITERAL('/')
        result: Var#77
    Expr_BinaryOp_Concat
        left: Var#73<$wp_smiliessearch>
        right: Var#77
        result: Var#78
    Expr_Assign
        var: Var#28<$wp_smiliessearch>
        expr: Var#78
        result: Var#79
    Stmt_Jump
        target: Block#21

Block#20
    Parent: Block#17
    Parent: Block#18
    Var#72<$spaces> = Phi(Var#60<$spaces>, Var#29<$spaces>)
    Var#80<$firstchar> = Phi(Var#40<$firstchar>)
    Var#81<$wp_smiliessearch> = Phi(Var#69<$wp_smiliessearch>, Var#27<$wp_smiliessearch>)
    Var#76<$rest> = Phi(Var#43<$rest>)
    Expr_Assign
        var: Var#71<$subchar>
        expr: Var#80<$firstchar>
        result: Var#82
    Expr_FuncCall
        name: LITERAL('preg_quote')
        args[0]: Var#80<$firstchar>
        args[1]: LITERAL('/')
        result: Var#83
    Expr_BinaryOp_Concat
        left: Var#83
        right: LITERAL('(?:')
        result: Var#84
    Expr_BinaryOp_Concat
        left: Var#81<$wp_smiliessearch>
        right: Var#84
        result: Var#85
    Expr_Assign
        var: Var#74<$wp_smiliessearch>
        expr: Var#85
        result: Var#86
    Stmt_Jump
        target: Block#19

Block#21
    Parent: Block#19
    Stmt_Jump
        target: Block#11

Function wp_parse_args():
Block#1
    Expr_Param
        name: LITERAL('args')
        result: Var#1<$args>
    Expr_Param
        name: LITERAL('defaults')
        defaultVar: LITERAL('')
        result: Var#2<$defaults>
        defaultBlock: Block#2
    Var#3<$r> = Phi()
    Expr_FuncCall
        name: LITERAL('is_object')
        args[0]: Var#1<$args>
        result: Var#4
    Stmt_JumpIf
        cond: Var#4
        if: Block#3
        else: Block#4

Block#2

Block#3
    Parent: Block#1
    Var#5<$args> = Phi(Var#1<$args>)
    Expr_Assertion<type(LITERAL('object'))>
        expr: Var#5<$args>
        result: Var#6<$args>
    Expr_FuncCall
        name: LITERAL('get_object_vars')
        args[0]: Var#6<$args>
        result: Var#7
    Expr_Assign
        var: Var#8<$r>
        expr: Var#7
        result: Var#9
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Var#10<$args> = Phi(Var#1<$args>)
    Expr_Assertion<not(type(LITERAL('object')))>
        expr: Var#10<$args>
        result: Var#11<$args>
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#11<$args>
        result: Var#12
    Stmt_JumpIf
        cond: Var#12
        if: Block#6
        else: Block#7

Block#5
    Parent: Block#3
    Parent: Block#6
    Parent: Block#7
    Var#13<$defaults> = Phi(Var#2<$defaults>)
    Var#14<$r> = Phi(Var#8<$r>, Var#15<$r>, Var#16<$r>)
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#13<$defaults>
        result: Var#17
    Stmt_JumpIf
        cond: Var#17
        if: Block#8
        else: Block#9

Block#6
    Parent: Block#4
    Var#18<$args> = Phi(Var#11<$args>)
    Expr_Assertion<type(LITERAL('array'))>
        expr: Var#18<$args>
        result: Var#19<$args>
    Expr_AssignRef
        var: Var#15<$r>
        expr: Var#19<$args>
        result: Var#20
    Stmt_Jump
        target: Block#5

Block#7
    Parent: Block#4
    Var#21<$args> = Phi(Var#11<$args>)
    Var#16<$r> = Phi(Var#3<$r>)
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#21<$args>
        result: Var#22<$args>
    Expr_FuncCall
        name: LITERAL('wp_parse_str')
        args[0]: Var#22<$args>
        args[1]: Var#16<$r>
        result: Var#23
    Stmt_Jump
        target: Block#5

Block#8
    Parent: Block#5
    Var#24<$defaults> = Phi(Var#13<$defaults>)
    Var#25<$r> = Phi(Var#14<$r>)
    Expr_Assertion<type(LITERAL('array'))>
        expr: Var#24<$defaults>
        result: Var#26<$defaults>
    Expr_FuncCall
        name: LITERAL('array_merge')
        args[0]: Var#26<$defaults>
        args[1]: Var#25<$r>
        result: Var#27
    Terminal_Return
        expr: Var#27

Block#9
    Parent: Block#5
    Var#28<$defaults> = Phi(Var#13<$defaults>)
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#28<$defaults>
        result: Var#29<$defaults>
    Stmt_Jump
        target: Block#10

Block#10
    Parent: Block#9
    Var#30<$r> = Phi(Var#14<$r>)
    Terminal_Return
        expr: Var#30<$r>

Function wp_parse_id_list():
Block#1
    Expr_Param
        name: LITERAL('list')
        result: Var#1<$list>
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#1<$list>
        result: Var#2
    Expr_BooleanNot
        expr: Var#2
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#4<$list> = Phi(Var#1<$list>)
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#4<$list>
        result: Var#5<$list>
    Expr_FuncCall
        name: LITERAL('preg_split')
        args[0]: LITERAL('/[\\s,]+/')
        args[1]: Var#5<$list>
        result: Var#6
    Expr_Assign
        var: Var#7<$list>
        expr: Var#6
        result: Var#8
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Var#9<$list> = Phi(Var#1<$list>)
    Expr_Assertion<not(not(type(LITERAL('array'))))>
        expr: Var#9<$list>
        result: Var#10<$list>
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Var#11<$list> = Phi(Var#7<$list>, Var#10<$list>)
    Expr_FuncCall
        name: LITERAL('array_map')
        args[0]: LITERAL('absint')
        args[1]: Var#11<$list>
        result: Var#12
    Expr_FuncCall
        name: LITERAL('array_unique')
        args[0]: Var#12
        result: Var#13
    Terminal_Return
        expr: Var#13

Function wp_array_slice_assoc():
Block#1
    Expr_Param
        name: LITERAL('array')
        result: Var#1<$array>
    Expr_Param
        name: LITERAL('keys')
        result: Var#2<$keys>
    Expr_Array
        result: Var#3
    Expr_Assign
        var: Var#4<$slice>
        expr: Var#3
        result: Var#5
    Iterator_Reset
        var: Var#2<$keys>
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Parent: Block#9
    Var#6<$array> = Phi(Var#1<$array>, Var#7<$array>)
    Var#8<$slice> = Phi(Var#4<$slice>, Var#9<$slice>)
    Iterator_Valid
        var: Var#2<$keys>
        result: Var#10
    Stmt_JumpIf
        cond: Var#10
        if: Block#3
        else: Block#4

Block#3
    Parent: Block#2
    Var#11<$array> = Phi(Var#6<$array>)
    Iterator_Value
        var: Var#2<$keys>
        result: Var#12
    Expr_Assign
        var: Var#13<$key>
        expr: Var#12
        result: Var#14
    Expr_ArrayDimFetch
        var: Var#11<$array>
        dim: Var#13<$key>
        result: Var#15
    Expr_Isset
        vars[0]: Var#15
        result: Var#16
    Stmt_JumpIf
        cond: Var#16
        if: Block#5
        else: Block#6

Block#4
    Parent: Block#2
    Stmt_Jump
        target: Block#7

Block#5
    Parent: Block#3
    Var#17<$array> = Phi(Var#11<$array>)
    Var#18<$key> = Phi(Var#13<$key>)
    Var#19<$slice> = Phi(Var#8<$slice>)
    Expr_ArrayDimFetch
        var: Var#17<$array>
        dim: Var#18<$key>
        result: Var#20
    Expr_ArrayDimFetch
        var: Var#19<$slice>
        dim: Var#18<$key>
        result: Var#21
    Expr_Assign
        var: Var#21
        expr: Var#20
        result: Var#22
    Stmt_Jump
        target: Block#8

Block#6
    Parent: Block#3
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#4
    Var#23<$slice> = Phi(Var#8<$slice>)
    Terminal_Return
        expr: Var#23<$slice>

Block#8
    Parent: Block#5
    Parent: Block#6
    Var#7<$array> = Phi(Var#17<$array>, Var#11<$array>)
    Var#9<$slice> = Phi(Var#19<$slice>, Var#8<$slice>)
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#8
    Stmt_Jump
        target: Block#2

Function wp_is_numeric_array():
Block#1
    Expr_Param
        name: LITERAL('data')
        result: Var#1<$data>
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#1<$data>
        result: Var#2
    Expr_BooleanNot
        expr: Var#2
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#4<$data> = Phi(Var#1<$data>)
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#4<$data>
        result: Var#5<$data>
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#6
    Terminal_Return
        expr: Var#6

Block#3
    Parent: Block#1
    Var#7<$data> = Phi(Var#1<$data>)
    Expr_Assertion<not(not(type(LITERAL('array'))))>
        expr: Var#7<$data>
        result: Var#8<$data>
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Var#9<$data> = Phi(Var#8<$data>)
    Expr_FuncCall
        name: LITERAL('array_keys')
        args[0]: Var#9<$data>
        result: Var#10
    Expr_Assign
        var: Var#11<$keys>
        expr: Var#10
        result: Var#12
    Expr_FuncCall
        name: LITERAL('array_filter')
        args[0]: Var#11<$keys>
        args[1]: LITERAL('is_string')
        result: Var#13
    Expr_Assign
        var: Var#14<$string_keys>
        expr: Var#13
        result: Var#15
    Expr_FuncCall
        name: LITERAL('count')
        args[0]: Var#14<$string_keys>
        result: Var#16
    Expr_BinaryOp_Identical
        left: Var#16
        right: LITERAL(0)
        result: Var#17
    Terminal_Return
        expr: Var#17

Function wp_filter_object_list():
Block#1
    Expr_Param
        name: LITERAL('list')
        result: Var#1<$list>
    Expr_Param
        name: LITERAL('args')
        defaultVar: Var#2
        result: Var#3<$args>
        defaultBlock: Block#2
    Expr_Param
        name: LITERAL('operator')
        defaultVar: LITERAL('and')
        result: Var#4<$operator>
        defaultBlock: Block#3
    Expr_Param
        name: LITERAL('field')
        defaultVar: Var#5
        result: Var#6<$field>
        defaultBlock: Block#4
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#1<$list>
        result: Var#7
    Expr_BooleanNot
        expr: Var#7
        result: Var#8
    Stmt_JumpIf
        cond: Var#8
        if: Block#5
        else: Block#6

Block#2
    Expr_Array
        result: Var#2

Block#3

Block#4
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#5

Block#5
    Parent: Block#1
    Var#9<$list> = Phi(Var#1<$list>)
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#9<$list>
        result: Var#10<$list>
    Expr_Array
        result: Var#11
    Terminal_Return
        expr: Var#11

Block#6
    Parent: Block#1
    Var#12<$list> = Phi(Var#1<$list>)
    Expr_Assertion<not(not(type(LITERAL('array'))))>
        expr: Var#12<$list>
        result: Var#13<$list>
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#6
    Var#14<$list> = Phi(Var#13<$list>)
    Var#15<$args> = Phi(Var#3<$args>)
    Var#16<$operator> = Phi(Var#4<$operator>)
    Var#17<$field> = Phi(Var#6<$field>)
    Expr_FuncCall
        name: LITERAL('wp_list_filter')
        args[0]: Var#14<$list>
        args[1]: Var#15<$args>
        args[2]: Var#16<$operator>
        result: Var#18
    Expr_Assign
        var: Var#19<$list>
        expr: Var#18
        result: Var#20
    Stmt_JumpIf
        cond: Var#17<$field>
        if: Block#8
        else: Block#9

Block#8
    Parent: Block#7
    Var#21<$list> = Phi(Var#19<$list>)
    Var#22<$field> = Phi(Var#17<$field>)
    Expr_FuncCall
        name: LITERAL('wp_list_pluck')
        args[0]: Var#21<$list>
        args[1]: Var#22<$field>
        result: Var#23
    Expr_Assign
        var: Var#24<$list>
        expr: Var#23
        result: Var#25
    Stmt_Jump
        target: Block#10

Block#9
    Parent: Block#7
    Stmt_Jump
        target: Block#10

Block#10
    Parent: Block#8
    Parent: Block#9
    Var#26<$list> = Phi(Var#24<$list>, Var#19<$list>)
    Terminal_Return
        expr: Var#26<$list>

Function wp_list_filter():
Block#1
    Expr_Param
        name: LITERAL('list')
        result: Var#1<$list>
    Expr_Param
        name: LITERAL('args')
        defaultVar: Var#2
        result: Var#3<$args>
        defaultBlock: Block#2
    Expr_Param
        name: LITERAL('operator')
        defaultVar: LITERAL('AND')
        result: Var#4<$operator>
        defaultBlock: Block#3
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#1<$list>
        result: Var#5
    Expr_BooleanNot
        expr: Var#5
        result: Var#6
    Stmt_JumpIf
        cond: Var#6
        if: Block#4
        else: Block#5

Block#2
    Expr_Array
        result: Var#2

Block#3

Block#4
    Parent: Block#1
    Var#7<$list> = Phi(Var#1<$list>)
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#7<$list>
        result: Var#8<$list>
    Expr_Array
        result: Var#9
    Terminal_Return
        expr: Var#9

Block#5
    Parent: Block#1
    Var#10<$list> = Phi(Var#1<$list>)
    Expr_Assertion<not(not(type(LITERAL('array'))))>
        expr: Var#10<$list>
        result: Var#11<$list>
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#5
    Var#12<$args> = Phi(Var#3<$args>)
    Var#13<$list> = Phi(Var#11<$list>)
    Var#14<$operator> = Phi(Var#4<$operator>)
    Expr_Empty
        expr: Var#12<$args>
        result: Var#15
    Stmt_JumpIf
        cond: Var#15
        if: Block#7
        else: Block#8

Block#7
    Parent: Block#6
    Var#16<$list> = Phi(Var#13<$list>)
    Terminal_Return
        expr: Var#16<$list>

Block#8
    Parent: Block#6
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#8
    Var#17<$operator> = Phi(Var#14<$operator>)
    Var#18<$args> = Phi(Var#12<$args>)
    Var#19<$list> = Phi(Var#13<$list>)
    Expr_FuncCall
        name: LITERAL('strtoupper')
        args[0]: Var#17<$operator>
        result: Var#20
    Expr_Assign
        var: Var#21<$operator>
        expr: Var#20
        result: Var#22
    Expr_FuncCall
        name: LITERAL('count')
        args[0]: Var#18<$args>
        result: Var#23
    Expr_Assign
        var: Var#24<$count>
        expr: Var#23
        result: Var#25
    Expr_Array
        result: Var#26
    Expr_Assign
        var: Var#27<$filtered>
        expr: Var#26
        result: Var#28
    Iterator_Reset
        var: Var#19<$list>
    Stmt_Jump
        target: Block#10

Block#10
    Parent: Block#9
    Parent: Block#37
    Var#29<$args> = Phi(Var#18<$args>, Var#30<$args>)
    Var#31<$operator> = Phi(Var#21<$operator>, Var#32<$operator>)
    Var#33<$count> = Phi(Var#24<$count>, Var#34<$count>)
    Var#35<$filtered> = Phi(Var#27<$filtered>, Var#36<$filtered>)
    Iterator_Valid
        var: Var#19<$list>
        result: Var#37
    Stmt_JumpIf
        cond: Var#37
        if: Block#11
        else: Block#12

Block#11
    Parent: Block#10
    Var#38<$args> = Phi(Var#29<$args>)
    Iterator_Key
        var: Var#19<$list>
        result: Var#39
    Expr_Assign
        var: Var#40<$key>
        expr: Var#39
        result: Var#41
    Iterator_Value
        var: Var#19<$list>
        result: Var#42
    Expr_Assign
        var: Var#43<$obj>
        expr: Var#42
        result: Var#44
    Expr_Cast_Array
        expr: Var#43<$obj>
        result: Var#45
    Expr_Assign
        var: Var#46<$to_match>
        expr: Var#45
        result: Var#47
    Expr_Assign
        var: Var#48<$matched>
        expr: LITERAL(0)
        result: Var#49
    Iterator_Reset
        var: Var#38<$args>
    Stmt_Jump
        target: Block#13

Block#12
    Parent: Block#10
    Stmt_Jump
        target: Block#14

Block#13
    Parent: Block#11
    Parent: Block#27
    Var#50<$args> = Phi(Var#38<$args>, Var#51<$args>)
    Var#52<$to_match> = Phi(Var#46<$to_match>, Var#53<$to_match>)
    Var#54<$matched> = Phi(Var#48<$matched>, Var#55<$matched>)
    Var#56<$operator> = Phi(Var#31<$operator>, Var#57<$operator>)
    Var#58<$count> = Phi(Var#33<$count>, Var#59<$count>)
    Var#60<$obj> = Phi(Var#43<$obj>, Var#61<$obj>)
    Var#62<$filtered> = Phi(Var#35<$filtered>, Var#63<$filtered>)
    Var#64<$key> = Phi(Var#40<$key>, Var#65<$key>)
    Iterator_Valid
        var: Var#38<$args>
        result: Var#66
    Stmt_JumpIf
        cond: Var#66
        if: Block#15
        else: Block#16

Block#14
    Parent: Block#12
    Var#67<$filtered> = Phi(Var#35<$filtered>)
    Terminal_Return
        expr: Var#67<$filtered>

Block#15
    Parent: Block#13
    Var#68<$to_match> = Phi(Var#52<$to_match>)
    Iterator_Key
        var: Var#38<$args>
        result: Var#69
    Expr_Assign
        var: Var#70<$m_key>
        expr: Var#69
        result: Var#71
    Iterator_Value
        var: Var#38<$args>
        result: Var#72
    Expr_Assign
        var: Var#73<$m_value>
        expr: Var#72
        result: Var#74
    Expr_FuncCall
        name: LITERAL('array_key_exists')
        args[0]: Var#70<$m_key>
        args[1]: Var#68<$to_match>
        result: Var#75
    Stmt_JumpIf
        cond: Var#75
        if: Block#17
        else: Block#18

Block#16
    Parent: Block#13
    Stmt_Jump
        target: Block#19

Block#17
    Parent: Block#15
    Var#76<$m_value> = Phi(Var#73<$m_value>)
    Var#77<$to_match> = Phi(Var#68<$to_match>)
    Var#78<$m_key> = Phi(Var#70<$m_key>)
    Expr_ArrayDimFetch
        var: Var#77<$to_match>
        dim: Var#78<$m_key>
        result: Var#79
    Expr_BinaryOp_Equal
        left: Var#76<$m_value>
        right: Var#79
        result: Var#80
    Expr_Cast_Bool
        expr: Var#80
        result: Var#81
    Stmt_Jump
        target: Block#18

Block#18
    Parent: Block#15
    Parent: Block#17
    Var#82 = Phi(LITERAL(false), Var#81)
    Var#83<$args> = Phi(Var#50<$args>)
    Var#84<$to_match> = Phi(Var#68<$to_match>, Var#77<$to_match>)
    Var#85<$matched> = Phi(Var#54<$matched>)
    Var#86<$operator> = Phi(Var#56<$operator>)
    Var#87<$count> = Phi(Var#58<$count>)
    Var#88<$obj> = Phi(Var#60<$obj>)
    Var#89<$filtered> = Phi(Var#62<$filtered>)
    Var#90<$key> = Phi(Var#64<$key>)
    Stmt_JumpIf
        cond: Var#82
        if: Block#20
        else: Block#21

Block#19
    Parent: Block#16
    Var#91<$operator> = Phi(Var#56<$operator>)
    Expr_BinaryOp_Equal
        left: LITERAL('AND')
        right: Var#91<$operator>
        result: Var#92
    Stmt_JumpIf
        cond: Var#92
        if: Block#22
        else: Block#23

Block#20
    Parent: Block#18
    Var#93<$matched> = Phi(Var#85<$matched>)
    Expr_BinaryOp_Plus
        left: Var#93<$matched>
        right: LITERAL(1)
        result: Var#94
    Expr_Assign
        var: Var#95<$matched>
        expr: Var#94
        result: Var#96
    Stmt_Jump
        target: Block#24

Block#21
    Parent: Block#18
    Stmt_Jump
        target: Block#24

Block#22
    Parent: Block#19
    Var#97<$matched> = Phi(Var#54<$matched>)
    Var#98<$count> = Phi(Var#58<$count>)
    Expr_BinaryOp_Equal
        left: Var#97<$matched>
        right: Var#98<$count>
        result: Var#99
    Expr_Cast_Bool
        expr: Var#99
        result: Var#100
    Stmt_Jump
        target: Block#23

Block#23
    Parent: Block#19
    Parent: Block#22
    Var#101 = Phi(LITERAL(false), Var#100)
    Var#102<$args> = Phi(Var#50<$args>)
    Var#103<$operator> = Phi(Var#91<$operator>)
    Var#104<$count> = Phi(Var#58<$count>, Var#98<$count>)
    Var#105<$matched> = Phi(Var#54<$matched>, Var#97<$matched>)
    Var#106<$obj> = Phi(Var#60<$obj>)
    Var#107<$filtered> = Phi(Var#62<$filtered>)
    Var#108<$key> = Phi(Var#64<$key>)
    Stmt_JumpIf
        cond: Var#101
        if: Block#25
        else: Block#26

Block#24
    Parent: Block#20
    Parent: Block#21
    Var#51<$args> = Phi(Var#83<$args>)
    Var#53<$to_match> = Phi(Var#84<$to_match>)
    Var#55<$matched> = Phi(Var#95<$matched>, Var#85<$matched>)
    Var#57<$operator> = Phi(Var#86<$operator>)
    Var#59<$count> = Phi(Var#87<$count>)
    Var#61<$obj> = Phi(Var#88<$obj>)
    Var#63<$filtered> = Phi(Var#89<$filtered>)
    Var#65<$key> = Phi(Var#90<$key>)
    Stmt_Jump
        target: Block#27

Block#25
    Parent: Block#23
    Parent: Block#31
    Var#109 = Phi(LITERAL(true), Var#110)
    Var#111<$args> = Phi(Var#102<$args>, Var#112<$args>)
    Var#113<$operator> = Phi(Var#103<$operator>, Var#114<$operator>)
    Var#115<$count> = Phi(Var#104<$count>, Var#116<$count>)
    Var#117<$matched> = Phi(Var#105<$matched>, Var#118<$matched>)
    Var#119<$obj> = Phi(Var#106<$obj>, Var#120<$obj>)
    Var#121<$filtered> = Phi(Var#107<$filtered>, Var#122<$filtered>)
    Var#123<$key> = Phi(Var#108<$key>, Var#124<$key>)
    Stmt_JumpIf
        cond: Var#109
        if: Block#28
        else: Block#29

Block#26
    Parent: Block#23
    Var#125<$operator> = Phi(Var#103<$operator>)
    Expr_BinaryOp_Equal
        left: LITERAL('OR')
        right: Var#125<$operator>
        result: Var#126
    Stmt_JumpIf
        cond: Var#126
        if: Block#30
        else: Block#31

Block#27
    Parent: Block#24
    Stmt_Jump
        target: Block#13

Block#28
    Parent: Block#25
    Parent: Block#35
    Var#127 = Phi(LITERAL(true), Var#128)
    Var#129<$args> = Phi(Var#111<$args>, Var#130<$args>)
    Var#131<$operator> = Phi(Var#113<$operator>, Var#132<$operator>)
    Var#133<$count> = Phi(Var#115<$count>, Var#134<$count>)
    Var#135<$obj> = Phi(Var#119<$obj>, Var#136<$obj>)
    Var#137<$filtered> = Phi(Var#121<$filtered>, Var#138<$filtered>)
    Var#139<$key> = Phi(Var#123<$key>, Var#140<$key>)
    Stmt_JumpIf
        cond: Var#127
        if: Block#32
        else: Block#33

Block#29
    Parent: Block#25
    Var#141<$operator> = Phi(Var#113<$operator>)
    Expr_BinaryOp_Equal
        left: LITERAL('NOT')
        right: Var#141<$operator>
        result: Var#142
    Stmt_JumpIf
        cond: Var#142
        if: Block#34
        else: Block#35

Block#30
    Parent: Block#26
    Var#143<$matched> = Phi(Var#105<$matched>)
    Expr_BinaryOp_Greater
        left: Var#143<$matched>
        right: LITERAL(0)
        result: Var#144
    Expr_Cast_Bool
        expr: Var#144
        result: Var#145
    Stmt_Jump
        target: Block#31

Block#31
    Parent: Block#26
    Parent: Block#30
    Var#146 = Phi(LITERAL(false), Var#145)
    Var#112<$args> = Phi(Var#102<$args>)
    Var#114<$operator> = Phi(Var#125<$operator>)
    Var#116<$count> = Phi(Var#104<$count>)
    Var#118<$matched> = Phi(Var#105<$matched>, Var#143<$matched>)
    Var#120<$obj> = Phi(Var#106<$obj>)
    Var#122<$filtered> = Phi(Var#107<$filtered>)
    Var#124<$key> = Phi(Var#108<$key>)
    Expr_Cast_Bool
        expr: Var#146
        result: Var#110
    Stmt_Jump
        target: Block#25

Block#32
    Parent: Block#28
    Var#147<$obj> = Phi(Var#135<$obj>)
    Var#148<$filtered> = Phi(Var#137<$filtered>)
    Var#149<$key> = Phi(Var#139<$key>)
    Expr_ArrayDimFetch
        var: Var#148<$filtered>
        dim: Var#149<$key>
        result: Var#150
    Expr_Assign
        var: Var#150
        expr: Var#147<$obj>
        result: Var#151
    Stmt_Jump
        target: Block#36

Block#33
    Parent: Block#28
    Stmt_Jump
        target: Block#36

Block#34
    Parent: Block#29
    Var#152<$matched> = Phi(Var#117<$matched>)
    Expr_BinaryOp_Equal
        left: LITERAL(0)
        right: Var#152<$matched>
        result: Var#153
    Expr_Cast_Bool
        expr: Var#153
        result: Var#154
    Stmt_Jump
        target: Block#35

Block#35
    Parent: Block#29
    Parent: Block#34
    Var#155 = Phi(LITERAL(false), Var#154)
    Var#130<$args> = Phi(Var#111<$args>)
    Var#132<$operator> = Phi(Var#141<$operator>)
    Var#134<$count> = Phi(Var#115<$count>)
    Var#136<$obj> = Phi(Var#119<$obj>)
    Var#138<$filtered> = Phi(Var#121<$filtered>)
    Var#140<$key> = Phi(Var#123<$key>)
    Expr_Cast_Bool
        expr: Var#155
        result: Var#128
    Stmt_Jump
        target: Block#28

Block#36
    Parent: Block#32
    Parent: Block#33
    Var#30<$args> = Phi(Var#129<$args>)
    Var#32<$operator> = Phi(Var#131<$operator>)
    Var#34<$count> = Phi(Var#133<$count>)
    Var#36<$filtered> = Phi(Var#148<$filtered>, Var#137<$filtered>)
    Stmt_Jump
        target: Block#37

Block#37
    Parent: Block#36
    Stmt_Jump
        target: Block#10

Function wp_list_pluck():
Block#1
    Expr_Param
        name: LITERAL('list')
        result: Var#1<$list>
    Expr_Param
        name: LITERAL('field')
        result: Var#2<$field>
    Expr_Param
        name: LITERAL('index_key')
        defaultVar: Var#3
        result: Var#4<$index_key>
        defaultBlock: Block#2
    Expr_BooleanNot
        expr: Var#4<$index_key>
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#3

Block#3
    Parent: Block#1
    Var#6<$list> = Phi(Var#1<$list>)
    Iterator_Reset
        var: Var#6<$list>
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#3
    Parent: Block#19
    Var#7<$field> = Phi(Var#2<$field>, Var#8<$field>)
    Var#9<$list> = Phi(Var#6<$list>, Var#10<$list>)
    Iterator_Valid
        var: Var#6<$list>
        result: Var#11
    Stmt_JumpIf
        cond: Var#11
        if: Block#7
        else: Block#8

Block#6
    Parent: Block#4
    Var#12<$list> = Phi(Var#1<$list>)
    Var#13<$index_key> = Phi(Var#4<$index_key>)
    Var#14<$field> = Phi(Var#2<$field>)
    Expr_Array
        result: Var#15
    Expr_Assign
        var: Var#16<$newlist>
        expr: Var#15
        result: Var#17
    Iterator_Reset
        var: Var#12<$list>
    Stmt_Jump
        target: Block#9

Block#7
    Parent: Block#5
    Iterator_Key
        var: Var#6<$list>
        result: Var#18
    Expr_Assign
        var: Var#19<$key>
        expr: Var#18
        result: Var#20
    Iterator_Value
        var: Var#6<$list>
        result: Var#21
    Expr_Assign
        var: Var#22<$value>
        expr: Var#21
        result: Var#23
    Expr_FuncCall
        name: LITERAL('is_object')
        args[0]: Var#22<$value>
        result: Var#24
    Stmt_JumpIf
        cond: Var#24
        if: Block#10
        else: Block#11

Block#8
    Parent: Block#5
    Stmt_Jump
        target: Block#12

Block#9
    Parent: Block#6
    Parent: Block#27
    Var#25<$index_key> = Phi(Var#13<$index_key>, Var#26<$index_key>)
    Var#27<$field> = Phi(Var#14<$field>, Var#28<$field>)
    Var#29<$newlist> = Phi(Var#16<$newlist>, Var#30<$newlist>)
    Iterator_Valid
        var: Var#12<$list>
        result: Var#31
    Stmt_JumpIf
        cond: Var#31
        if: Block#13
        else: Block#14

Block#10
    Parent: Block#7
    Var#32<$value> = Phi(Var#22<$value>)
    Var#33<$field> = Phi(Var#7<$field>)
    Var#34<$list> = Phi(Var#9<$list>)
    Var#35<$key> = Phi(Var#19<$key>)
    Expr_Assertion<type(LITERAL('object'))>
        expr: Var#32<$value>
        result: Var#36<$value>
    Expr_PropertyFetch
        var: Var#36<$value>
        name: Var#33<$field>
        result: Var#37
    Expr_ArrayDimFetch
        var: Var#34<$list>
        dim: Var#35<$key>
        result: Var#38
    Expr_Assign
        var: Var#38
        expr: Var#37
        result: Var#39
    Stmt_Jump
        target: Block#15

Block#11
    Parent: Block#7
    Var#40<$value> = Phi(Var#22<$value>)
    Var#41<$field> = Phi(Var#7<$field>)
    Var#42<$list> = Phi(Var#9<$list>)
    Var#43<$key> = Phi(Var#19<$key>)
    Expr_Assertion<not(type(LITERAL('object')))>
        expr: Var#40<$value>
        result: Var#44<$value>
    Expr_ArrayDimFetch
        var: Var#44<$value>
        dim: Var#41<$field>
        result: Var#45
    Expr_ArrayDimFetch
        var: Var#42<$list>
        dim: Var#43<$key>
        result: Var#46
    Expr_Assign
        var: Var#46
        expr: Var#45
        result: Var#47
    Stmt_Jump
        target: Block#15

Block#12
    Parent: Block#8
    Var#48<$list> = Phi(Var#9<$list>)
    Terminal_Return
        expr: Var#48<$list>

Block#13
    Parent: Block#9
    Iterator_Value
        var: Var#12<$list>
        result: Var#49
    Expr_Assign
        var: Var#50<$value>
        expr: Var#49
        result: Var#51
    Expr_FuncCall
        name: LITERAL('is_object')
        args[0]: Var#50<$value>
        result: Var#52
    Stmt_JumpIf
        cond: Var#52
        if: Block#16
        else: Block#17

Block#14
    Parent: Block#9
    Stmt_Jump
        target: Block#18

Block#15
    Parent: Block#10
    Parent: Block#11
    Var#8<$field> = Phi(Var#33<$field>, Var#41<$field>)
    Var#10<$list> = Phi(Var#34<$list>, Var#42<$list>)
    Stmt_Jump
        target: Block#19

Block#16
    Parent: Block#13
    Var#53<$value> = Phi(Var#50<$value>)
    Var#54<$index_key> = Phi(Var#25<$index_key>)
    Expr_Assertion<type(LITERAL('object'))>
        expr: Var#53<$value>
        result: Var#55<$value>
    Expr_PropertyFetch
        var: Var#55<$value>
        name: Var#54<$index_key>
        result: Var#56
    Expr_Isset
        vars[0]: Var#56
        result: Var#57
    Stmt_JumpIf
        cond: Var#57
        if: Block#20
        else: Block#21

Block#17
    Parent: Block#13
    Var#58<$value> = Phi(Var#50<$value>)
    Var#59<$index_key> = Phi(Var#25<$index_key>)
    Expr_Assertion<not(type(LITERAL('object')))>
        expr: Var#58<$value>
        result: Var#60<$value>
    Expr_ArrayDimFetch
        var: Var#60<$value>
        dim: Var#59<$index_key>
        result: Var#61
    Expr_Isset
        vars[0]: Var#61
        result: Var#62
    Stmt_JumpIf
        cond: Var#62
        if: Block#22
        else: Block#23

Block#18
    Parent: Block#14
    Var#63<$newlist> = Phi(Var#29<$newlist>)
    Terminal_Return
        expr: Var#63<$newlist>

Block#19
    Parent: Block#15
    Stmt_Jump
        target: Block#5

Block#20
    Parent: Block#16
    Var#64<$value> = Phi(Var#55<$value>)
    Var#65<$field> = Phi(Var#27<$field>)
    Var#66<$newlist> = Phi(Var#29<$newlist>)
    Var#67<$index_key> = Phi(Var#54<$index_key>)
    Expr_PropertyFetch
        var: Var#64<$value>
        name: Var#65<$field>
        result: Var#68
    Expr_PropertyFetch
        var: Var#64<$value>
        name: Var#67<$index_key>
        result: Var#69
    Expr_ArrayDimFetch
        var: Var#66<$newlist>
        dim: Var#69
        result: Var#70
    Expr_Assign
        var: Var#70
        expr: Var#68
        result: Var#71
    Stmt_Jump
        target: Block#24

Block#21
    Parent: Block#16
    Var#72<$value> = Phi(Var#55<$value>)
    Var#73<$field> = Phi(Var#27<$field>)
    Var#74<$newlist> = Phi(Var#29<$newlist>)
    Expr_PropertyFetch
        var: Var#72<$value>
        name: Var#73<$field>
        result: Var#75
    Expr_ArrayDimFetch
        var: Var#74<$newlist>
        result: Var#76
    Expr_Assign
        var: Var#76
        expr: Var#75
        result: Var#77
    Stmt_Jump
        target: Block#24

Block#22
    Parent: Block#17
    Var#78<$value> = Phi(Var#60<$value>)
    Var#79<$field> = Phi(Var#27<$field>)
    Var#80<$newlist> = Phi(Var#29<$newlist>)
    Var#81<$index_key> = Phi(Var#59<$index_key>)
    Expr_ArrayDimFetch
        var: Var#78<$value>
        dim: Var#79<$field>
        result: Var#82
    Expr_ArrayDimFetch
        var: Var#78<$value>
        dim: Var#81<$index_key>
        result: Var#83
    Expr_ArrayDimFetch
        var: Var#80<$newlist>
        dim: Var#83
        result: Var#84
    Expr_Assign
        var: Var#84
        expr: Var#82
        result: Var#85
    Stmt_Jump
        target: Block#25

Block#23
    Parent: Block#17
    Var#86<$value> = Phi(Var#60<$value>)
    Var#87<$field> = Phi(Var#27<$field>)
    Var#88<$newlist> = Phi(Var#29<$newlist>)
    Expr_ArrayDimFetch
        var: Var#86<$value>
        dim: Var#87<$field>
        result: Var#89
    Expr_ArrayDimFetch
        var: Var#88<$newlist>
        result: Var#90
    Expr_Assign
        var: Var#90
        expr: Var#89
        result: Var#91
    Stmt_Jump
        target: Block#25

Block#24
    Parent: Block#20
    Parent: Block#21
    Var#92<$index_key> = Phi(Var#67<$index_key>, Var#54<$index_key>)
    Var#93<$field> = Phi(Var#65<$field>, Var#73<$field>)
    Var#94<$newlist> = Phi(Var#66<$newlist>, Var#74<$newlist>)
    Stmt_Jump
        target: Block#26

Block#25
    Parent: Block#22
    Parent: Block#23
    Var#95<$index_key> = Phi(Var#81<$index_key>, Var#59<$index_key>)
    Var#96<$field> = Phi(Var#79<$field>, Var#87<$field>)
    Var#97<$newlist> = Phi(Var#80<$newlist>, Var#88<$newlist>)
    Stmt_Jump
        target: Block#26

Block#26
    Parent: Block#24
    Parent: Block#25
    Var#26<$index_key> = Phi(Var#92<$index_key>, Var#95<$index_key>)
    Var#28<$field> = Phi(Var#93<$field>, Var#96<$field>)
    Var#30<$newlist> = Phi(Var#94<$newlist>, Var#97<$newlist>)
    Stmt_Jump
        target: Block#27

Block#27
    Parent: Block#26
    Stmt_Jump
        target: Block#9

Function wp_maybe_load_widgets():
Block#1
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#1
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('load_default_widgets')
        args[1]: Var#1
        result: Var#2
    Expr_BooleanNot
        expr: Var#2
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Terminal_Return

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#4
    Expr_ConstFetch
        name: LITERAL('WPINC')
        result: Var#5
    Expr_BinaryOp_Concat
        left: Var#4
        right: Var#5
        result: Var#6
    Expr_BinaryOp_Concat
        left: Var#6
        right: LITERAL('/default-widgets.php')
        result: Var#7
    Expr_Include
        expr: Var#7
        result: Var#8
    Expr_FuncCall
        name: LITERAL('add_action')
        args[0]: LITERAL('_admin_menu')
        args[1]: LITERAL('wp_widgets_add_menu')
        result: Var#9
    Terminal_Return

Function wp_widgets_add_menu():
Block#1
    Var#1<$submenu> = Phi()
    Terminal_GlobalVar
        var: LITERAL('submenu')
    Expr_FuncCall
        name: LITERAL('current_theme_supports')
        args[0]: LITERAL('widgets')
        result: Var#2
    Expr_BooleanNot
        expr: Var#2
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Terminal_Return

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Var#4<$submenu> = Phi(Var#1<$submenu>)
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('Widgets')
        result: Var#5
    Expr_Array
        values[0]: Var#5
        values[1]: LITERAL('edit_theme_options')
        values[2]: LITERAL('widgets.php')
        result: Var#6
    Expr_ArrayDimFetch
        var: Var#4<$submenu>
        dim: LITERAL('themes.php')
        result: Var#7
    Expr_ArrayDimFetch
        var: Var#7
        dim: LITERAL(7)
        result: Var#8
    Expr_Assign
        var: Var#8
        expr: Var#6
        result: Var#9
    Expr_ArrayDimFetch
        var: Var#4<$submenu>
        dim: LITERAL('themes.php')
        result: Var#10
    Expr_ConstFetch
        name: LITERAL('SORT_NUMERIC')
        result: Var#11
    Expr_FuncCall
        name: LITERAL('ksort')
        args[0]: Var#10
        args[1]: Var#11
        result: Var#12
    Terminal_Return

Function wp_ob_end_flush_all():
Block#1
    Expr_FuncCall
        name: LITERAL('ob_get_level')
        result: Var#1
    Expr_Assign
        var: Var#2<$levels>
        expr: Var#1
        result: Var#3
    Expr_Assign
        var: Var#4<$i>
        expr: LITERAL(0)
        result: Var#5
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Parent: Block#5
    Var#6<$i> = Phi(Var#4<$i>, Var#7<$i>)
    Var#8<$levels> = Phi(Var#2<$levels>)
    Expr_BinaryOp_Smaller
        left: Var#6<$i>
        right: Var#8<$levels>
        result: Var#9
    Stmt_JumpIf
        cond: Var#9
        if: Block#3
        else: Block#4

Block#3
    Parent: Block#2
    Expr_FuncCall
        name: LITERAL('ob_end_flush')
        result: Var#10
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#2
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#3
    Var#11<$i> = Phi(Var#6<$i>)
    Expr_BinaryOp_Plus
        left: Var#11<$i>
        right: LITERAL(1)
        result: Var#12
    Expr_Assign
        var: Var#7<$i>
        expr: Var#12
        result: Var#13
    Stmt_Jump
        target: Block#2

Block#6
    Parent: Block#4
    Terminal_Return

Function dead_db():
Block#1
    Var#1<$wpdb> = Phi()
    Terminal_GlobalVar
        var: LITERAL('wpdb')
    Expr_FuncCall
        name: LITERAL('wp_load_translations_early')
        result: Var#2
    Expr_ConstFetch
        name: LITERAL('WP_CONTENT_DIR')
        result: Var#3
    Expr_BinaryOp_Concat
        left: Var#3
        right: LITERAL('/db-error.php')
        result: Var#4
    Expr_FuncCall
        name: LITERAL('file_exists')
        args[0]: Var#4
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('WP_CONTENT_DIR')
        result: Var#6
    Expr_BinaryOp_Concat
        left: Var#6
        right: LITERAL('/db-error.php')
        result: Var#7
    Expr_Include
        expr: Var#7
        result: Var#8
    Expr_Exit
        result: Var#9
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Var#10<$wpdb> = Phi(Var#1<$wpdb>)
    Expr_FuncCall
        name: LITERAL('wp_installing')
        result: Var#11
    Stmt_JumpIf
        cond: Var#11
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Parent: Block#6
    Var#12 = Phi(LITERAL(true), Var#13)
    Var#14<$wpdb> = Phi(Var#10<$wpdb>)
    Stmt_JumpIf
        cond: Var#12
        if: Block#7
        else: Block#8

Block#6
    Parent: Block#4
    Expr_FuncCall
        name: LITERAL('defined')
        args[0]: LITERAL('WP_ADMIN')
        result: Var#15
    Expr_Cast_Bool
        expr: Var#15
        result: Var#13
    Stmt_Jump
        target: Block#5

Block#7
    Parent: Block#5
    Var#16<$wpdb> = Phi(Var#14<$wpdb>)
    Expr_PropertyFetch
        var: Var#16<$wpdb>
        name: LITERAL('error')
        result: Var#17
    Expr_FuncCall
        name: LITERAL('wp_die')
        args[0]: Var#17
        result: Var#18
    Stmt_Jump
        target: Block#9

Block#8
    Parent: Block#5
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#7
    Parent: Block#8
    Expr_FuncCall
        name: LITERAL('status_header')
        args[0]: LITERAL(500)
        result: Var#19
    Expr_FuncCall
        name: LITERAL('nocache_headers')
        result: Var#20
    Expr_FuncCall
        name: LITERAL('header')
        args[0]: LITERAL('Content-Type: text/html; charset=utf-8')
        result: Var#21
    Terminal_Echo
        expr: LITERAL('<!DOCTYPE html>
        <html xmlns="http://www.w3.org/1999/xhtml"')
    Expr_FuncCall
        name: LITERAL('is_rtl')
        result: Var#22
    Stmt_JumpIf
        cond: Var#22
        if: Block#10
        else: Block#11

Block#10
    Parent: Block#9
    Terminal_Echo
        expr: LITERAL(' dir="rtl"')
    Stmt_Jump
        target: Block#12

Block#11
    Parent: Block#9
    Stmt_Jump
        target: Block#12

Block#12
    Parent: Block#10
    Parent: Block#11
    Terminal_Echo
        expr: LITERAL('>
        <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        	<title>')
    Expr_FuncCall
        name: LITERAL('_e')
        args[0]: LITERAL('Database Error')
        result: Var#23
    Terminal_Echo
        expr: LITERAL('</title>
        
        </head>
        <body>
        	<h1>')
    Expr_FuncCall
        name: LITERAL('_e')
        args[0]: LITERAL('Error establishing a database connection')
        result: Var#24
    Terminal_Echo
        expr: LITERAL('</h1>
        </body>
        </html>
        ')
    Expr_Exit
        result: Var#25
    Terminal_Return

Function absint():
Block#1
    Expr_Param
        name: LITERAL('maybeint')
        result: Var#1<$maybeint>
    Expr_FuncCall
        name: LITERAL('intval')
        args[0]: Var#1<$maybeint>
        result: Var#2
    Expr_FuncCall
        name: LITERAL('abs')
        args[0]: Var#2
        result: Var#3
    Terminal_Return
        expr: Var#3

Function _deprecated_function():
Block#1
    Expr_Param
        name: LITERAL('function')
        result: Var#1<$function>
    Expr_Param
        name: LITERAL('version')
        result: Var#2<$version>
    Expr_Param
        name: LITERAL('replacement')
        defaultVar: Var#3
        result: Var#4<$replacement>
        defaultBlock: Block#2
    Expr_FuncCall
        name: LITERAL('do_action')
        args[0]: LITERAL('deprecated_function_run')
        args[1]: Var#1<$function>
        args[2]: Var#4<$replacement>
        args[3]: Var#2<$version>
        result: Var#5
    Expr_ConstFetch
        name: LITERAL('WP_DEBUG')
        result: Var#6
    Stmt_JumpIf
        cond: Var#6
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#3

Block#3
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#7
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('deprecated_function_trigger_error')
        args[1]: Var#7
        result: Var#8
    Expr_Cast_Bool
        expr: Var#8
        result: Var#9
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#1
    Parent: Block#3
    Var#10 = Phi(LITERAL(false), Var#9)
    Var#11<$replacement> = Phi(Var#4<$replacement>)
    Var#12<$function> = Phi(Var#1<$function>)
    Var#13<$version> = Phi(Var#2<$version>)
    Stmt_JumpIf
        cond: Var#10
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('__')
        result: Var#14
    Stmt_JumpIf
        cond: Var#14
        if: Block#7
        else: Block#8

Block#6
    Parent: Block#4
    Stmt_Jump
        target: Block#9

Block#7
    Parent: Block#5
    Var#15<$replacement> = Phi(Var#11<$replacement>)
    Expr_FuncCall
        name: LITERAL('is_null')
        args[0]: Var#15<$replacement>
        result: Var#16
    Expr_BooleanNot
        expr: Var#16
        result: Var#17
    Stmt_JumpIf
        cond: Var#17
        if: Block#10
        else: Block#11

Block#8
    Parent: Block#5
    Var#18<$replacement> = Phi(Var#11<$replacement>)
    Expr_FuncCall
        name: LITERAL('is_null')
        args[0]: Var#18<$replacement>
        result: Var#19
    Expr_BooleanNot
        expr: Var#19
        result: Var#20
    Stmt_JumpIf
        cond: Var#20
        if: Block#12
        else: Block#13

Block#9
    Parent: Block#16
    Parent: Block#6
    Terminal_Return

Block#10
    Parent: Block#7
    Var#21<$replacement> = Phi(Var#15<$replacement>)
    Var#22<$function> = Phi(Var#12<$function>)
    Var#23<$version> = Phi(Var#13<$version>)
    Expr_Assertion<not(type(LITERAL('null')))>
        expr: Var#21<$replacement>
        result: Var#24<$replacement>
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.')
        result: Var#25
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: Var#25
        args[1]: Var#22<$function>
        args[2]: Var#23<$version>
        args[3]: Var#24<$replacement>
        result: Var#26
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#26
        result: Var#27
    Stmt_Jump
        target: Block#14

Block#11
    Parent: Block#7
    Var#28<$replacement> = Phi(Var#15<$replacement>)
    Var#29<$function> = Phi(Var#12<$function>)
    Var#30<$version> = Phi(Var#13<$version>)
    Expr_Assertion<not(not(type(LITERAL('null'))))>
        expr: Var#28<$replacement>
        result: Var#31<$replacement>
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.')
        result: Var#32
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: Var#32
        args[1]: Var#29<$function>
        args[2]: Var#30<$version>
        result: Var#33
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#33
        result: Var#34
    Stmt_Jump
        target: Block#14

Block#12
    Parent: Block#8
    Var#35<$replacement> = Phi(Var#18<$replacement>)
    Var#36<$function> = Phi(Var#12<$function>)
    Var#37<$version> = Phi(Var#13<$version>)
    Expr_Assertion<not(type(LITERAL('null')))>
        expr: Var#35<$replacement>
        result: Var#38<$replacement>
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: LITERAL('%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.')
        args[1]: Var#36<$function>
        args[2]: Var#37<$version>
        args[3]: Var#38<$replacement>
        result: Var#39
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#39
        result: Var#40
    Stmt_Jump
        target: Block#15

Block#13
    Parent: Block#8
    Var#41<$replacement> = Phi(Var#18<$replacement>)
    Var#42<$function> = Phi(Var#12<$function>)
    Var#43<$version> = Phi(Var#13<$version>)
    Expr_Assertion<not(not(type(LITERAL('null'))))>
        expr: Var#41<$replacement>
        result: Var#44<$replacement>
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: LITERAL('%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.')
        args[1]: Var#42<$function>
        args[2]: Var#43<$version>
        result: Var#45
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#45
        result: Var#46
    Stmt_Jump
        target: Block#15

Block#14
    Parent: Block#10
    Parent: Block#11
    Stmt_Jump
        target: Block#16

Block#15
    Parent: Block#12
    Parent: Block#13
    Stmt_Jump
        target: Block#16

Block#16
    Parent: Block#14
    Parent: Block#15
    Stmt_Jump
        target: Block#9

Function _deprecated_constructor():
Block#1
    Expr_Param
        name: LITERAL('class')
        result: Var#1<$class>
    Expr_Param
        name: LITERAL('version')
        result: Var#2<$version>
    Expr_Param
        name: LITERAL('parent_class')
        defaultVar: LITERAL('')
        result: Var#3<$parent_class>
        defaultBlock: Block#2
    Expr_FuncCall
        name: LITERAL('do_action')
        args[0]: LITERAL('deprecated_constructor_run')
        args[1]: Var#1<$class>
        args[2]: Var#2<$version>
        args[3]: Var#3<$parent_class>
        result: Var#4
    Expr_ConstFetch
        name: LITERAL('WP_DEBUG')
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#3
        else: Block#4

Block#2

Block#3
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#6
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('deprecated_constructor_trigger_error')
        args[1]: Var#6
        result: Var#7
    Expr_Cast_Bool
        expr: Var#7
        result: Var#8
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#1
    Parent: Block#3
    Var#9 = Phi(LITERAL(false), Var#8)
    Var#10<$parent_class> = Phi(Var#3<$parent_class>)
    Var#11<$class> = Phi(Var#1<$class>)
    Var#12<$version> = Phi(Var#2<$version>)
    Stmt_JumpIf
        cond: Var#9
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('__')
        result: Var#13
    Stmt_JumpIf
        cond: Var#13
        if: Block#7
        else: Block#8

Block#6
    Parent: Block#4
    Stmt_Jump
        target: Block#9

Block#7
    Parent: Block#5
    Var#14<$parent_class> = Phi(Var#10<$parent_class>)
    Expr_Empty
        expr: Var#14<$parent_class>
        result: Var#15
    Expr_BooleanNot
        expr: Var#15
        result: Var#16
    Stmt_JumpIf
        cond: Var#16
        if: Block#10
        else: Block#11

Block#8
    Parent: Block#5
    Var#17<$parent_class> = Phi(Var#10<$parent_class>)
    Expr_Empty
        expr: Var#17<$parent_class>
        result: Var#18
    Expr_BooleanNot
        expr: Var#18
        result: Var#19
    Stmt_JumpIf
        cond: Var#19
        if: Block#12
        else: Block#13

Block#9
    Parent: Block#16
    Parent: Block#6
    Terminal_Return

Block#10
    Parent: Block#7
    Var#20<$class> = Phi(Var#11<$class>)
    Var#21<$parent_class> = Phi(Var#14<$parent_class>)
    Var#22<$version> = Phi(Var#12<$version>)
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('The called constructor method for %1$s in %2$s is <strong>deprecated</strong> since version %3$s! Use %4$s instead.')
        result: Var#23
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: Var#23
        args[1]: Var#20<$class>
        args[2]: Var#21<$parent_class>
        args[3]: Var#22<$version>
        args[4]: LITERAL('<pre>__construct()</pre>')
        result: Var#24
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#24
        result: Var#25
    Stmt_Jump
        target: Block#14

Block#11
    Parent: Block#7
    Var#26<$class> = Phi(Var#11<$class>)
    Var#27<$version> = Phi(Var#12<$version>)
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('The called constructor method for %1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.')
        result: Var#28
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: Var#28
        args[1]: Var#26<$class>
        args[2]: Var#27<$version>
        args[3]: LITERAL('<pre>__construct()</pre>')
        result: Var#29
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#29
        result: Var#30
    Stmt_Jump
        target: Block#14

Block#12
    Parent: Block#8
    Var#31<$class> = Phi(Var#11<$class>)
    Var#32<$parent_class> = Phi(Var#17<$parent_class>)
    Var#33<$version> = Phi(Var#12<$version>)
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: LITERAL('The called constructor method for %1$s in %2$s is <strong>deprecated</strong> since version %3$s! Use %4$s instead.')
        args[1]: Var#31<$class>
        args[2]: Var#32<$parent_class>
        args[3]: Var#33<$version>
        args[4]: LITERAL('<pre>__construct()</pre>')
        result: Var#34
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#34
        result: Var#35
    Stmt_Jump
        target: Block#15

Block#13
    Parent: Block#8
    Var#36<$class> = Phi(Var#11<$class>)
    Var#37<$version> = Phi(Var#12<$version>)
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: LITERAL('The called constructor method for %1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.')
        args[1]: Var#36<$class>
        args[2]: Var#37<$version>
        args[3]: LITERAL('<pre>__construct()</pre>')
        result: Var#38
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#38
        result: Var#39
    Stmt_Jump
        target: Block#15

Block#14
    Parent: Block#10
    Parent: Block#11
    Stmt_Jump
        target: Block#16

Block#15
    Parent: Block#12
    Parent: Block#13
    Stmt_Jump
        target: Block#16

Block#16
    Parent: Block#14
    Parent: Block#15
    Stmt_Jump
        target: Block#9

Function _deprecated_file():
Block#1
    Expr_Param
        name: LITERAL('file')
        result: Var#1<$file>
    Expr_Param
        name: LITERAL('version')
        result: Var#2<$version>
    Expr_Param
        name: LITERAL('replacement')
        defaultVar: Var#3
        result: Var#4<$replacement>
        defaultBlock: Block#2
    Expr_Param
        name: LITERAL('message')
        defaultVar: LITERAL('')
        result: Var#5<$message>
        defaultBlock: Block#3
    Expr_FuncCall
        name: LITERAL('do_action')
        args[0]: LITERAL('deprecated_file_included')
        args[1]: Var#1<$file>
        args[2]: Var#4<$replacement>
        args[3]: Var#2<$version>
        args[4]: Var#5<$message>
        result: Var#6
    Expr_ConstFetch
        name: LITERAL('WP_DEBUG')
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#4
        else: Block#5

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#3

Block#3

Block#4
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#8
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('deprecated_file_trigger_error')
        args[1]: Var#8
        result: Var#9
    Expr_Cast_Bool
        expr: Var#9
        result: Var#10
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#1
    Parent: Block#4
    Var#11 = Phi(LITERAL(false), Var#10)
    Var#12<$message> = Phi(Var#5<$message>)
    Var#13<$replacement> = Phi(Var#4<$replacement>)
    Var#14<$file> = Phi(Var#1<$file>)
    Var#15<$version> = Phi(Var#2<$version>)
    Stmt_JumpIf
        cond: Var#11
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Var#16<$message> = Phi(Var#12<$message>)
    Expr_Empty
        expr: Var#16<$message>
        result: Var#17
    Stmt_JumpIf
        cond: Var#17
        if: Block#8
        else: Block#9

Block#7
    Parent: Block#5
    Stmt_Jump
        target: Block#10

Block#8
    Parent: Block#6
    Expr_Assign
        var: Var#18
        expr: LITERAL('')
        result: Var#19
    Stmt_Jump
        target: Block#11

Block#9
    Parent: Block#6
    Var#20<$message> = Phi(Var#16<$message>)
    Expr_BinaryOp_Concat
        left: LITERAL(' ')
        right: Var#20<$message>
        result: Var#21
    Expr_Assign
        var: Var#22
        expr: Var#21
        result: Var#23
    Stmt_Jump
        target: Block#11

Block#10
    Parent: Block#20
    Parent: Block#7
    Terminal_Return

Block#11
    Parent: Block#8
    Parent: Block#9
    Var#24 = Phi(Var#18, Var#22)
    Var#25<$replacement> = Phi(Var#13<$replacement>)
    Var#26<$file> = Phi(Var#14<$file>)
    Var#27<$version> = Phi(Var#15<$version>)
    Expr_Assign
        var: Var#28<$message>
        expr: Var#24
        result: Var#29
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('__')
        result: Var#30
    Stmt_JumpIf
        cond: Var#30
        if: Block#12
        else: Block#13

Block#12
    Parent: Block#11
    Var#31<$replacement> = Phi(Var#25<$replacement>)
    Expr_FuncCall
        name: LITERAL('is_null')
        args[0]: Var#31<$replacement>
        result: Var#32
    Expr_BooleanNot
        expr: Var#32
        result: Var#33
    Stmt_JumpIf
        cond: Var#33
        if: Block#14
        else: Block#15

Block#13
    Parent: Block#11
    Var#34<$replacement> = Phi(Var#25<$replacement>)
    Expr_FuncCall
        name: LITERAL('is_null')
        args[0]: Var#34<$replacement>
        result: Var#35
    Expr_BooleanNot
        expr: Var#35
        result: Var#36
    Stmt_JumpIf
        cond: Var#36
        if: Block#16
        else: Block#17

Block#14
    Parent: Block#12
    Var#37<$replacement> = Phi(Var#31<$replacement>)
    Var#38<$file> = Phi(Var#26<$file>)
    Var#39<$version> = Phi(Var#27<$version>)
    Var#40<$message> = Phi(Var#28<$message>)
    Expr_Assertion<not(type(LITERAL('null')))>
        expr: Var#37<$replacement>
        result: Var#41<$replacement>
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.')
        result: Var#42
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: Var#42
        args[1]: Var#38<$file>
        args[2]: Var#39<$version>
        args[3]: Var#41<$replacement>
        result: Var#43
    Expr_BinaryOp_Concat
        left: Var#43
        right: Var#40<$message>
        result: Var#44
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#44
        result: Var#45
    Stmt_Jump
        target: Block#18

Block#15
    Parent: Block#12
    Var#46<$replacement> = Phi(Var#31<$replacement>)
    Var#47<$file> = Phi(Var#26<$file>)
    Var#48<$version> = Phi(Var#27<$version>)
    Var#49<$message> = Phi(Var#28<$message>)
    Expr_Assertion<not(not(type(LITERAL('null'))))>
        expr: Var#46<$replacement>
        result: Var#50<$replacement>
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.')
        result: Var#51
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: Var#51
        args[1]: Var#47<$file>
        args[2]: Var#48<$version>
        result: Var#52
    Expr_BinaryOp_Concat
        left: Var#52
        right: Var#49<$message>
        result: Var#53
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#53
        result: Var#54
    Stmt_Jump
        target: Block#18

Block#16
    Parent: Block#13
    Var#55<$replacement> = Phi(Var#34<$replacement>)
    Var#56<$file> = Phi(Var#26<$file>)
    Var#57<$version> = Phi(Var#27<$version>)
    Var#58<$message> = Phi(Var#28<$message>)
    Expr_Assertion<not(type(LITERAL('null')))>
        expr: Var#55<$replacement>
        result: Var#59<$replacement>
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: LITERAL('%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.')
        args[1]: Var#56<$file>
        args[2]: Var#57<$version>
        args[3]: Var#59<$replacement>
        result: Var#60
    Expr_BinaryOp_Concat
        left: Var#60
        right: Var#58<$message>
        result: Var#61
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#61
        result: Var#62
    Stmt_Jump
        target: Block#19

Block#17
    Parent: Block#13
    Var#63<$replacement> = Phi(Var#34<$replacement>)
    Var#64<$file> = Phi(Var#26<$file>)
    Var#65<$version> = Phi(Var#27<$version>)
    Var#66<$message> = Phi(Var#28<$message>)
    Expr_Assertion<not(not(type(LITERAL('null'))))>
        expr: Var#63<$replacement>
        result: Var#67<$replacement>
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: LITERAL('%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.')
        args[1]: Var#64<$file>
        args[2]: Var#65<$version>
        result: Var#68
    Expr_BinaryOp_Concat
        left: Var#68
        right: Var#66<$message>
        result: Var#69
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#69
        result: Var#70
    Stmt_Jump
        target: Block#19

Block#18
    Parent: Block#14
    Parent: Block#15
    Stmt_Jump
        target: Block#20

Block#19
    Parent: Block#16
    Parent: Block#17
    Stmt_Jump
        target: Block#20

Block#20
    Parent: Block#18
    Parent: Block#19
    Stmt_Jump
        target: Block#10

Function _deprecated_argument():
Block#1
    Expr_Param
        name: LITERAL('function')
        result: Var#1<$function>
    Expr_Param
        name: LITERAL('version')
        result: Var#2<$version>
    Expr_Param
        name: LITERAL('message')
        defaultVar: Var#3
        result: Var#4<$message>
        defaultBlock: Block#2
    Expr_FuncCall
        name: LITERAL('do_action')
        args[0]: LITERAL('deprecated_argument_run')
        args[1]: Var#1<$function>
        args[2]: Var#4<$message>
        args[3]: Var#2<$version>
        result: Var#5
    Expr_ConstFetch
        name: LITERAL('WP_DEBUG')
        result: Var#6
    Stmt_JumpIf
        cond: Var#6
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#3

Block#3
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#7
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('deprecated_argument_trigger_error')
        args[1]: Var#7
        result: Var#8
    Expr_Cast_Bool
        expr: Var#8
        result: Var#9
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#1
    Parent: Block#3
    Var#10 = Phi(LITERAL(false), Var#9)
    Var#11<$message> = Phi(Var#4<$message>)
    Var#12<$function> = Phi(Var#1<$function>)
    Var#13<$version> = Phi(Var#2<$version>)
    Stmt_JumpIf
        cond: Var#10
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('__')
        result: Var#14
    Stmt_JumpIf
        cond: Var#14
        if: Block#7
        else: Block#8

Block#6
    Parent: Block#4
    Stmt_Jump
        target: Block#9

Block#7
    Parent: Block#5
    Var#15<$message> = Phi(Var#11<$message>)
    Expr_FuncCall
        name: LITERAL('is_null')
        args[0]: Var#15<$message>
        result: Var#16
    Expr_BooleanNot
        expr: Var#16
        result: Var#17
    Stmt_JumpIf
        cond: Var#17
        if: Block#10
        else: Block#11

Block#8
    Parent: Block#5
    Var#18<$message> = Phi(Var#11<$message>)
    Expr_FuncCall
        name: LITERAL('is_null')
        args[0]: Var#18<$message>
        result: Var#19
    Expr_BooleanNot
        expr: Var#19
        result: Var#20
    Stmt_JumpIf
        cond: Var#20
        if: Block#12
        else: Block#13

Block#9
    Parent: Block#16
    Parent: Block#6
    Terminal_Return

Block#10
    Parent: Block#7
    Var#21<$message> = Phi(Var#15<$message>)
    Var#22<$function> = Phi(Var#12<$function>)
    Var#23<$version> = Phi(Var#13<$version>)
    Expr_Assertion<not(type(LITERAL('null')))>
        expr: Var#21<$message>
        result: Var#24<$message>
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('%1$s was called with an argument that is <strong>deprecated</strong> since version %2$s! %3$s')
        result: Var#25
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: Var#25
        args[1]: Var#22<$function>
        args[2]: Var#23<$version>
        args[3]: Var#24<$message>
        result: Var#26
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#26
        result: Var#27
    Stmt_Jump
        target: Block#14

Block#11
    Parent: Block#7
    Var#28<$message> = Phi(Var#15<$message>)
    Var#29<$function> = Phi(Var#12<$function>)
    Var#30<$version> = Phi(Var#13<$version>)
    Expr_Assertion<not(not(type(LITERAL('null'))))>
        expr: Var#28<$message>
        result: Var#31<$message>
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('%1$s was called with an argument that is <strong>deprecated</strong> since version %2$s with no alternative available.')
        result: Var#32
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: Var#32
        args[1]: Var#29<$function>
        args[2]: Var#30<$version>
        result: Var#33
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#33
        result: Var#34
    Stmt_Jump
        target: Block#14

Block#12
    Parent: Block#8
    Var#35<$message> = Phi(Var#18<$message>)
    Var#36<$function> = Phi(Var#12<$function>)
    Var#37<$version> = Phi(Var#13<$version>)
    Expr_Assertion<not(type(LITERAL('null')))>
        expr: Var#35<$message>
        result: Var#38<$message>
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: LITERAL('%1$s was called with an argument that is <strong>deprecated</strong> since version %2$s! %3$s')
        args[1]: Var#36<$function>
        args[2]: Var#37<$version>
        args[3]: Var#38<$message>
        result: Var#39
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#39
        result: Var#40
    Stmt_Jump
        target: Block#15

Block#13
    Parent: Block#8
    Var#41<$message> = Phi(Var#18<$message>)
    Var#42<$function> = Phi(Var#12<$function>)
    Var#43<$version> = Phi(Var#13<$version>)
    Expr_Assertion<not(not(type(LITERAL('null'))))>
        expr: Var#41<$message>
        result: Var#44<$message>
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: LITERAL('%1$s was called with an argument that is <strong>deprecated</strong> since version %2$s with no alternative available.')
        args[1]: Var#42<$function>
        args[2]: Var#43<$version>
        result: Var#45
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#45
        result: Var#46
    Stmt_Jump
        target: Block#15

Block#14
    Parent: Block#10
    Parent: Block#11
    Stmt_Jump
        target: Block#16

Block#15
    Parent: Block#12
    Parent: Block#13
    Stmt_Jump
        target: Block#16

Block#16
    Parent: Block#14
    Parent: Block#15
    Stmt_Jump
        target: Block#9

Function _deprecated_hook():
Block#1
    Expr_Param
        name: LITERAL('hook')
        result: Var#1<$hook>
    Expr_Param
        name: LITERAL('version')
        result: Var#2<$version>
    Expr_Param
        name: LITERAL('replacement')
        defaultVar: Var#3
        result: Var#4<$replacement>
        defaultBlock: Block#2
    Expr_Param
        name: LITERAL('message')
        defaultVar: Var#5
        result: Var#6<$message>
        defaultBlock: Block#3
    Expr_FuncCall
        name: LITERAL('do_action')
        args[0]: LITERAL('deprecated_hook_run')
        args[1]: Var#1<$hook>
        args[2]: Var#4<$replacement>
        args[3]: Var#2<$version>
        args[4]: Var#6<$message>
        result: Var#7
    Expr_ConstFetch
        name: LITERAL('WP_DEBUG')
        result: Var#8
    Stmt_JumpIf
        cond: Var#8
        if: Block#4
        else: Block#5

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#3

Block#3
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#5

Block#4
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#9
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('deprecated_hook_trigger_error')
        args[1]: Var#9
        result: Var#10
    Expr_Cast_Bool
        expr: Var#10
        result: Var#11
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#1
    Parent: Block#4
    Var#12 = Phi(LITERAL(false), Var#11)
    Var#13<$message> = Phi(Var#6<$message>)
    Var#14<$replacement> = Phi(Var#4<$replacement>)
    Var#15<$hook> = Phi(Var#1<$hook>)
    Var#16<$version> = Phi(Var#2<$version>)
    Stmt_JumpIf
        cond: Var#12
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Var#17<$message> = Phi(Var#13<$message>)
    Expr_Empty
        expr: Var#17<$message>
        result: Var#18
    Stmt_JumpIf
        cond: Var#18
        if: Block#8
        else: Block#9

Block#7
    Parent: Block#5
    Stmt_Jump
        target: Block#10

Block#8
    Parent: Block#6
    Expr_Assign
        var: Var#19
        expr: LITERAL('')
        result: Var#20
    Stmt_Jump
        target: Block#11

Block#9
    Parent: Block#6
    Var#21<$message> = Phi(Var#17<$message>)
    Expr_BinaryOp_Concat
        left: LITERAL(' ')
        right: Var#21<$message>
        result: Var#22
    Expr_Assign
        var: Var#23
        expr: Var#22
        result: Var#24
    Stmt_Jump
        target: Block#11

Block#10
    Parent: Block#14
    Parent: Block#7
    Terminal_Return

Block#11
    Parent: Block#8
    Parent: Block#9
    Var#25 = Phi(Var#19, Var#23)
    Var#26<$replacement> = Phi(Var#14<$replacement>)
    Var#27<$hook> = Phi(Var#15<$hook>)
    Var#28<$version> = Phi(Var#16<$version>)
    Expr_Assign
        var: Var#29<$message>
        expr: Var#25
        result: Var#30
    Expr_FuncCall
        name: LITERAL('is_null')
        args[0]: Var#26<$replacement>
        result: Var#31
    Expr_BooleanNot
        expr: Var#31
        result: Var#32
    Stmt_JumpIf
        cond: Var#32
        if: Block#12
        else: Block#13

Block#12
    Parent: Block#11
    Var#33<$replacement> = Phi(Var#26<$replacement>)
    Var#34<$hook> = Phi(Var#27<$hook>)
    Var#35<$version> = Phi(Var#28<$version>)
    Var#36<$message> = Phi(Var#29<$message>)
    Expr_Assertion<not(type(LITERAL('null')))>
        expr: Var#33<$replacement>
        result: Var#37<$replacement>
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.')
        result: Var#38
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: Var#38
        args[1]: Var#34<$hook>
        args[2]: Var#35<$version>
        args[3]: Var#37<$replacement>
        result: Var#39
    Expr_BinaryOp_Concat
        left: Var#39
        right: Var#36<$message>
        result: Var#40
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#40
        result: Var#41
    Stmt_Jump
        target: Block#14

Block#13
    Parent: Block#11
    Var#42<$replacement> = Phi(Var#26<$replacement>)
    Var#43<$hook> = Phi(Var#27<$hook>)
    Var#44<$version> = Phi(Var#28<$version>)
    Var#45<$message> = Phi(Var#29<$message>)
    Expr_Assertion<not(not(type(LITERAL('null'))))>
        expr: Var#42<$replacement>
        result: Var#46<$replacement>
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.')
        result: Var#47
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: Var#47
        args[1]: Var#43<$hook>
        args[2]: Var#44<$version>
        result: Var#48
    Expr_BinaryOp_Concat
        left: Var#48
        right: Var#45<$message>
        result: Var#49
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#49
        result: Var#50
    Stmt_Jump
        target: Block#14

Block#14
    Parent: Block#12
    Parent: Block#13
    Stmt_Jump
        target: Block#10

Function _doing_it_wrong():
Block#1
    Expr_Param
        name: LITERAL('function')
        result: Var#1<$function>
    Expr_Param
        name: LITERAL('message')
        result: Var#2<$message>
    Expr_Param
        name: LITERAL('version')
        result: Var#3<$version>
    Expr_FuncCall
        name: LITERAL('do_action')
        args[0]: LITERAL('doing_it_wrong_run')
        args[1]: Var#1<$function>
        args[2]: Var#2<$message>
        args[3]: Var#3<$version>
        result: Var#4
    Expr_ConstFetch
        name: LITERAL('WP_DEBUG')
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#6
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('doing_it_wrong_trigger_error')
        args[1]: Var#6
        result: Var#7
    Expr_Cast_Bool
        expr: Var#7
        result: Var#8
    Stmt_Jump
        target: Block#3

Block#3
    Parent: Block#1
    Parent: Block#2
    Var#9 = Phi(LITERAL(false), Var#8)
    Var#10<$version> = Phi(Var#3<$version>)
    Var#11<$message> = Phi(Var#2<$message>)
    Var#12<$function> = Phi(Var#1<$function>)
    Stmt_JumpIf
        cond: Var#9
        if: Block#4
        else: Block#5

Block#4
    Parent: Block#3
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('__')
        result: Var#13
    Stmt_JumpIf
        cond: Var#13
        if: Block#6
        else: Block#7

Block#5
    Parent: Block#3
    Stmt_Jump
        target: Block#8

Block#6
    Parent: Block#4
    Var#14<$version> = Phi(Var#10<$version>)
    Expr_FuncCall
        name: LITERAL('is_null')
        args[0]: Var#14<$version>
        result: Var#15
    Stmt_JumpIf
        cond: Var#15
        if: Block#9
        else: Block#10

Block#7
    Parent: Block#4
    Var#16<$version> = Phi(Var#10<$version>)
    Expr_FuncCall
        name: LITERAL('is_null')
        args[0]: Var#16<$version>
        result: Var#17
    Stmt_JumpIf
        cond: Var#17
        if: Block#11
        else: Block#12

Block#8
    Parent: Block#15
    Parent: Block#5
    Terminal_Return

Block#9
    Parent: Block#6
    Var#18<$version> = Phi(Var#14<$version>)
    Expr_Assertion<type(LITERAL('null'))>
        expr: Var#18<$version>
        result: Var#19<$version>
    Expr_Assign
        var: Var#20
        expr: LITERAL('')
        result: Var#21
    Stmt_Jump
        target: Block#13

Block#10
    Parent: Block#6
    Var#22<$version> = Phi(Var#14<$version>)
    Expr_Assertion<not(type(LITERAL('null')))>
        expr: Var#22<$version>
        result: Var#23<$version>
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('(This message was added in version %s.)')
        result: Var#24
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: Var#24
        args[1]: Var#23<$version>
        result: Var#25
    Expr_Assign
        var: Var#26
        expr: Var#25
        result: Var#27
    Stmt_Jump
        target: Block#13

Block#11
    Parent: Block#7
    Var#28<$version> = Phi(Var#16<$version>)
    Expr_Assertion<type(LITERAL('null'))>
        expr: Var#28<$version>
        result: Var#29<$version>
    Expr_Assign
        var: Var#30
        expr: LITERAL('')
        result: Var#31
    Stmt_Jump
        target: Block#14

Block#12
    Parent: Block#7
    Var#32<$version> = Phi(Var#16<$version>)
    Expr_Assertion<not(type(LITERAL('null')))>
        expr: Var#32<$version>
        result: Var#33<$version>
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: LITERAL('(This message was added in version %s.)')
        args[1]: Var#33<$version>
        result: Var#34
    Expr_Assign
        var: Var#35
        expr: Var#34
        result: Var#36
    Stmt_Jump
        target: Block#14

Block#13
    Parent: Block#9
    Parent: Block#10
    Var#37 = Phi(Var#20, Var#26)
    Var#38<$message> = Phi(Var#11<$message>)
    Var#39<$function> = Phi(Var#12<$function>)
    Expr_Assign
        var: Var#40<$version>
        expr: Var#37
        result: Var#41
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('Please see <a href="%s">Debugging in WordPress</a> for more information.')
        result: Var#42
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('https://codex.wordpress.org/Debugging_in_WordPress')
        result: Var#43
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: Var#42
        args[1]: Var#43
        result: Var#44
    Expr_BinaryOp_Concat
        left: LITERAL(' ')
        right: Var#44
        result: Var#45
    Expr_BinaryOp_Concat
        left: Var#38<$message>
        right: Var#45
        result: Var#46
    Expr_Assign
        var: Var#47<$message>
        expr: Var#46
        result: Var#48
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('%1$s was called <strong>incorrectly</strong>. %2$s %3$s')
        result: Var#49
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: Var#49
        args[1]: Var#39<$function>
        args[2]: Var#47<$message>
        args[3]: Var#40<$version>
        result: Var#50
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#50
        result: Var#51
    Stmt_Jump
        target: Block#15

Block#14
    Parent: Block#11
    Parent: Block#12
    Var#52 = Phi(Var#30, Var#35)
    Var#53<$message> = Phi(Var#11<$message>)
    Var#54<$function> = Phi(Var#12<$function>)
    Expr_Assign
        var: Var#55<$version>
        expr: Var#52
        result: Var#56
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: LITERAL(' Please see <a href="%s">Debugging in WordPress</a> for more information.')
        args[1]: LITERAL('https://codex.wordpress.org/Debugging_in_WordPress')
        result: Var#57
    Expr_BinaryOp_Concat
        left: Var#53<$message>
        right: Var#57
        result: Var#58
    Expr_Assign
        var: Var#59<$message>
        expr: Var#58
        result: Var#60
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: LITERAL('%1$s was called <strong>incorrectly</strong>. %2$s %3$s')
        args[1]: Var#54<$function>
        args[2]: Var#59<$message>
        args[3]: Var#55<$version>
        result: Var#61
    Expr_FuncCall
        name: LITERAL('trigger_error')
        args[0]: Var#61
        result: Var#62
    Stmt_Jump
        target: Block#15

Block#15
    Parent: Block#13
    Parent: Block#14
    Stmt_Jump
        target: Block#8

Function is_lighttpd_before_150():
Block#1
    Var#1<$_SERVER> = Phi()
    Expr_ArrayDimFetch
        var: Var#1<$_SERVER>
        dim: LITERAL('SERVER_SOFTWARE')
        result: Var#2
    Expr_Isset
        vars[0]: Var#2
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#4<$_SERVER> = Phi(Var#1<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#4<$_SERVER>
        dim: LITERAL('SERVER_SOFTWARE')
        result: Var#5
    Expr_Assign
        var: Var#6
        expr: Var#5
        result: Var#7
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Expr_Assign
        var: Var#8
        expr: LITERAL('')
        result: Var#9
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Var#10 = Phi(Var#6, Var#8)
    Expr_FuncCall
        name: LITERAL('explode')
        args[0]: LITERAL('/')
        args[1]: Var#10
        result: Var#11
    Expr_Assign
        var: Var#12<$server_parts>
        expr: Var#11
        result: Var#13
    Expr_ArrayDimFetch
        var: Var#12<$server_parts>
        dim: LITERAL(1)
        result: Var#14
    Expr_Isset
        vars[0]: Var#14
        result: Var#15
    Stmt_JumpIf
        cond: Var#15
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Var#16<$server_parts> = Phi(Var#12<$server_parts>)
    Expr_ArrayDimFetch
        var: Var#16<$server_parts>
        dim: LITERAL(1)
        result: Var#17
    Expr_Assign
        var: Var#18
        expr: Var#17
        result: Var#19
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Expr_Assign
        var: Var#20
        expr: LITERAL('')
        result: Var#21
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#5
    Parent: Block#6
    Var#22 = Phi(Var#18, Var#20)
    Var#23<$server_parts> = Phi(Var#16<$server_parts>, Var#12<$server_parts>)
    Expr_ArrayDimFetch
        var: Var#23<$server_parts>
        dim: LITERAL(1)
        result: Var#24
    Expr_Assign
        var: Var#24
        expr: Var#22
        result: Var#25
    Expr_ArrayDimFetch
        var: Var#23<$server_parts>
        dim: LITERAL(0)
        result: Var#26
    Expr_BinaryOp_Equal
        left: LITERAL('lighttpd')
        right: Var#26
        result: Var#27
    Stmt_JumpIf
        cond: Var#27
        if: Block#8
        else: Block#9

Block#8
    Parent: Block#7
    Var#28<$server_parts> = Phi(Var#23<$server_parts>)
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#29
    Expr_ArrayDimFetch
        var: Var#28<$server_parts>
        dim: LITERAL(1)
        result: Var#30
    Expr_FuncCall
        name: LITERAL('version_compare')
        args[0]: Var#30
        args[1]: LITERAL('1.5.0')
        result: Var#31
    Expr_BinaryOp_Equal
        left: Var#29
        right: Var#31
        result: Var#32
    Expr_Cast_Bool
        expr: Var#32
        result: Var#33
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#7
    Parent: Block#8
    Var#34 = Phi(LITERAL(false), Var#33)
    Terminal_Return
        expr: Var#34

Function apache_mod_loaded():
Block#1
    Expr_Param
        name: LITERAL('mod')
        result: Var#1<$mod>
    Expr_Param
        name: LITERAL('default')
        defaultVar: Var#2
        result: Var#3<$default>
        defaultBlock: Block#2
    Var#4<$is_apache> = Phi()
    Terminal_GlobalVar
        var: LITERAL('is_apache')
    Expr_BooleanNot
        expr: Var#4<$is_apache>
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#2

Block#3
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#6
    Terminal_Return
        expr: Var#6

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#4
    Var#7<$mod> = Phi(Var#1<$mod>)
    Var#8<$default> = Phi(Var#3<$default>)
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('apache_get_modules')
        result: Var#9
    Stmt_JumpIf
        cond: Var#9
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Var#10<$mod> = Phi(Var#7<$mod>)
    Expr_FuncCall
        name: LITERAL('apache_get_modules')
        result: Var#11
    Expr_Assign
        var: Var#12<$mods>
        expr: Var#11
        result: Var#13
    Expr_FuncCall
        name: LITERAL('in_array')
        args[0]: Var#10<$mod>
        args[1]: Var#12<$mods>
        result: Var#14
    Stmt_JumpIf
        cond: Var#14
        if: Block#8
        else: Block#9

Block#7
    Parent: Block#5
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('phpinfo')
        result: Var#15
    Stmt_JumpIf
        cond: Var#15
        if: Block#10
        else: Block#11

Block#8
    Parent: Block#6
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#16
    Terminal_Return
        expr: Var#16

Block#9
    Parent: Block#6
    Stmt_Jump
        target: Block#12

Block#10
    Parent: Block#7
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#17
    Expr_FuncCall
        name: LITERAL('ini_get')
        args[0]: LITERAL('disable_functions')
        result: Var#18
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#18
        args[1]: LITERAL('phpinfo')
        result: Var#19
    Expr_BinaryOp_Identical
        left: Var#17
        right: Var#19
        result: Var#20
    Expr_Cast_Bool
        expr: Var#20
        result: Var#21
    Stmt_Jump
        target: Block#11

Block#11
    Parent: Block#7
    Parent: Block#10
    Var#22 = Phi(LITERAL(false), Var#21)
    Var#23<$mod> = Phi(Var#7<$mod>)
    Var#24<$default> = Phi(Var#8<$default>)
    Stmt_JumpIf
        cond: Var#22
        if: Block#13
        else: Block#14

Block#12
    Parent: Block#9
    Var#25<$default> = Phi(Var#8<$default>)
    Stmt_Jump
        target: Block#15

Block#13
    Parent: Block#11
    Var#26<$mod> = Phi(Var#23<$mod>)
    Expr_FuncCall
        name: LITERAL('ob_start')
        result: Var#27
    Expr_FuncCall
        name: LITERAL('phpinfo')
        args[0]: LITERAL(8)
        result: Var#28
    Expr_FuncCall
        name: LITERAL('ob_get_clean')
        result: Var#29
    Expr_Assign
        var: Var#30<$phpinfo>
        expr: Var#29
        result: Var#31
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#32
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#30<$phpinfo>
        args[1]: Var#26<$mod>
        result: Var#33
    Expr_BinaryOp_NotIdentical
        left: Var#32
        right: Var#33
        result: Var#34
    Stmt_JumpIf
        cond: Var#34
        if: Block#16
        else: Block#17

Block#14
    Parent: Block#11
    Stmt_Jump
        target: Block#15

Block#15
    Parent: Block#12
    Parent: Block#18
    Parent: Block#14
    Var#35<$default> = Phi(Var#25<$default>, Var#36<$default>, Var#24<$default>)
    Terminal_Return
        expr: Var#35<$default>

Block#16
    Parent: Block#13
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#37
    Terminal_Return
        expr: Var#37

Block#17
    Parent: Block#13
    Stmt_Jump
        target: Block#18

Block#18
    Parent: Block#17
    Var#36<$default> = Phi(Var#24<$default>)
    Stmt_Jump
        target: Block#15

Function iis7_supports_permalinks():
Block#1
    Var#1<$is_iis7> = Phi()
    Var#2<$_SERVER> = Phi()
    Terminal_GlobalVar
        var: LITERAL('is_iis7')
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#3
    Expr_Assign
        var: Var#4<$supports_permalinks>
        expr: Var#3
        result: Var#5
    Stmt_JumpIf
        cond: Var#1<$is_iis7>
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#6
    Expr_FuncCall
        name: LITERAL('class_exists')
        args[0]: LITERAL('DOMDocument')
        args[1]: Var#6
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#4
        else: Block#5

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#6

Block#4
    Parent: Block#2
    Var#8<$_SERVER> = Phi(Var#2<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#8<$_SERVER>
        dim: LITERAL('IIS_UrlRewriteModule')
        result: Var#9
    Expr_Isset
        vars[0]: Var#9
        result: Var#10
    Expr_Cast_Bool
        expr: Var#10
        result: Var#11
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#2
    Parent: Block#4
    Var#12 = Phi(LITERAL(false), Var#11)
    Stmt_JumpIf
        cond: Var#12
        if: Block#7
        else: Block#8

Block#6
    Parent: Block#8
    Parent: Block#3
    Var#13<$supports_permalinks> = Phi(Var#14<$supports_permalinks>, Var#4<$supports_permalinks>)
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('iis7_supports_permalinks')
        args[1]: Var#13<$supports_permalinks>
        result: Var#15
    Terminal_Return
        expr: Var#15

Block#7
    Parent: Block#5
    Expr_ConstFetch
        name: LITERAL('PHP_SAPI')
        result: Var#16
    Expr_BinaryOp_Equal
        left: Var#16
        right: LITERAL('cgi-fcgi')
        result: Var#17
    Expr_Cast_Bool
        expr: Var#17
        result: Var#18
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#5
    Parent: Block#7
    Var#19 = Phi(LITERAL(false), Var#18)
    Expr_Assign
        var: Var#14<$supports_permalinks>
        expr: Var#19
        result: Var#20
    Stmt_Jump
        target: Block#6

Function validate_file():
Block#1
    Expr_Param
        name: LITERAL('file')
        result: Var#1<$file>
    Expr_Param
        name: LITERAL('allowed_files')
        defaultVar: LITERAL('')
        result: Var#2<$allowed_files>
        defaultBlock: Block#2
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#3
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#1<$file>
        args[1]: LITERAL('..')
        result: Var#4
    Expr_BinaryOp_NotIdentical
        left: Var#3
        right: Var#4
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#3
        else: Block#4

Block#2

Block#3
    Parent: Block#1
    Terminal_Return
        expr: LITERAL(1)

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#4
    Var#6<$file> = Phi(Var#1<$file>)
    Var#7<$allowed_files> = Phi(Var#2<$allowed_files>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#8
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#6<$file>
        args[1]: LITERAL('./')
        result: Var#9
    Expr_BinaryOp_NotIdentical
        left: Var#8
        right: Var#9
        result: Var#10
    Stmt_JumpIf
        cond: Var#10
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Terminal_Return
        expr: LITERAL(1)

Block#7
    Parent: Block#5
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#7
    Var#11<$allowed_files> = Phi(Var#7<$allowed_files>)
    Var#12<$file> = Phi(Var#6<$file>)
    Expr_Empty
        expr: Var#11<$allowed_files>
        result: Var#13
    Expr_BooleanNot
        expr: Var#13
        result: Var#14
    Stmt_JumpIf
        cond: Var#14
        if: Block#9
        else: Block#10

Block#9
    Parent: Block#8
    Var#15<$file> = Phi(Var#12<$file>)
    Var#16<$allowed_files> = Phi(Var#11<$allowed_files>)
    Expr_FuncCall
        name: LITERAL('in_array')
        args[0]: Var#15<$file>
        args[1]: Var#16<$allowed_files>
        result: Var#17
    Expr_BooleanNot
        expr: Var#17
        result: Var#18
    Expr_Cast_Bool
        expr: Var#18
        result: Var#19
    Stmt_Jump
        target: Block#10

Block#10
    Parent: Block#8
    Parent: Block#9
    Var#20 = Phi(LITERAL(false), Var#19)
    Var#21<$file> = Phi(Var#12<$file>, Var#15<$file>)
    Stmt_JumpIf
        cond: Var#20
        if: Block#11
        else: Block#12

Block#11
    Parent: Block#10
    Terminal_Return
        expr: LITERAL(3)

Block#12
    Parent: Block#10
    Stmt_Jump
        target: Block#13

Block#13
    Parent: Block#12
    Var#22<$file> = Phi(Var#21<$file>)
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#22<$file>
        args[1]: LITERAL(1)
        args[2]: LITERAL(1)
        result: Var#23
    Expr_BinaryOp_Equal
        left: LITERAL(':')
        right: Var#23
        result: Var#24
    Stmt_JumpIf
        cond: Var#24
        if: Block#14
        else: Block#15

Block#14
    Parent: Block#13
    Terminal_Return
        expr: LITERAL(2)

Block#15
    Parent: Block#13
    Stmt_Jump
        target: Block#16

Block#16
    Parent: Block#15
    Terminal_Return
        expr: LITERAL(0)

Function force_ssl_admin():
Block#1
    Expr_Param
        name: LITERAL('force')
        defaultVar: Var#1
        result: Var#2<$force>
        defaultBlock: Block#2
    Terminal_StaticVar
        var: Var#3<static<&$forced>>
        defaultVar: Var#4
        defaultBlock: Block#3
    Expr_FuncCall
        name: LITERAL('is_null')
        args[0]: Var#2<$force>
        result: Var#5
    Expr_BooleanNot
        expr: Var#5
        result: Var#6
    Stmt_JumpIf
        cond: Var#6
        if: Block#4
        else: Block#5

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#1

Block#3
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#4

Block#4
    Parent: Block#1
    Var#7<$force> = Phi(Var#2<$force>)
    Var#8<$forced> = Phi(Var#3<static<&$forced>>)
    Expr_Assertion<not(type(LITERAL('null')))>
        expr: Var#7<$force>
        result: Var#9<$force>
    Expr_Assign
        var: Var#10<$old_forced>
        expr: Var#8<$forced>
        result: Var#11
    Expr_Assign
        var: Var#12<$forced>
        expr: Var#9<$force>
        result: Var#13
    Terminal_Return
        expr: Var#10<$old_forced>

Block#5
    Parent: Block#1
    Var#14<$force> = Phi(Var#2<$force>)
    Expr_Assertion<not(not(type(LITERAL('null'))))>
        expr: Var#14<$force>
        result: Var#15<$force>
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#5
    Var#16<$forced> = Phi(Var#3<static<&$forced>>)
    Terminal_Return
        expr: Var#16<$forced>

Function wp_guess_url():
Block#1
    Var#1<$_SERVER> = Phi()
    Expr_FuncCall
        name: LITERAL('defined')
        args[0]: LITERAL('WP_SITEURL')
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('WP_SITEURL')
        result: Var#3
    Expr_BinaryOp_NotEqual
        left: LITERAL('')
        right: Var#3
        result: Var#4
    Expr_Cast_Bool
        expr: Var#4
        result: Var#5
    Stmt_Jump
        target: Block#3

Block#3
    Parent: Block#1
    Parent: Block#2
    Var#6 = Phi(LITERAL(false), Var#5)
    Var#7<$_SERVER> = Phi(Var#1<$_SERVER>)
    Stmt_JumpIf
        cond: Var#6
        if: Block#4
        else: Block#5

Block#4
    Parent: Block#3
    Expr_ConstFetch
        name: LITERAL('WP_SITEURL')
        result: Var#8
    Expr_Assign
        var: Var#9<$url>
        expr: Var#8
        result: Var#10
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#3
    Var#11<$_SERVER> = Phi(Var#7<$_SERVER>)
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#12
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: LITERAL('\\')
        args[1]: LITERAL('/')
        args[2]: Var#12
        result: Var#13
    Expr_Assign
        var: Var#14<$abspath_fix>
        expr: Var#13
        result: Var#15
    Expr_ArrayDimFetch
        var: Var#11<$_SERVER>
        dim: LITERAL('SCRIPT_FILENAME')
        result: Var#16
    Expr_FuncCall
        name: LITERAL('dirname')
        args[0]: Var#16
        result: Var#17
    Expr_Assign
        var: Var#18<$script_filename_dir>
        expr: Var#17
        result: Var#19
    Expr_ArrayDimFetch
        var: Var#11<$_SERVER>
        dim: LITERAL('REQUEST_URI')
        result: Var#20
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#20
        args[1]: LITERAL('wp-admin')
        result: Var#21
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#22
    Expr_BinaryOp_NotIdentical
        left: Var#21
        right: Var#22
        result: Var#23
    Stmt_JumpIf
        cond: Var#23
        if: Block#7
        else: Block#8

Block#6
    Parent: Block#4
    Parent: Block#18
    Var#24<$url> = Phi(Var#9<$url>, Var#25<$url>)
    Expr_FuncCall
        name: LITERAL('rtrim')
        args[0]: Var#24<$url>
        args[1]: LITERAL('/')
        result: Var#26
    Terminal_Return
        expr: Var#26

Block#7
    Parent: Block#5
    Parent: Block#8
    Var#27 = Phi(LITERAL(true), Var#28)
    Var#29<$_SERVER> = Phi(Var#11<$_SERVER>, Var#30<$_SERVER>)
    Var#31<$script_filename_dir> = Phi(Var#18<$script_filename_dir>)
    Var#32<$abspath_fix> = Phi(Var#14<$abspath_fix>)
    Stmt_JumpIf
        cond: Var#27
        if: Block#9
        else: Block#10

Block#8
    Parent: Block#5
    Var#30<$_SERVER> = Phi(Var#11<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#30<$_SERVER>
        dim: LITERAL('REQUEST_URI')
        result: Var#33
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#33
        args[1]: LITERAL('wp-login.php')
        result: Var#34
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#35
    Expr_BinaryOp_NotIdentical
        left: Var#34
        right: Var#35
        result: Var#36
    Expr_Cast_Bool
        expr: Var#36
        result: Var#28
    Stmt_Jump
        target: Block#7

Block#9
    Parent: Block#7
    Var#37<$_SERVER> = Phi(Var#29<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#37<$_SERVER>
        dim: LITERAL('REQUEST_URI')
        result: Var#38
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('#/(wp-admin/.*|wp-login.php)#i')
        args[1]: LITERAL('')
        args[2]: Var#38
        result: Var#39
    Expr_Assign
        var: Var#40<$path>
        expr: Var#39
        result: Var#41
    Stmt_Jump
        target: Block#11

Block#10
    Parent: Block#7
    Var#42<$script_filename_dir> = Phi(Var#31<$script_filename_dir>)
    Var#43<$abspath_fix> = Phi(Var#32<$abspath_fix>)
    Expr_BinaryOp_Concat
        left: Var#42<$script_filename_dir>
        right: LITERAL('/')
        result: Var#44
    Expr_BinaryOp_Equal
        left: Var#44
        right: Var#43<$abspath_fix>
        result: Var#45
    Stmt_JumpIf
        cond: Var#45
        if: Block#12
        else: Block#13

Block#11
    Parent: Block#9
    Parent: Block#12
    Parent: Block#19
    Var#46<$_SERVER> = Phi(Var#37<$_SERVER>, Var#47<$_SERVER>, Var#48<$_SERVER>)
    Var#49<$path> = Phi(Var#40<$path>, Var#50<$path>, Var#51<$path>)
    Expr_FuncCall
        name: LITERAL('is_ssl')
        result: Var#52
    Stmt_JumpIf
        cond: Var#52
        if: Block#14
        else: Block#15

Block#12
    Parent: Block#10
    Var#47<$_SERVER> = Phi(Var#29<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#47<$_SERVER>
        dim: LITERAL('PHP_SELF')
        result: Var#53
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('#/[^/]*$#i')
        args[1]: LITERAL('')
        args[2]: Var#53
        result: Var#54
    Expr_Assign
        var: Var#50<$path>
        expr: Var#54
        result: Var#55
    Stmt_Jump
        target: Block#11

Block#13
    Parent: Block#10
    Var#56<$_SERVER> = Phi(Var#29<$_SERVER>)
    Var#57<$abspath_fix> = Phi(Var#43<$abspath_fix>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#58
    Expr_ArrayDimFetch
        var: Var#56<$_SERVER>
        dim: LITERAL('SCRIPT_FILENAME')
        result: Var#59
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#59
        args[1]: Var#57<$abspath_fix>
        result: Var#60
    Expr_BinaryOp_NotIdentical
        left: Var#58
        right: Var#60
        result: Var#61
    Stmt_JumpIf
        cond: Var#61
        if: Block#16
        else: Block#17

Block#14
    Parent: Block#11
    Expr_Assign
        var: Var#62
        expr: LITERAL('https://')
        result: Var#63
    Stmt_Jump
        target: Block#18

Block#15
    Parent: Block#11
    Expr_Assign
        var: Var#64
        expr: LITERAL('http://')
        result: Var#65
    Stmt_Jump
        target: Block#18

Block#16
    Parent: Block#13
    Var#66<$script_filename_dir> = Phi(Var#42<$script_filename_dir>)
    Var#67<$_SERVER> = Phi(Var#56<$_SERVER>)
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#68
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: Var#68
        args[1]: LITERAL('')
        args[2]: Var#66<$script_filename_dir>
        result: Var#69
    Expr_Assign
        var: Var#70<$directory>
        expr: Var#69
        result: Var#71
    Expr_FuncCall
        name: LITERAL('preg_quote')
        args[0]: Var#70<$directory>
        args[1]: LITERAL('#')
        result: Var#72
    Expr_BinaryOp_Concat
        left: LITERAL('#/')
        right: Var#72
        result: Var#73
    Expr_BinaryOp_Concat
        left: Var#73
        right: LITERAL('/[^/]*$#i')
        result: Var#74
    Expr_ArrayDimFetch
        var: Var#67<$_SERVER>
        dim: LITERAL('REQUEST_URI')
        result: Var#75
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: Var#74
        args[1]: LITERAL('')
        args[2]: Var#75
        result: Var#76
    Expr_Assign
        var: Var#77<$path>
        expr: Var#76
        result: Var#78
    Stmt_Jump
        target: Block#19

Block#17
    Parent: Block#13
    Var#79<$abspath_fix> = Phi(Var#57<$abspath_fix>)
    Var#80<$script_filename_dir> = Phi(Var#42<$script_filename_dir>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#81
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#79<$abspath_fix>
        args[1]: Var#80<$script_filename_dir>
        result: Var#82
    Expr_BinaryOp_NotIdentical
        left: Var#81
        right: Var#82
        result: Var#83
    Stmt_JumpIf
        cond: Var#83
        if: Block#20
        else: Block#21

Block#18
    Parent: Block#14
    Parent: Block#15
    Var#84 = Phi(Var#62, Var#64)
    Var#85<$_SERVER> = Phi(Var#46<$_SERVER>)
    Var#86<$path> = Phi(Var#49<$path>)
    Expr_Assign
        var: Var#87<$schema>
        expr: Var#84
        result: Var#88
    Expr_ArrayDimFetch
        var: Var#85<$_SERVER>
        dim: LITERAL('HTTP_HOST')
        result: Var#89
    Expr_BinaryOp_Concat
        left: Var#87<$schema>
        right: Var#89
        result: Var#90
    Expr_BinaryOp_Concat
        left: Var#90
        right: Var#86<$path>
        result: Var#91
    Expr_Assign
        var: Var#25<$url>
        expr: Var#91
        result: Var#92
    Stmt_Jump
        target: Block#6

Block#19
    Parent: Block#16
    Parent: Block#20
    Parent: Block#21
    Var#48<$_SERVER> = Phi(Var#67<$_SERVER>, Var#93<$_SERVER>, Var#94<$_SERVER>)
    Var#51<$path> = Phi(Var#77<$path>, Var#95<$path>, Var#96<$path>)
    Stmt_Jump
        target: Block#11

Block#20
    Parent: Block#17
    Var#97<$abspath_fix> = Phi(Var#79<$abspath_fix>)
    Var#98<$script_filename_dir> = Phi(Var#80<$script_filename_dir>)
    Var#93<$_SERVER> = Phi(Var#56<$_SERVER>)
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#97<$abspath_fix>
        args[1]: Var#98<$script_filename_dir>
        result: Var#99
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#98<$script_filename_dir>
        result: Var#100
    Expr_BinaryOp_Plus
        left: Var#99
        right: Var#100
        result: Var#101
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#97<$abspath_fix>
        args[1]: Var#101
        result: Var#102
    Expr_Assign
        var: Var#103<$subdirectory>
        expr: Var#102
        result: Var#104
    Expr_ArrayDimFetch
        var: Var#93<$_SERVER>
        dim: LITERAL('REQUEST_URI')
        result: Var#105
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('#/[^/]*$#i')
        args[1]: LITERAL('')
        args[2]: Var#105
        result: Var#106
    Expr_BinaryOp_Concat
        left: Var#106
        right: Var#103<$subdirectory>
        result: Var#107
    Expr_Assign
        var: Var#95<$path>
        expr: Var#107
        result: Var#108
    Stmt_Jump
        target: Block#19

Block#21
    Parent: Block#17
    Var#94<$_SERVER> = Phi(Var#56<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#94<$_SERVER>
        dim: LITERAL('REQUEST_URI')
        result: Var#109
    Expr_Assign
        var: Var#96<$path>
        expr: Var#109
        result: Var#110
    Stmt_Jump
        target: Block#19

Function wp_suspend_cache_addition():
Block#1
    Expr_Param
        name: LITERAL('suspend')
        defaultVar: Var#1
        result: Var#2<$suspend>
        defaultBlock: Block#2
    Terminal_StaticVar
        var: Var#3<static<&$_suspend>>
        defaultVar: Var#4
        defaultBlock: Block#3
    Expr_FuncCall
        name: LITERAL('is_bool')
        args[0]: Var#2<$suspend>
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#4
        else: Block#5

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#1

Block#3
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#4

Block#4
    Parent: Block#1
    Var#6<$suspend> = Phi(Var#2<$suspend>)
    Expr_Assertion<type(LITERAL('bool'))>
        expr: Var#6<$suspend>
        result: Var#7<$suspend>
    Expr_Assign
        var: Var#8<$_suspend>
        expr: Var#7<$suspend>
        result: Var#9
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#1
    Var#10<$suspend> = Phi(Var#2<$suspend>)
    Expr_Assertion<not(type(LITERAL('bool')))>
        expr: Var#10<$suspend>
        result: Var#11<$suspend>
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#4
    Parent: Block#5
    Var#12<$_suspend> = Phi(Var#8<$_suspend>, Var#3<static<&$_suspend>>)
    Terminal_Return
        expr: Var#12<$_suspend>

Function wp_suspend_cache_invalidation():
Block#1
    Expr_Param
        name: LITERAL('suspend')
        defaultVar: Var#1
        result: Var#2<$suspend>
        defaultBlock: Block#2
    Var#3<$_wp_suspend_cache_invalidation> = Phi()
    Terminal_GlobalVar
        var: LITERAL('_wp_suspend_cache_invalidation')
    Expr_Assign
        var: Var#4<$current_suspend>
        expr: Var#3<$_wp_suspend_cache_invalidation>
        result: Var#5
    Expr_Assign
        var: Var#6<$_wp_suspend_cache_invalidation>
        expr: Var#2<$suspend>
        result: Var#7
    Terminal_Return
        expr: Var#4<$current_suspend>

Block#2
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#1

Function is_main_site():
Block#1
    Expr_Param
        name: LITERAL('site_id')
        defaultVar: Var#1
        result: Var#2<$site_id>
        defaultBlock: Block#2
    Var#3<$current_site> = Phi()
    Terminal_GlobalVar
        var: LITERAL('current_site')
    Expr_FuncCall
        name: LITERAL('is_multisite')
        result: Var#4
    Expr_BooleanNot
        expr: Var#4
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#1

Block#3
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#6
    Terminal_Return
        expr: Var#6

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#4
    Var#7<$site_id> = Phi(Var#2<$site_id>)
    Var#8<$current_site> = Phi(Var#3<$current_site>)
    Expr_BooleanNot
        expr: Var#7<$site_id>
        result: Var#9
    Stmt_JumpIf
        cond: Var#9
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Expr_FuncCall
        name: LITERAL('get_current_blog_id')
        result: Var#10
    Expr_Assign
        var: Var#11<$site_id>
        expr: Var#10
        result: Var#12
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#5
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#6
    Parent: Block#7
    Var#13<$site_id> = Phi(Var#11<$site_id>, Var#7<$site_id>)
    Var#14<$current_site> = Phi(Var#8<$current_site>)
    Expr_Cast_Int
        expr: Var#13<$site_id>
        result: Var#15
    Expr_PropertyFetch
        var: Var#14<$current_site>
        name: LITERAL('blog_id')
        result: Var#16
    Expr_Cast_Int
        expr: Var#16
        result: Var#17
    Expr_BinaryOp_Identical
        left: Var#15
        right: Var#17
        result: Var#18
    Terminal_Return
        expr: Var#18

Function is_main_network():
Block#1
    Expr_Param
        name: LITERAL('network_id')
        defaultVar: Var#1
        result: Var#2<$network_id>
        defaultBlock: Block#2
    Expr_FuncCall
        name: LITERAL('is_multisite')
        result: Var#3
    Expr_BooleanNot
        expr: Var#3
        result: Var#4
    Stmt_JumpIf
        cond: Var#4
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#1

Block#3
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#5
    Terminal_Return
        expr: Var#5

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#4
    Var#6<$network_id> = Phi(Var#2<$network_id>)
    Expr_FuncCall
        name: LITERAL('get_current_site')
        result: Var#7
    Expr_PropertyFetch
        var: Var#7
        name: LITERAL('id')
        result: Var#8
    Expr_Cast_Int
        expr: Var#8
        result: Var#9
    Expr_Assign
        var: Var#10<$current_network_id>
        expr: Var#9
        result: Var#11
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#12
    Expr_BinaryOp_Identical
        left: Var#12
        right: Var#6<$network_id>
        result: Var#13
    Stmt_JumpIf
        cond: Var#13
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Var#14<$current_network_id> = Phi(Var#10<$current_network_id>)
    Expr_Assign
        var: Var#15<$network_id>
        expr: Var#14<$current_network_id>
        result: Var#16
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#5
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#6
    Parent: Block#7
    Var#17<$network_id> = Phi(Var#15<$network_id>, Var#6<$network_id>)
    Expr_Cast_Int
        expr: Var#17<$network_id>
        result: Var#18
    Expr_Assign
        var: Var#19<$network_id>
        expr: Var#18
        result: Var#20
    Expr_FuncCall
        name: LITERAL('get_main_network_id')
        result: Var#21
    Expr_BinaryOp_Identical
        left: Var#19<$network_id>
        right: Var#21
        result: Var#22
    Terminal_Return
        expr: Var#22

Function get_main_network_id():
Block#1
    Var#1<$wpdb> = Phi()
    Terminal_GlobalVar
        var: LITERAL('wpdb')
    Expr_FuncCall
        name: LITERAL('is_multisite')
        result: Var#2
    Expr_BooleanNot
        expr: Var#2
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Terminal_Return
        expr: LITERAL(1)

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Var#4<$wpdb> = Phi(Var#1<$wpdb>)
    Expr_FuncCall
        name: LITERAL('get_current_site')
        result: Var#5
    Expr_Assign
        var: Var#6<$current_site>
        expr: Var#5
        result: Var#7
    Expr_FuncCall
        name: LITERAL('defined')
        args[0]: LITERAL('PRIMARY_NETWORK_ID')
        result: Var#8
    Stmt_JumpIf
        cond: Var#8
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Expr_ConstFetch
        name: LITERAL('PRIMARY_NETWORK_ID')
        result: Var#9
    Expr_Assign
        var: Var#10<$main_network_id>
        expr: Var#9
        result: Var#11
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Var#12<$current_site> = Phi(Var#6<$current_site>)
    Expr_PropertyFetch
        var: Var#12<$current_site>
        name: LITERAL('id')
        result: Var#13
    Expr_Isset
        vars[0]: Var#13
        result: Var#14
    Stmt_JumpIf
        cond: Var#14
        if: Block#8
        else: Block#9

Block#7
    Parent: Block#5
    Parent: Block#10
    Parent: Block#14
    Var#15<$main_network_id> = Phi(Var#10<$main_network_id>, Var#16<$main_network_id>, Var#17<$main_network_id>)
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('get_main_network_id')
        args[1]: Var#15<$main_network_id>
        result: Var#18
    Expr_Cast_Int
        expr: Var#18
        result: Var#19
    Terminal_Return
        expr: Var#19

Block#8
    Parent: Block#6
    Var#20<$current_site> = Phi(Var#12<$current_site>)
    Expr_PropertyFetch
        var: Var#20<$current_site>
        name: LITERAL('id')
        result: Var#21
    Expr_Cast_Int
        expr: Var#21
        result: Var#22
    Expr_BinaryOp_Identical
        left: LITERAL(1)
        right: Var#22
        result: Var#23
    Expr_Cast_Bool
        expr: Var#23
        result: Var#24
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#6
    Parent: Block#8
    Var#25 = Phi(LITERAL(false), Var#24)
    Var#26<$wpdb> = Phi(Var#4<$wpdb>)
    Stmt_JumpIf
        cond: Var#25
        if: Block#10
        else: Block#11

Block#10
    Parent: Block#9
    Expr_Assign
        var: Var#16<$main_network_id>
        expr: LITERAL(1)
        result: Var#27
    Stmt_Jump
        target: Block#7

Block#11
    Parent: Block#9
    Expr_FuncCall
        name: LITERAL('wp_cache_get')
        args[0]: LITERAL('primary_network_id')
        args[1]: LITERAL('site-options')
        result: Var#28
    Expr_Assign
        var: Var#29<$main_network_id>
        expr: Var#28
        result: Var#30
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#31
    Expr_BinaryOp_Identical
        left: Var#31
        right: Var#29<$main_network_id>
        result: Var#32
    Stmt_JumpIf
        cond: Var#32
        if: Block#12
        else: Block#13

Block#12
    Parent: Block#11
    Var#33<$wpdb> = Phi(Var#26<$wpdb>)
    Expr_PropertyFetch
        var: Var#33<$wpdb>
        name: LITERAL('site')
        result: Var#34
    Expr_ConcatList
        list[0]: LITERAL('SELECT id FROM ')
        list[1]: Var#34
        list[2]: LITERAL(' ORDER BY id LIMIT 1')
        result: Var#35
    Expr_MethodCall
        var: Var#33<$wpdb>
        name: LITERAL('get_var')
        args[0]: Var#35
        result: Var#36
    Expr_Cast_Int
        expr: Var#36
        result: Var#37
    Expr_Assign
        var: Var#38<$main_network_id>
        expr: Var#37
        result: Var#39
    Expr_FuncCall
        name: LITERAL('wp_cache_add')
        args[0]: LITERAL('primary_network_id')
        args[1]: Var#38<$main_network_id>
        args[2]: LITERAL('site-options')
        result: Var#40
    Stmt_Jump
        target: Block#14

Block#13
    Parent: Block#11
    Stmt_Jump
        target: Block#14

Block#14
    Parent: Block#12
    Parent: Block#13
    Var#17<$main_network_id> = Phi(Var#38<$main_network_id>, Var#29<$main_network_id>)
    Stmt_Jump
        target: Block#7

Function global_terms_enabled():
Block#1
    Expr_FuncCall
        name: LITERAL('is_multisite')
        result: Var#1
    Expr_BooleanNot
        expr: Var#1
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#3
    Terminal_Return
        expr: Var#3

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Terminal_StaticVar
        var: Var#4<static<&$global_terms>>
        defaultVar: Var#5
        defaultBlock: Block#5
    Expr_FuncCall
        name: LITERAL('is_null')
        args[0]: static<&$global_terms>
        result: Var#6
    Stmt_JumpIf
        cond: Var#6
        if: Block#6
        else: Block#7

Block#5
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#5

Block#6
    Parent: Block#4
    Expr_Assertion<type(LITERAL('null'))>
        expr: static<&$global_terms>
        result: Var#7<static<&$global_terms>>
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#8
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('global_terms_enabled')
        args[1]: Var#8
        result: Var#9
    Expr_Assign
        var: Var#10<$filter>
        expr: Var#9
        result: Var#11
    Expr_FuncCall
        name: LITERAL('is_null')
        args[0]: Var#10<$filter>
        result: Var#12
    Expr_BooleanNot
        expr: Var#12
        result: Var#13
    Stmt_JumpIf
        cond: Var#13
        if: Block#8
        else: Block#9

Block#7
    Parent: Block#4
    Expr_Assertion<not(type(LITERAL('null')))>
        expr: static<&$global_terms>
        result: Var#14<static<&$global_terms>>
    Stmt_Jump
        target: Block#10

Block#8
    Parent: Block#6
    Var#15<$filter> = Phi(Var#10<$filter>)
    Expr_Assertion<not(type(LITERAL('null')))>
        expr: Var#15<$filter>
        result: Var#16<$filter>
    Expr_Cast_Bool
        expr: Var#16<$filter>
        result: Var#17
    Expr_Assign
        var: Var#18<$global_terms>
        expr: Var#17
        result: Var#19
    Stmt_Jump
        target: Block#11

Block#9
    Parent: Block#6
    Var#20<$filter> = Phi(Var#10<$filter>)
    Expr_Assertion<not(not(type(LITERAL('null'))))>
        expr: Var#20<$filter>
        result: Var#21<$filter>
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#22
    Expr_FuncCall
        name: LITERAL('get_site_option')
        args[0]: LITERAL('global_terms_enabled')
        args[1]: Var#22
        result: Var#23
    Expr_Cast_Bool
        expr: Var#23
        result: Var#24
    Expr_Assign
        var: Var#25<$global_terms>
        expr: Var#24
        result: Var#26
    Stmt_Jump
        target: Block#11

Block#10
    Parent: Block#11
    Parent: Block#7
    Var#27<$global_terms> = Phi(Var#28<$global_terms>, Var#14<static<&$global_terms>>)
    Terminal_Return
        expr: Var#27<$global_terms>

Block#11
    Parent: Block#8
    Parent: Block#9
    Var#28<$global_terms> = Phi(Var#18<$global_terms>, Var#25<$global_terms>)
    Stmt_Jump
        target: Block#10

Function wp_timezone_override_offset():
Block#1
    Expr_FuncCall
        name: LITERAL('get_option')
        args[0]: LITERAL('timezone_string')
        result: Var#1
    Expr_Assign
        var: Var#2<$timezone_string>
        expr: Var#1
        result: Var#3
    Expr_BooleanNot
        expr: Var#3
        result: Var#4
    Stmt_JumpIf
        cond: Var#4
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#5
    Terminal_Return
        expr: Var#5

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Var#6<$timezone_string> = Phi(Var#2<$timezone_string>)
    Expr_FuncCall
        name: LITERAL('timezone_open')
        args[0]: Var#6<$timezone_string>
        result: Var#7
    Expr_Assign
        var: Var#8<$timezone_object>
        expr: Var#7
        result: Var#9
    Expr_FuncCall
        name: LITERAL('date_create')
        result: Var#10
    Expr_Assign
        var: Var#11<$datetime_object>
        expr: Var#10
        result: Var#12
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#13
    Expr_BinaryOp_Identical
        left: Var#13
        right: Var#8<$timezone_object>
        result: Var#14
    Stmt_JumpIf
        cond: Var#14
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Parent: Block#6
    Var#15 = Phi(LITERAL(true), Var#16)
    Var#17<$timezone_object> = Phi(Var#8<$timezone_object>)
    Var#18<$datetime_object> = Phi(Var#11<$datetime_object>, Var#19<$datetime_object>)
    Stmt_JumpIf
        cond: Var#15
        if: Block#7
        else: Block#8

Block#6
    Parent: Block#4
    Var#19<$datetime_object> = Phi(Var#11<$datetime_object>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#20
    Expr_BinaryOp_Identical
        left: Var#20
        right: Var#19<$datetime_object>
        result: Var#21
    Expr_Cast_Bool
        expr: Var#21
        result: Var#16
    Stmt_Jump
        target: Block#5

Block#7
    Parent: Block#5
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#22
    Terminal_Return
        expr: Var#22

Block#8
    Parent: Block#5
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#8
    Var#23<$timezone_object> = Phi(Var#17<$timezone_object>)
    Var#24<$datetime_object> = Phi(Var#18<$datetime_object>)
    Expr_FuncCall
        name: LITERAL('timezone_offset_get')
        args[0]: Var#23<$timezone_object>
        args[1]: Var#24<$datetime_object>
        result: Var#25
    Expr_ConstFetch
        name: LITERAL('HOUR_IN_SECONDS')
        result: Var#26
    Expr_BinaryOp_Div
        left: Var#25
        right: Var#26
        result: Var#27
    Expr_FuncCall
        name: LITERAL('round')
        args[0]: Var#27
        args[1]: LITERAL(2)
        result: Var#28
    Terminal_Return
        expr: Var#28

Function _wp_timezone_choice_usort_callback():
Block#1
    Expr_Param
        name: LITERAL('a')
        result: Var#1<$a>
    Expr_Param
        name: LITERAL('b')
        result: Var#2<$b>
    Expr_ArrayDimFetch
        var: Var#1<$a>
        dim: LITERAL('continent')
        result: Var#3
    Expr_BinaryOp_Identical
        left: LITERAL('Etc')
        right: Var#3
        result: Var#4
    Stmt_JumpIf
        cond: Var#4
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#5<$b> = Phi(Var#2<$b>)
    Expr_ArrayDimFetch
        var: Var#5<$b>
        dim: LITERAL('continent')
        result: Var#6
    Expr_BinaryOp_Identical
        left: LITERAL('Etc')
        right: Var#6
        result: Var#7
    Expr_Cast_Bool
        expr: Var#7
        result: Var#8
    Stmt_Jump
        target: Block#3

Block#3
    Parent: Block#1
    Parent: Block#2
    Var#9 = Phi(LITERAL(false), Var#8)
    Var#10<$a> = Phi(Var#1<$a>)
    Var#11<$b> = Phi(Var#2<$b>, Var#5<$b>)
    Stmt_JumpIf
        cond: Var#9
        if: Block#4
        else: Block#5

Block#4
    Parent: Block#3
    Var#12<$a> = Phi(Var#10<$a>)
    Expr_ArrayDimFetch
        var: Var#12<$a>
        dim: LITERAL('city')
        result: Var#13
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#13
        args[1]: LITERAL(0)
        args[2]: LITERAL(4)
        result: Var#14
    Expr_BinaryOp_Identical
        left: LITERAL('GMT+')
        right: Var#14
        result: Var#15
    Stmt_JumpIf
        cond: Var#15
        if: Block#6
        else: Block#7

Block#5
    Parent: Block#3
    Stmt_Jump
        target: Block#8

Block#6
    Parent: Block#4
    Var#16<$b> = Phi(Var#11<$b>)
    Expr_ArrayDimFetch
        var: Var#16<$b>
        dim: LITERAL('city')
        result: Var#17
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#17
        args[1]: LITERAL(0)
        args[2]: LITERAL(4)
        result: Var#18
    Expr_BinaryOp_Identical
        left: LITERAL('GMT+')
        right: Var#18
        result: Var#19
    Expr_Cast_Bool
        expr: Var#19
        result: Var#20
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#4
    Parent: Block#6
    Var#21 = Phi(LITERAL(false), Var#20)
    Var#22<$a> = Phi(Var#12<$a>)
    Var#23<$b> = Phi(Var#11<$b>, Var#16<$b>)
    Stmt_JumpIf
        cond: Var#21
        if: Block#9
        else: Block#10

Block#8
    Parent: Block#5
    Var#24<$a> = Phi(Var#10<$a>)
    Var#25<$b> = Phi(Var#11<$b>)
    Expr_ArrayDimFetch
        var: Var#24<$a>
        dim: LITERAL('t_continent')
        result: Var#26
    Expr_ArrayDimFetch
        var: Var#25<$b>
        dim: LITERAL('t_continent')
        result: Var#27
    Expr_BinaryOp_Equal
        left: Var#26
        right: Var#27
        result: Var#28
    Stmt_JumpIf
        cond: Var#28
        if: Block#11
        else: Block#12

Block#9
    Parent: Block#7
    Var#29<$a> = Phi(Var#22<$a>)
    Var#30<$b> = Phi(Var#23<$b>)
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#31
    Expr_ArrayDimFetch
        var: Var#29<$a>
        dim: LITERAL('city')
        result: Var#32
    Expr_ArrayDimFetch
        var: Var#30<$b>
        dim: LITERAL('city')
        result: Var#33
    Expr_FuncCall
        name: LITERAL('strnatcasecmp')
        args[0]: Var#32
        args[1]: Var#33
        result: Var#34
    Expr_BinaryOp_Mul
        left: Var#31
        right: Var#34
        result: Var#35
    Terminal_Return
        expr: Var#35

Block#10
    Parent: Block#7
    Stmt_Jump
        target: Block#13

Block#11
    Parent: Block#8
    Var#36<$a> = Phi(Var#24<$a>)
    Var#37<$b> = Phi(Var#25<$b>)
    Expr_ArrayDimFetch
        var: Var#36<$a>
        dim: LITERAL('t_city')
        result: Var#38
    Expr_ArrayDimFetch
        var: Var#37<$b>
        dim: LITERAL('t_city')
        result: Var#39
    Expr_BinaryOp_Equal
        left: Var#38
        right: Var#39
        result: Var#40
    Stmt_JumpIf
        cond: Var#40
        if: Block#14
        else: Block#15

Block#12
    Parent: Block#8
    Var#41<$a> = Phi(Var#24<$a>)
    Expr_ArrayDimFetch
        var: Var#41<$a>
        dim: LITERAL('continent')
        result: Var#42
    Expr_BinaryOp_Identical
        left: LITERAL('Etc')
        right: Var#42
        result: Var#43
    Stmt_JumpIf
        cond: Var#43
        if: Block#16
        else: Block#17

Block#13
    Parent: Block#10
    Var#44<$a> = Phi(Var#22<$a>)
    Var#45<$b> = Phi(Var#23<$b>)
    Expr_ArrayDimFetch
        var: Var#44<$a>
        dim: LITERAL('city')
        result: Var#46
    Expr_BinaryOp_Identical
        left: LITERAL('UTC')
        right: Var#46
        result: Var#47
    Stmt_JumpIf
        cond: Var#47
        if: Block#18
        else: Block#19

Block#14
    Parent: Block#11
    Var#48<$a> = Phi(Var#36<$a>)
    Var#49<$b> = Phi(Var#37<$b>)
    Expr_ArrayDimFetch
        var: Var#48<$a>
        dim: LITERAL('t_subcity')
        result: Var#50
    Expr_ArrayDimFetch
        var: Var#49<$b>
        dim: LITERAL('t_subcity')
        result: Var#51
    Expr_FuncCall
        name: LITERAL('strnatcasecmp')
        args[0]: Var#50
        args[1]: Var#51
        result: Var#52
    Terminal_Return
        expr: Var#52

Block#15
    Parent: Block#11
    Stmt_Jump
        target: Block#20

Block#16
    Parent: Block#12
    Terminal_Return
        expr: LITERAL(1)

Block#17
    Parent: Block#12
    Stmt_Jump
        target: Block#21

Block#18
    Parent: Block#13
    Var#53<$b> = Phi(Var#45<$b>)
    Expr_ArrayDimFetch
        var: Var#53<$b>
        dim: LITERAL('city')
        result: Var#54
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#54
        args[1]: LITERAL(0)
        args[2]: LITERAL(4)
        result: Var#55
    Expr_BinaryOp_Identical
        left: LITERAL('GMT+')
        right: Var#55
        result: Var#56
    Stmt_JumpIf
        cond: Var#56
        if: Block#22
        else: Block#23

Block#19
    Parent: Block#13
    Stmt_Jump
        target: Block#24

Block#20
    Parent: Block#15
    Var#57<$a> = Phi(Var#36<$a>)
    Var#58<$b> = Phi(Var#37<$b>)
    Expr_ArrayDimFetch
        var: Var#57<$a>
        dim: LITERAL('t_city')
        result: Var#59
    Expr_ArrayDimFetch
        var: Var#58<$b>
        dim: LITERAL('t_city')
        result: Var#60
    Expr_FuncCall
        name: LITERAL('strnatcasecmp')
        args[0]: Var#59
        args[1]: Var#60
        result: Var#61
    Terminal_Return
        expr: Var#61

Block#21
    Parent: Block#17
    Var#62<$b> = Phi(Var#25<$b>)
    Var#63<$a> = Phi(Var#41<$a>)
    Expr_ArrayDimFetch
        var: Var#62<$b>
        dim: LITERAL('continent')
        result: Var#64
    Expr_BinaryOp_Identical
        left: LITERAL('Etc')
        right: Var#64
        result: Var#65
    Stmt_JumpIf
        cond: Var#65
        if: Block#25
        else: Block#26

Block#22
    Parent: Block#18
    Terminal_Return
        expr: LITERAL(1)

Block#23
    Parent: Block#18
    Stmt_Jump
        target: Block#27

Block#24
    Parent: Block#19
    Var#66<$b> = Phi(Var#45<$b>)
    Var#67<$a> = Phi(Var#44<$a>)
    Expr_ArrayDimFetch
        var: Var#66<$b>
        dim: LITERAL('city')
        result: Var#68
    Expr_BinaryOp_Identical
        left: LITERAL('UTC')
        right: Var#68
        result: Var#69
    Stmt_JumpIf
        cond: Var#69
        if: Block#28
        else: Block#29

Block#25
    Parent: Block#21
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#70
    Terminal_Return
        expr: Var#70

Block#26
    Parent: Block#21
    Stmt_Jump
        target: Block#30

Block#27
    Parent: Block#23
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#71
    Terminal_Return
        expr: Var#71

Block#28
    Parent: Block#24
    Var#72<$a> = Phi(Var#67<$a>)
    Expr_ArrayDimFetch
        var: Var#72<$a>
        dim: LITERAL('city')
        result: Var#73
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#73
        args[1]: LITERAL(0)
        args[2]: LITERAL(4)
        result: Var#74
    Expr_BinaryOp_Identical
        left: LITERAL('GMT+')
        right: Var#74
        result: Var#75
    Stmt_JumpIf
        cond: Var#75
        if: Block#31
        else: Block#32

Block#29
    Parent: Block#24
    Stmt_Jump
        target: Block#33

Block#30
    Parent: Block#26
    Var#76<$a> = Phi(Var#63<$a>)
    Var#77<$b> = Phi(Var#62<$b>)
    Expr_ArrayDimFetch
        var: Var#76<$a>
        dim: LITERAL('t_continent')
        result: Var#78
    Expr_ArrayDimFetch
        var: Var#77<$b>
        dim: LITERAL('t_continent')
        result: Var#79
    Expr_FuncCall
        name: LITERAL('strnatcasecmp')
        args[0]: Var#78
        args[1]: Var#79
        result: Var#80
    Terminal_Return
        expr: Var#80

Block#31
    Parent: Block#28
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#81
    Terminal_Return
        expr: Var#81

Block#32
    Parent: Block#28
    Stmt_Jump
        target: Block#34

Block#33
    Parent: Block#29
    Var#82<$a> = Phi(Var#67<$a>)
    Var#83<$b> = Phi(Var#66<$b>)
    Expr_ArrayDimFetch
        var: Var#82<$a>
        dim: LITERAL('city')
        result: Var#84
    Expr_ArrayDimFetch
        var: Var#83<$b>
        dim: LITERAL('city')
        result: Var#85
    Expr_FuncCall
        name: LITERAL('strnatcasecmp')
        args[0]: Var#84
        args[1]: Var#85
        result: Var#86
    Terminal_Return
        expr: Var#86

Block#34
    Parent: Block#32
    Terminal_Return
        expr: LITERAL(1)

Function wp_timezone_choice():
Block#1
    Expr_Param
        name: LITERAL('selected_zone')
        result: Var#1<$selected_zone>
    Terminal_StaticVar
        var: Var#2<static<&$mo_loaded>>
        defaultVar: Var#3
        defaultBlock: Block#2
    Expr_Array
        values[0]: LITERAL('Africa')
        values[1]: LITERAL('America')
        values[2]: LITERAL('Antarctica')
        values[3]: LITERAL('Arctic')
        values[4]: LITERAL('Asia')
        values[5]: LITERAL('Atlantic')
        values[6]: LITERAL('Australia')
        values[7]: LITERAL('Europe')
        values[8]: LITERAL('Indian')
        values[9]: LITERAL('Pacific')
        result: Var#4
    Expr_Assign
        var: Var#5<$continents>
        expr: Var#4
        result: Var#6
    Expr_BooleanNot
        expr: Var#2<static<&$mo_loaded>>
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#3

Block#3
    Parent: Block#1
    Expr_FuncCall
        name: LITERAL('get_locale')
        result: Var#8
    Expr_Assign
        var: Var#9<$locale>
        expr: Var#8
        result: Var#10
    Expr_ConstFetch
        name: LITERAL('WP_LANG_DIR')
        result: Var#11
    Expr_BinaryOp_Concat
        left: Var#11
        right: LITERAL('/continents-cities-')
        result: Var#12
    Expr_BinaryOp_Concat
        left: Var#12
        right: Var#9<$locale>
        result: Var#13
    Expr_BinaryOp_Concat
        left: Var#13
        right: LITERAL('.mo')
        result: Var#14
    Expr_Assign
        var: Var#15<$mofile>
        expr: Var#14
        result: Var#16
    Expr_FuncCall
        name: LITERAL('load_textdomain')
        args[0]: LITERAL('continents-cities')
        args[1]: Var#15<$mofile>
        result: Var#17
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#18
    Expr_Assign
        var: Var#19<$mo_loaded>
        expr: Var#18
        result: Var#20
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Var#21<$continents> = Phi(Var#5<$continents>)
    Var#22<$selected_zone> = Phi(Var#1<$selected_zone>)
    Expr_Array
        result: Var#23
    Expr_Assign
        var: Var#24<$zonen>
        expr: Var#23
        result: Var#25
    Expr_FuncCall
        name: LITERAL('timezone_identifiers_list')
        result: Var#26
    Iterator_Reset
        var: Var#26
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#5
    Parent: Block#12
    Var#27<$continents> = Phi(Var#21<$continents>, Var#28<$continents>)
    Var#29<$zonen> = Phi(Var#24<$zonen>, Var#30<$zonen>)
    Var#31<$selected_zone> = Phi(Var#22<$selected_zone>, Var#32<$selected_zone>)
    Iterator_Valid
        var: Var#26
        result: Var#33
    Stmt_JumpIf
        cond: Var#33
        if: Block#7
        else: Block#8

Block#7
    Parent: Block#6
    Var#34<$continents> = Phi(Var#27<$continents>)
    Iterator_Value
        var: Var#26
        result: Var#35
    Expr_Assign
        var: Var#36<$zone>
        expr: Var#35
        result: Var#37
    Expr_FuncCall
        name: LITERAL('explode')
        args[0]: LITERAL('/')
        args[1]: Var#36<$zone>
        result: Var#38
    Expr_Assign
        var: Var#39<$zone>
        expr: Var#38
        result: Var#40
    Expr_ArrayDimFetch
        var: Var#39<$zone>
        dim: LITERAL(0)
        result: Var#41
    Expr_FuncCall
        name: LITERAL('in_array')
        args[0]: Var#41
        args[1]: Var#34<$continents>
        result: Var#42
    Expr_BooleanNot
        expr: Var#42
        result: Var#43
    Stmt_JumpIf
        cond: Var#43
        if: Block#9
        else: Block#10

Block#8
    Parent: Block#6
    Stmt_Jump
        target: Block#11

Block#9
    Parent: Block#7
    Stmt_Jump
        target: Block#12

Block#10
    Parent: Block#7
    Stmt_Jump
        target: Block#13

Block#11
    Parent: Block#8
    Var#44<$zonen> = Phi(Var#29<$zonen>)
    Var#45<$selected_zone> = Phi(Var#31<$selected_zone>)
    Expr_FuncCall
        name: LITERAL('usort')
        args[0]: Var#44<$zonen>
        args[1]: LITERAL('_wp_timezone_choice_usort_callback')
        result: Var#46
    Expr_Array
        result: Var#47
    Expr_Assign
        var: Var#48<$structure>
        expr: Var#47
        result: Var#49
    Expr_Empty
        expr: Var#45<$selected_zone>
        result: Var#50
    Stmt_JumpIf
        cond: Var#50
        if: Block#14
        else: Block#15

Block#12
    Parent: Block#88
    Parent: Block#9
    Var#28<$continents> = Phi(Var#51<$continents>, Var#34<$continents>)
    Var#30<$zonen> = Phi(Var#52<$zonen>, Var#29<$zonen>)
    Var#32<$selected_zone> = Phi(Var#53<$selected_zone>, Var#31<$selected_zone>)
    Stmt_Jump
        target: Block#6

Block#13
    Parent: Block#10
    Var#54<$continents> = Phi(Var#34<$continents>)
    Var#55<$zone> = Phi(Var#39<$zone>)
    Var#56<$zonen> = Phi(Var#29<$zonen>)
    Var#57<$selected_zone> = Phi(Var#31<$selected_zone>)
    Expr_ArrayDimFetch
        var: Var#55<$zone>
        dim: LITERAL(0)
        result: Var#58
    Expr_Isset
        vars[0]: Var#58
        result: Var#59
    Stmt_JumpIf
        cond: Var#59
        if: Block#16
        else: Block#17

Block#14
    Parent: Block#11
    Var#60<$structure> = Phi(Var#48<$structure>)
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('Select a city')
        result: Var#61
    Expr_BinaryOp_Concat
        left: LITERAL('<option selected="selected" value="">')
        right: Var#61
        result: Var#62
    Expr_BinaryOp_Concat
        left: Var#62
        right: LITERAL('</option>')
        result: Var#63
    Expr_ArrayDimFetch
        var: Var#60<$structure>
        result: Var#64
    Expr_Assign
        var: Var#64
        expr: Var#63
        result: Var#65
    Stmt_Jump
        target: Block#18

Block#15
    Parent: Block#11
    Stmt_Jump
        target: Block#18

Block#16
    Parent: Block#13
    Var#66<$zone> = Phi(Var#55<$zone>)
    Expr_ArrayDimFetch
        var: Var#66<$zone>
        dim: LITERAL(0)
        result: Var#67
    Expr_Cast_Bool
        expr: Var#67
        result: Var#68
    Stmt_Jump
        target: Block#17

Block#17
    Parent: Block#13
    Parent: Block#16
    Var#69 = Phi(LITERAL(false), Var#68)
    Var#70<$continents> = Phi(Var#54<$continents>)
    Var#71<$zone> = Phi(Var#55<$zone>, Var#66<$zone>)
    Var#72<$zonen> = Phi(Var#56<$zonen>)
    Var#73<$selected_zone> = Phi(Var#57<$selected_zone>)
    Expr_ArrayDimFetch
        var: Var#71<$zone>
        dim: LITERAL(1)
        result: Var#74
    Expr_Isset
        vars[0]: Var#74
        result: Var#75
    Stmt_JumpIf
        cond: Var#75
        if: Block#19
        else: Block#20

Block#18
    Parent: Block#14
    Parent: Block#15
    Var#76<$zonen> = Phi(Var#44<$zonen>)
    Var#77<$structure> = Phi(Var#60<$structure>, Var#48<$structure>)
    Var#78<$selected_zone> = Phi(Var#45<$selected_zone>)
    Iterator_Reset
        var: Var#76<$zonen>
    Stmt_Jump
        target: Block#21

Block#19
    Parent: Block#17
    Var#79<$zone> = Phi(Var#71<$zone>)
    Expr_ArrayDimFetch
        var: Var#79<$zone>
        dim: LITERAL(1)
        result: Var#80
    Expr_Cast_Bool
        expr: Var#80
        result: Var#81
    Stmt_Jump
        target: Block#20

Block#20
    Parent: Block#17
    Parent: Block#19
    Var#82 = Phi(LITERAL(false), Var#81)
    Var#83<$continents> = Phi(Var#70<$continents>)
    Var#84<$zone> = Phi(Var#71<$zone>, Var#79<$zone>)
    Var#85<$zonen> = Phi(Var#72<$zonen>)
    Var#86<$selected_zone> = Phi(Var#73<$selected_zone>)
    Expr_ArrayDimFetch
        var: Var#84<$zone>
        dim: LITERAL(2)
        result: Var#87
    Expr_Isset
        vars[0]: Var#87
        result: Var#88
    Stmt_JumpIf
        cond: Var#88
        if: Block#22
        else: Block#23

Block#21
    Parent: Block#18
    Parent: Block#74
    Var#89<$zonen> = Phi(Var#76<$zonen>, Var#90<$zonen>)
    Var#91<$structure> = Phi(Var#77<$structure>, Var#92<$structure>)
    Var#93<$selected_zone> = Phi(Var#78<$selected_zone>, Var#94<$selected_zone>)
    Iterator_Valid
        var: Var#76<$zonen>
        result: Var#95
    Stmt_JumpIf
        cond: Var#95
        if: Block#24
        else: Block#25

Block#22
    Parent: Block#20
    Var#96<$zone> = Phi(Var#84<$zone>)
    Expr_ArrayDimFetch
        var: Var#96<$zone>
        dim: LITERAL(2)
        result: Var#97
    Expr_Cast_Bool
        expr: Var#97
        result: Var#98
    Stmt_Jump
        target: Block#23

Block#23
    Parent: Block#20
    Parent: Block#22
    Var#99 = Phi(LITERAL(false), Var#98)
    Var#100<$continents> = Phi(Var#83<$continents>)
    Var#101<$zone> = Phi(Var#84<$zone>, Var#96<$zone>)
    Var#102<$zonen> = Phi(Var#85<$zonen>)
    Var#103<$selected_zone> = Phi(Var#86<$selected_zone>)
    Expr_Array
        keys[0]: LITERAL(0)
        keys[1]: LITERAL(1)
        keys[2]: LITERAL(2)
        values[0]: Var#69
        values[1]: Var#82
        values[2]: Var#99
        result: Var#104
    Expr_Assign
        var: Var#105<$exists>
        expr: Var#104
        result: Var#106
    Expr_ArrayDimFetch
        var: Var#105<$exists>
        dim: LITERAL(0)
        result: Var#107
    Stmt_JumpIf
        cond: Var#107
        if: Block#26
        else: Block#27

Block#24
    Parent: Block#21
    Iterator_Key
        var: Var#76<$zonen>
        result: Var#108
    Expr_Assign
        var: Var#109<$key>
        expr: Var#108
        result: Var#110
    Iterator_Value
        var: Var#76<$zonen>
        result: Var#111
    Expr_Assign
        var: Var#112<$zone>
        expr: Var#111
        result: Var#113
    Expr_ArrayDimFetch
        var: Var#112<$zone>
        dim: LITERAL('continent')
        result: Var#114
    Expr_Array
        values[0]: Var#114
        result: Var#115
    Expr_Assign
        var: Var#116<$value>
        expr: Var#115
        result: Var#117
    Expr_ArrayDimFetch
        var: Var#112<$zone>
        dim: LITERAL('city')
        result: Var#118
    Expr_Empty
        expr: Var#118
        result: Var#119
    Stmt_JumpIf
        cond: Var#119
        if: Block#28
        else: Block#29

Block#25
    Parent: Block#21
    Stmt_Jump
        target: Block#30

Block#26
    Parent: Block#23
    Var#120<$zone> = Phi(Var#101<$zone>)
    Expr_ArrayDimFetch
        var: Var#120<$zone>
        dim: LITERAL(0)
        result: Var#121
    Expr_BinaryOp_NotIdentical
        left: LITERAL('Etc')
        right: Var#121
        result: Var#122
    Expr_Cast_Bool
        expr: Var#122
        result: Var#123
    Stmt_Jump
        target: Block#27

Block#27
    Parent: Block#23
    Parent: Block#26
    Var#124 = Phi(LITERAL(false), Var#123)
    Var#125<$continents> = Phi(Var#100<$continents>)
    Var#126<$exists> = Phi(Var#105<$exists>)
    Var#127<$zone> = Phi(Var#101<$zone>, Var#120<$zone>)
    Var#128<$zonen> = Phi(Var#102<$zonen>)
    Var#129<$selected_zone> = Phi(Var#103<$selected_zone>)
    Expr_ArrayDimFetch
        var: Var#126<$exists>
        dim: LITERAL(3)
        result: Var#130
    Expr_Assign
        var: Var#130
        expr: Var#124
        result: Var#131
    Expr_ArrayDimFetch
        var: Var#126<$exists>
        dim: LITERAL(1)
        result: Var#132
    Stmt_JumpIf
        cond: Var#132
        if: Block#31
        else: Block#32

Block#28
    Parent: Block#24
    Var#133<$zone> = Phi(Var#112<$zone>)
    Expr_ArrayDimFetch
        var: Var#133<$zone>
        dim: LITERAL('t_continent')
        result: Var#134
    Expr_Assign
        var: Var#135<$display>
        expr: Var#134
        result: Var#136
    Stmt_Jump
        target: Block#33

Block#29
    Parent: Block#24
    Var#137<$zonen> = Phi(Var#89<$zonen>)
    Var#138<$key> = Phi(Var#109<$key>)
    Expr_BinaryOp_Minus
        left: Var#138<$key>
        right: LITERAL(1)
        result: Var#139
    Expr_ArrayDimFetch
        var: Var#137<$zonen>
        dim: Var#139
        result: Var#140
    Expr_Isset
        vars[0]: Var#140
        result: Var#141
    Expr_BooleanNot
        expr: Var#141
        result: Var#142
    Stmt_JumpIf
        cond: Var#142
        if: Block#34
        else: Block#35

Block#30
    Parent: Block#25
    Var#143<$structure> = Phi(Var#91<$structure>)
    Var#144<$selected_zone> = Phi(Var#93<$selected_zone>)
    Expr_FuncCall
        name: LITERAL('esc_attr__')
        args[0]: LITERAL('UTC')
        result: Var#145
    Expr_BinaryOp_Concat
        left: LITERAL('<optgroup label="')
        right: Var#145
        result: Var#146
    Expr_BinaryOp_Concat
        left: Var#146
        right: LITERAL('">')
        result: Var#147
    Expr_ArrayDimFetch
        var: Var#143<$structure>
        result: Var#148
    Expr_Assign
        var: Var#148
        expr: Var#147
        result: Var#149
    Expr_Assign
        var: Var#150<$selected>
        expr: LITERAL('')
        result: Var#151
    Expr_BinaryOp_Identical
        left: LITERAL('UTC')
        right: Var#144<$selected_zone>
        result: Var#152
    Stmt_JumpIf
        cond: Var#152
        if: Block#36
        else: Block#37

Block#31
    Parent: Block#27
    Var#153<$exists> = Phi(Var#126<$exists>)
    Expr_ArrayDimFetch
        var: Var#153<$exists>
        dim: LITERAL(3)
        result: Var#154
    Expr_Cast_Bool
        expr: Var#154
        result: Var#155
    Stmt_Jump
        target: Block#32

Block#32
    Parent: Block#27
    Parent: Block#31
    Var#156 = Phi(LITERAL(false), Var#155)
    Var#157<$continents> = Phi(Var#125<$continents>)
    Var#158<$exists> = Phi(Var#126<$exists>, Var#153<$exists>)
    Var#159<$zone> = Phi(Var#127<$zone>)
    Var#160<$zonen> = Phi(Var#128<$zonen>)
    Var#161<$selected_zone> = Phi(Var#129<$selected_zone>)
    Expr_ArrayDimFetch
        var: Var#158<$exists>
        dim: LITERAL(4)
        result: Var#162
    Expr_Assign
        var: Var#162
        expr: Var#156
        result: Var#163
    Expr_ArrayDimFetch
        var: Var#158<$exists>
        dim: LITERAL(2)
        result: Var#164
    Stmt_JumpIf
        cond: Var#164
        if: Block#38
        else: Block#39

Block#33
    Parent: Block#28
    Parent: Block#63
    Var#165<$zonen> = Phi(Var#89<$zonen>, Var#166<$zonen>)
    Var#167<$value> = Phi(Var#116<$value>, Var#168<$value>)
    Var#169<$selected_zone> = Phi(Var#93<$selected_zone>, Var#170<$selected_zone>)
    Var#171<$display> = Phi(Var#135<$display>, Var#172<$display>)
    Var#173<$structure> = Phi(Var#91<$structure>, Var#174<$structure>)
    Var#175<$zone> = Phi(Var#133<$zone>, Var#176<$zone>)
    Var#177<$key> = Phi(Var#109<$key>, Var#178<$key>)
    Expr_FuncCall
        name: LITERAL('join')
        args[0]: LITERAL('/')
        args[1]: Var#167<$value>
        result: Var#179
    Expr_Assign
        var: Var#180<$value>
        expr: Var#179
        result: Var#181
    Expr_Assign
        var: Var#182<$selected>
        expr: LITERAL('')
        result: Var#183
    Expr_BinaryOp_Identical
        left: Var#180<$value>
        right: Var#169<$selected_zone>
        result: Var#184
    Stmt_JumpIf
        cond: Var#184
        if: Block#40
        else: Block#41

Block#34
    Parent: Block#29
    Parent: Block#35
    Var#185 = Phi(LITERAL(true), Var#186)
    Var#187<$zonen> = Phi(Var#137<$zonen>, Var#188<$zonen>)
    Var#189<$zone> = Phi(Var#112<$zone>, Var#190<$zone>)
    Var#191<$structure> = Phi(Var#91<$structure>)
    Var#192<$value> = Phi(Var#116<$value>)
    Var#193<$selected_zone> = Phi(Var#93<$selected_zone>)
    Var#194<$key> = Phi(Var#138<$key>, Var#195<$key>)
    Stmt_JumpIf
        cond: Var#185
        if: Block#42
        else: Block#43

Block#35
    Parent: Block#29
    Var#188<$zonen> = Phi(Var#137<$zonen>)
    Var#195<$key> = Phi(Var#138<$key>)
    Var#190<$zone> = Phi(Var#112<$zone>)
    Expr_BinaryOp_Minus
        left: Var#195<$key>
        right: LITERAL(1)
        result: Var#196
    Expr_ArrayDimFetch
        var: Var#188<$zonen>
        dim: Var#196
        result: Var#197
    Expr_ArrayDimFetch
        var: Var#197
        dim: LITERAL('continent')
        result: Var#198
    Expr_ArrayDimFetch
        var: Var#190<$zone>
        dim: LITERAL('continent')
        result: Var#199
    Expr_BinaryOp_NotIdentical
        left: Var#198
        right: Var#199
        result: Var#200
    Expr_Cast_Bool
        expr: Var#200
        result: Var#186
    Stmt_Jump
        target: Block#34

Block#36
    Parent: Block#30
    Expr_Assign
        var: Var#201<$selected>
        expr: LITERAL('selected="selected" ')
        result: Var#202
    Stmt_Jump
        target: Block#44

Block#37
    Parent: Block#30
    Stmt_Jump
        target: Block#44

Block#38
    Parent: Block#32
    Var#203<$exists> = Phi(Var#158<$exists>)
    Expr_ArrayDimFetch
        var: Var#203<$exists>
        dim: LITERAL(3)
        result: Var#204
    Expr_Cast_Bool
        expr: Var#204
        result: Var#205
    Stmt_Jump
        target: Block#39

Block#39
    Parent: Block#32
    Parent: Block#38
    Var#206 = Phi(LITERAL(false), Var#205)
    Var#207<$continents> = Phi(Var#157<$continents>)
    Var#208<$exists> = Phi(Var#158<$exists>, Var#203<$exists>)
    Var#209<$zone> = Phi(Var#159<$zone>)
    Var#210<$zonen> = Phi(Var#160<$zonen>)
    Var#211<$selected_zone> = Phi(Var#161<$selected_zone>)
    Expr_ArrayDimFetch
        var: Var#208<$exists>
        dim: LITERAL(5)
        result: Var#212
    Expr_Assign
        var: Var#212
        expr: Var#206
        result: Var#213
    Expr_ArrayDimFetch
        var: Var#208<$exists>
        dim: LITERAL(0)
        result: Var#214
    Stmt_JumpIf
        cond: Var#214
        if: Block#45
        else: Block#46

Block#40
    Parent: Block#33
    Expr_Assign
        var: Var#215<$selected>
        expr: LITERAL('selected="selected" ')
        result: Var#216
    Stmt_Jump
        target: Block#47

Block#41
    Parent: Block#33
    Stmt_Jump
        target: Block#47

Block#42
    Parent: Block#34
    Var#217<$zone> = Phi(Var#189<$zone>)
    Var#218<$structure> = Phi(Var#191<$structure>)
    Expr_ArrayDimFetch
        var: Var#217<$zone>
        dim: LITERAL('t_continent')
        result: Var#219
    Expr_Assign
        var: Var#220<$label>
        expr: Var#219
        result: Var#221
    Expr_FuncCall
        name: LITERAL('esc_attr')
        args[0]: Var#220<$label>
        result: Var#222
    Expr_BinaryOp_Concat
        left: LITERAL('<optgroup label="')
        right: Var#222
        result: Var#223
    Expr_BinaryOp_Concat
        left: Var#223
        right: LITERAL('">')
        result: Var#224
    Expr_ArrayDimFetch
        var: Var#218<$structure>
        result: Var#225
    Expr_Assign
        var: Var#225
        expr: Var#224
        result: Var#226
    Stmt_Jump
        target: Block#48

Block#43
    Parent: Block#34
    Stmt_Jump
        target: Block#48

Block#44
    Parent: Block#36
    Parent: Block#37
    Var#227<$selected> = Phi(Var#201<$selected>, Var#150<$selected>)
    Var#228<$structure> = Phi(Var#143<$structure>)
    Var#229<$selected_zone> = Phi(Var#144<$selected_zone>)
    Expr_BinaryOp_Concat
        left: LITERAL('<option ')
        right: Var#227<$selected>
        result: Var#230
    Expr_BinaryOp_Concat
        left: Var#230
        right: LITERAL('value="')
        result: Var#231
    Expr_FuncCall
        name: LITERAL('esc_attr')
        args[0]: LITERAL('UTC')
        result: Var#232
    Expr_BinaryOp_Concat
        left: Var#231
        right: Var#232
        result: Var#233
    Expr_BinaryOp_Concat
        left: Var#233
        right: LITERAL('">')
        result: Var#234
    Expr_FuncCall
        name: LITERAL('__')
        args[0]: LITERAL('UTC')
        result: Var#235
    Expr_BinaryOp_Concat
        left: Var#234
        right: Var#235
        result: Var#236
    Expr_BinaryOp_Concat
        left: Var#236
        right: LITERAL('</option>')
        result: Var#237
    Expr_ArrayDimFetch
        var: Var#228<$structure>
        result: Var#238
    Expr_Assign
        var: Var#238
        expr: Var#237
        result: Var#239
    Expr_ArrayDimFetch
        var: Var#228<$structure>
        result: Var#240
    Expr_Assign
        var: Var#240
        expr: LITERAL('</optgroup>')
        result: Var#241
    Expr_FuncCall
        name: LITERAL('esc_attr__')
        args[0]: LITERAL('Manual Offsets')
        result: Var#242
    Expr_BinaryOp_Concat
        left: LITERAL('<optgroup label="')
        right: Var#242
        result: Var#243
    Expr_BinaryOp_Concat
        left: Var#243
        right: LITERAL('">')
        result: Var#244
    Expr_ArrayDimFetch
        var: Var#228<$structure>
        result: Var#245
    Expr_Assign
        var: Var#245
        expr: Var#244
        result: Var#246
    Expr_UnaryMinus
        expr: LITERAL(12)
        result: Var#247
    Expr_UnaryMinus
        expr: LITERAL(11.5)
        result: Var#248
    Expr_UnaryMinus
        expr: LITERAL(11)
        result: Var#249
    Expr_UnaryMinus
        expr: LITERAL(10.5)
        result: Var#250
    Expr_UnaryMinus
        expr: LITERAL(10)
        result: Var#251
    Expr_UnaryMinus
        expr: LITERAL(9.5)
        result: Var#252
    Expr_UnaryMinus
        expr: LITERAL(9)
        result: Var#253
    Expr_UnaryMinus
        expr: LITERAL(8.5)
        result: Var#254
    Expr_UnaryMinus
        expr: LITERAL(8)
        result: Var#255
    Expr_UnaryMinus
        expr: LITERAL(7.5)
        result: Var#256
    Expr_UnaryMinus
        expr: LITERAL(7)
        result: Var#257
    Expr_UnaryMinus
        expr: LITERAL(6.5)
        result: Var#258
    Expr_UnaryMinus
        expr: LITERAL(6)
        result: Var#259
    Expr_UnaryMinus
        expr: LITERAL(5.5)
        result: Var#260
    Expr_UnaryMinus
        expr: LITERAL(5)
        result: Var#261
    Expr_UnaryMinus
        expr: LITERAL(4.5)
        result: Var#262
    Expr_UnaryMinus
        expr: LITERAL(4)
        result: Var#263
    Expr_UnaryMinus
        expr: LITERAL(3.5)
        result: Var#264
    Expr_UnaryMinus
        expr: LITERAL(3)
        result: Var#265
    Expr_UnaryMinus
        expr: LITERAL(2.5)
        result: Var#266
    Expr_UnaryMinus
        expr: LITERAL(2)
        result: Var#267
    Expr_UnaryMinus
        expr: LITERAL(1.5)
        result: Var#268
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#269
    Expr_UnaryMinus
        expr: LITERAL(0.5)
        result: Var#270
    Expr_Array
        values[0]: Var#247
        values[1]: Var#248
        values[2]: Var#249
        values[3]: Var#250
        values[4]: Var#251
        values[5]: Var#252
        values[6]: Var#253
        values[7]: Var#254
        values[8]: Var#255
        values[9]: Var#256
        values[10]: Var#257
        values[11]: Var#258
        values[12]: Var#259
        values[13]: Var#260
        values[14]: Var#261
        values[15]: Var#262
        values[16]: Var#263
        values[17]: Var#264
        values[18]: Var#265
        values[19]: Var#266
        values[20]: Var#267
        values[21]: Var#268
        values[22]: Var#269
        values[23]: Var#270
        values[24]: LITERAL(0)
        values[25]: LITERAL(0.5)
        values[26]: LITERAL(1)
        values[27]: LITERAL(1.5)
        values[28]: LITERAL(2)
        values[29]: LITERAL(2.5)
        values[30]: LITERAL(3)
        values[31]: LITERAL(3.5)
        values[32]: LITERAL(4)
        values[33]: LITERAL(4.5)
        values[34]: LITERAL(5)
        values[35]: LITERAL(5.5)
        values[36]: LITERAL(5.75)
        values[37]: LITERAL(6)
        values[38]: LITERAL(6.5)
        values[39]: LITERAL(7)
        values[40]: LITERAL(7.5)
        values[41]: LITERAL(8)
        values[42]: LITERAL(8.5)
        values[43]: LITERAL(8.75)
        values[44]: LITERAL(9)
        values[45]: LITERAL(9.5)
        values[46]: LITERAL(10)
        values[47]: LITERAL(10.5)
        values[48]: LITERAL(11)
        values[49]: LITERAL(11.5)
        values[50]: LITERAL(12)
        values[51]: LITERAL(12.75)
        values[52]: LITERAL(13)
        values[53]: LITERAL(13.75)
        values[54]: LITERAL(14)
        result: Var#271
    Expr_Assign
        var: Var#272<$offset_range>
        expr: Var#271
        result: Var#273
    Iterator_Reset
        var: Var#272<$offset_range>
    Stmt_Jump
        target: Block#49

Block#45
    Parent: Block#39
    Var#274<$zone> = Phi(Var#209<$zone>)
    Expr_ArrayDimFetch
        var: Var#274<$zone>
        dim: LITERAL(0)
        result: Var#275
    Expr_Assign
        var: Var#276
        expr: Var#275
        result: Var#277
    Stmt_Jump
        target: Block#50

Block#46
    Parent: Block#39
    Expr_Assign
        var: Var#278
        expr: LITERAL('')
        result: Var#279
    Stmt_Jump
        target: Block#50

Block#47
    Parent: Block#40
    Parent: Block#41
    Var#280<$zonen> = Phi(Var#165<$zonen>)
    Var#281<$selected_zone> = Phi(Var#169<$selected_zone>)
    Var#282<$selected> = Phi(Var#215<$selected>, Var#182<$selected>)
    Var#283<$value> = Phi(Var#180<$value>)
    Var#284<$display> = Phi(Var#171<$display>)
    Var#285<$structure> = Phi(Var#173<$structure>)
    Var#286<$zone> = Phi(Var#175<$zone>)
    Var#287<$key> = Phi(Var#177<$key>)
    Expr_BinaryOp_Concat
        left: LITERAL('<option ')
        right: Var#282<$selected>
        result: Var#288
    Expr_BinaryOp_Concat
        left: Var#288
        right: LITERAL('value="')
        result: Var#289
    Expr_FuncCall
        name: LITERAL('esc_attr')
        args[0]: Var#283<$value>
        result: Var#290
    Expr_BinaryOp_Concat
        left: Var#289
        right: Var#290
        result: Var#291
    Expr_BinaryOp_Concat
        left: Var#291
        right: LITERAL('">')
        result: Var#292
    Expr_FuncCall
        name: LITERAL('esc_html')
        args[0]: Var#284<$display>
        result: Var#293
    Expr_BinaryOp_Concat
        left: Var#292
        right: Var#293
        result: Var#294
    Expr_BinaryOp_Concat
        left: Var#294
        right: LITERAL('</option>')
        result: Var#295
    Expr_ArrayDimFetch
        var: Var#285<$structure>
        result: Var#296
    Expr_Assign
        var: Var#296
        expr: Var#295
        result: Var#297
    Expr_ArrayDimFetch
        var: Var#286<$zone>
        dim: LITERAL('city')
        result: Var#298
    Expr_Empty
        expr: Var#298
        result: Var#299
    Expr_BooleanNot
        expr: Var#299
        result: Var#300
    Stmt_JumpIf
        cond: Var#300
        if: Block#51
        else: Block#52

Block#48
    Parent: Block#42
    Parent: Block#43
    Var#301<$zonen> = Phi(Var#187<$zonen>)
    Var#302<$zone> = Phi(Var#217<$zone>, Var#189<$zone>)
    Var#303<$value> = Phi(Var#192<$value>)
    Var#304<$selected_zone> = Phi(Var#193<$selected_zone>)
    Var#305<$structure> = Phi(Var#218<$structure>, Var#191<$structure>)
    Var#306<$key> = Phi(Var#194<$key>)
    Expr_ArrayDimFetch
        var: Var#302<$zone>
        dim: LITERAL('city')
        result: Var#307
    Expr_ArrayDimFetch
        var: Var#303<$value>
        result: Var#308
    Expr_Assign
        var: Var#308
        expr: Var#307
        result: Var#309
    Expr_ArrayDimFetch
        var: Var#302<$zone>
        dim: LITERAL('t_city')
        result: Var#310
    Expr_Assign
        var: Var#311<$display>
        expr: Var#310
        result: Var#312
    Expr_ArrayDimFetch
        var: Var#302<$zone>
        dim: LITERAL('subcity')
        result: Var#313
    Expr_Empty
        expr: Var#313
        result: Var#314
    Expr_BooleanNot
        expr: Var#314
        result: Var#315
    Stmt_JumpIf
        cond: Var#315
        if: Block#53
        else: Block#54

Block#49
    Parent: Block#44
    Parent: Block#81
    Var#316<$selected_zone> = Phi(Var#229<$selected_zone>, Var#317<$selected_zone>)
    Var#318<$structure> = Phi(Var#228<$structure>, Var#319<$structure>)
    Iterator_Valid
        var: Var#272<$offset_range>
        result: Var#320
    Stmt_JumpIf
        cond: Var#320
        if: Block#55
        else: Block#56

Block#50
    Parent: Block#45
    Parent: Block#46
    Var#321 = Phi(Var#276, Var#278)
    Var#322<$continents> = Phi(Var#207<$continents>)
    Var#323<$exists> = Phi(Var#208<$exists>)
    Var#324<$zone> = Phi(Var#274<$zone>, Var#209<$zone>)
    Var#325<$zonen> = Phi(Var#210<$zonen>)
    Var#326<$selected_zone> = Phi(Var#211<$selected_zone>)
    Expr_ArrayDimFetch
        var: Var#323<$exists>
        dim: LITERAL(1)
        result: Var#327
    Stmt_JumpIf
        cond: Var#327
        if: Block#57
        else: Block#58

Block#51
    Parent: Block#47
    Var#328<$zonen> = Phi(Var#280<$zonen>)
    Var#329<$key> = Phi(Var#287<$key>)
    Expr_BinaryOp_Plus
        left: Var#329<$key>
        right: LITERAL(1)
        result: Var#330
    Expr_ArrayDimFetch
        var: Var#328<$zonen>
        dim: Var#330
        result: Var#331
    Expr_Isset
        vars[0]: Var#331
        result: Var#332
    Expr_BooleanNot
        expr: Var#332
        result: Var#333
    Stmt_JumpIf
        cond: Var#333
        if: Block#59
        else: Block#60

Block#52
    Parent: Block#47
    Parent: Block#59
    Var#334 = Phi(LITERAL(false), Var#335)
    Var#336<$zonen> = Phi(Var#280<$zonen>, Var#337<$zonen>)
    Var#338<$structure> = Phi(Var#285<$structure>, Var#339<$structure>)
    Var#340<$selected_zone> = Phi(Var#281<$selected_zone>, Var#341<$selected_zone>)
    Stmt_JumpIf
        cond: Var#334
        if: Block#61
        else: Block#62

Block#53
    Parent: Block#48
    Var#342<$zone> = Phi(Var#302<$zone>)
    Var#343<$value> = Phi(Var#303<$value>)
    Var#344<$display> = Phi(Var#311<$display>)
    Expr_ArrayDimFetch
        var: Var#342<$zone>
        dim: LITERAL('subcity')
        result: Var#345
    Expr_ArrayDimFetch
        var: Var#343<$value>
        result: Var#346
    Expr_Assign
        var: Var#346
        expr: Var#345
        result: Var#347
    Expr_ArrayDimFetch
        var: Var#342<$zone>
        dim: LITERAL('t_subcity')
        result: Var#348
    Expr_BinaryOp_Concat
        left: LITERAL(' - ')
        right: Var#348
        result: Var#349
    Expr_BinaryOp_Concat
        left: Var#344<$display>
        right: Var#349
        result: Var#350
    Expr_Assign
        var: Var#351<$display>
        expr: Var#350
        result: Var#352
    Stmt_Jump
        target: Block#63

Block#54
    Parent: Block#48
    Stmt_Jump
        target: Block#63

Block#55
    Parent: Block#49
    Iterator_Value
        var: Var#272<$offset_range>
        result: Var#353
    Expr_Assign
        var: Var#354<$offset>
        expr: Var#353
        result: Var#355
    Expr_BinaryOp_SmallerOrEqual
        left: LITERAL(0)
        right: Var#354<$offset>
        result: Var#356
    Stmt_JumpIf
        cond: Var#356
        if: Block#64
        else: Block#65

Block#56
    Parent: Block#49
    Stmt_Jump
        target: Block#66

Block#57
    Parent: Block#50
    Var#357<$zone> = Phi(Var#324<$zone>)
    Expr_ArrayDimFetch
        var: Var#357<$zone>
        dim: LITERAL(1)
        result: Var#358
    Expr_Assign
        var: Var#359
        expr: Var#358
        result: Var#360
    Stmt_Jump
        target: Block#67

Block#58
    Parent: Block#50
    Expr_Assign
        var: Var#361
        expr: LITERAL('')
        result: Var#362
    Stmt_Jump
        target: Block#67

Block#59
    Parent: Block#51
    Parent: Block#69
    Var#363 = Phi(LITERAL(true), Var#364)
    Var#337<$zonen> = Phi(Var#328<$zonen>, Var#365<$zonen>)
    Var#339<$structure> = Phi(Var#285<$structure>, Var#366<$structure>)
    Var#341<$selected_zone> = Phi(Var#281<$selected_zone>, Var#367<$selected_zone>)
    Expr_Cast_Bool
        expr: Var#363
        result: Var#335
    Stmt_Jump
        target: Block#52

Block#60
    Parent: Block#51
    Var#368<$zonen> = Phi(Var#328<$zonen>)
    Var#369<$key> = Phi(Var#329<$key>)
    Expr_BinaryOp_Plus
        left: Var#369<$key>
        right: LITERAL(1)
        result: Var#370
    Expr_ArrayDimFetch
        var: Var#368<$zonen>
        dim: Var#370
        result: Var#371
    Expr_Isset
        vars[0]: Var#371
        result: Var#372
    Stmt_JumpIf
        cond: Var#372
        if: Block#68
        else: Block#69

Block#61
    Parent: Block#52
    Var#373<$structure> = Phi(Var#338<$structure>)
    Expr_ArrayDimFetch
        var: Var#373<$structure>
        result: Var#374
    Expr_Assign
        var: Var#374
        expr: LITERAL('</optgroup>')
        result: Var#375
    Stmt_Jump
        target: Block#70

Block#62
    Parent: Block#52
    Stmt_Jump
        target: Block#70

Block#63
    Parent: Block#53
    Parent: Block#54
    Var#166<$zonen> = Phi(Var#301<$zonen>)
    Var#168<$value> = Phi(Var#343<$value>, Var#303<$value>)
    Var#170<$selected_zone> = Phi(Var#304<$selected_zone>)
    Var#172<$display> = Phi(Var#351<$display>, Var#311<$display>)
    Var#174<$structure> = Phi(Var#305<$structure>)
    Var#176<$zone> = Phi(Var#342<$zone>, Var#302<$zone>)
    Var#178<$key> = Phi(Var#306<$key>)
    Stmt_Jump
        target: Block#33

Block#64
    Parent: Block#55
    Var#376<$offset> = Phi(Var#354<$offset>)
    Expr_BinaryOp_Concat
        left: LITERAL('+')
        right: Var#376<$offset>
        result: Var#377
    Expr_Assign
        var: Var#378<$offset_name>
        expr: Var#377
        result: Var#379
    Stmt_Jump
        target: Block#71

Block#65
    Parent: Block#55
    Var#380<$offset> = Phi(Var#354<$offset>)
    Expr_Cast_String
        expr: Var#380<$offset>
        result: Var#381
    Expr_Assign
        var: Var#382<$offset_name>
        expr: Var#381
        result: Var#383
    Stmt_Jump
        target: Block#71

Block#66
    Parent: Block#56
    Var#384<$structure> = Phi(Var#318<$structure>)
    Expr_ArrayDimFetch
        var: Var#384<$structure>
        result: Var#385
    Expr_Assign
        var: Var#385
        expr: LITERAL('</optgroup>')
        result: Var#386
    Expr_FuncCall
        name: LITERAL('join')
        args[0]: LITERAL('
        ')
        args[1]: Var#384<$structure>
        result: Var#387
    Terminal_Return
        expr: Var#387

Block#67
    Parent: Block#57
    Parent: Block#58
    Var#388 = Phi(Var#359, Var#361)
    Var#389<$continents> = Phi(Var#322<$continents>)
    Var#390<$exists> = Phi(Var#323<$exists>)
    Var#391<$zone> = Phi(Var#357<$zone>, Var#324<$zone>)
    Var#392<$zonen> = Phi(Var#325<$zonen>)
    Var#393<$selected_zone> = Phi(Var#326<$selected_zone>)
    Expr_ArrayDimFetch
        var: Var#390<$exists>
        dim: LITERAL(2)
        result: Var#394
    Stmt_JumpIf
        cond: Var#394
        if: Block#72
        else: Block#73

Block#68
    Parent: Block#60
    Var#395<$zonen> = Phi(Var#368<$zonen>)
    Var#396<$key> = Phi(Var#369<$key>)
    Var#397<$zone> = Phi(Var#286<$zone>)
    Expr_BinaryOp_Plus
        left: Var#396<$key>
        right: LITERAL(1)
        result: Var#398
    Expr_ArrayDimFetch
        var: Var#395<$zonen>
        dim: Var#398
        result: Var#399
    Expr_ArrayDimFetch
        var: Var#399
        dim: LITERAL('continent')
        result: Var#400
    Expr_ArrayDimFetch
        var: Var#397<$zone>
        dim: LITERAL('continent')
        result: Var#401
    Expr_BinaryOp_NotIdentical
        left: Var#400
        right: Var#401
        result: Var#402
    Expr_Cast_Bool
        expr: Var#402
        result: Var#403
    Stmt_Jump
        target: Block#69

Block#69
    Parent: Block#60
    Parent: Block#68
    Var#404 = Phi(LITERAL(false), Var#403)
    Var#365<$zonen> = Phi(Var#368<$zonen>, Var#395<$zonen>)
    Var#366<$structure> = Phi(Var#285<$structure>)
    Var#367<$selected_zone> = Phi(Var#281<$selected_zone>)
    Expr_Cast_Bool
        expr: Var#404
        result: Var#364
    Stmt_Jump
        target: Block#59

Block#70
    Parent: Block#61
    Parent: Block#62
    Var#90<$zonen> = Phi(Var#336<$zonen>)
    Var#92<$structure> = Phi(Var#373<$structure>, Var#338<$structure>)
    Var#94<$selected_zone> = Phi(Var#340<$selected_zone>)
    Stmt_Jump
        target: Block#74

Block#71
    Parent: Block#64
    Parent: Block#65
    Var#405<$offset_name> = Phi(Var#378<$offset_name>, Var#382<$offset_name>)
    Var#406<$selected_zone> = Phi(Var#316<$selected_zone>)
    Var#407<$structure> = Phi(Var#318<$structure>)
    Expr_Assign
        var: Var#408<$offset_value>
        expr: Var#405<$offset_name>
        result: Var#409
    Expr_Array
        values[0]: LITERAL('.25')
        values[1]: LITERAL('.5')
        values[2]: LITERAL('.75')
        result: Var#410
    Expr_Array
        values[0]: LITERAL(':15')
        values[1]: LITERAL(':30')
        values[2]: LITERAL(':45')
        result: Var#411
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: Var#410
        args[1]: Var#411
        args[2]: Var#405<$offset_name>
        result: Var#412
    Expr_Assign
        var: Var#413<$offset_name>
        expr: Var#412
        result: Var#414
    Expr_BinaryOp_Concat
        left: LITERAL('UTC')
        right: Var#413<$offset_name>
        result: Var#415
    Expr_Assign
        var: Var#416<$offset_name>
        expr: Var#415
        result: Var#417
    Expr_BinaryOp_Concat
        left: LITERAL('UTC')
        right: Var#408<$offset_value>
        result: Var#418
    Expr_Assign
        var: Var#419<$offset_value>
        expr: Var#418
        result: Var#420
    Expr_Assign
        var: Var#421<$selected>
        expr: LITERAL('')
        result: Var#422
    Expr_BinaryOp_Identical
        left: Var#419<$offset_value>
        right: Var#406<$selected_zone>
        result: Var#423
    Stmt_JumpIf
        cond: Var#423
        if: Block#75
        else: Block#76

Block#72
    Parent: Block#67
    Var#424<$zone> = Phi(Var#391<$zone>)
    Expr_ArrayDimFetch
        var: Var#424<$zone>
        dim: LITERAL(2)
        result: Var#425
    Expr_Assign
        var: Var#426
        expr: Var#425
        result: Var#427
    Stmt_Jump
        target: Block#77

Block#73
    Parent: Block#67
    Expr_Assign
        var: Var#428
        expr: LITERAL('')
        result: Var#429
    Stmt_Jump
        target: Block#77

Block#74
    Parent: Block#70
    Stmt_Jump
        target: Block#21

Block#75
    Parent: Block#71
    Expr_Assign
        var: Var#430<$selected>
        expr: LITERAL('selected="selected" ')
        result: Var#431
    Stmt_Jump
        target: Block#78

Block#76
    Parent: Block#71
    Stmt_Jump
        target: Block#78

Block#77
    Parent: Block#72
    Parent: Block#73
    Var#432 = Phi(Var#426, Var#428)
    Var#433<$continents> = Phi(Var#389<$continents>)
    Var#434<$exists> = Phi(Var#390<$exists>)
    Var#435<$zone> = Phi(Var#424<$zone>, Var#391<$zone>)
    Var#436<$zonen> = Phi(Var#392<$zonen>)
    Var#437<$selected_zone> = Phi(Var#393<$selected_zone>)
    Expr_ArrayDimFetch
        var: Var#434<$exists>
        dim: LITERAL(3)
        result: Var#438
    Stmt_JumpIf
        cond: Var#438
        if: Block#79
        else: Block#80

Block#78
    Parent: Block#75
    Parent: Block#76
    Var#317<$selected_zone> = Phi(Var#406<$selected_zone>)
    Var#439<$selected> = Phi(Var#430<$selected>, Var#421<$selected>)
    Var#440<$offset_value> = Phi(Var#419<$offset_value>)
    Var#441<$offset_name> = Phi(Var#416<$offset_name>)
    Var#319<$structure> = Phi(Var#407<$structure>)
    Expr_BinaryOp_Concat
        left: LITERAL('<option ')
        right: Var#439<$selected>
        result: Var#442
    Expr_BinaryOp_Concat
        left: Var#442
        right: LITERAL('value="')
        result: Var#443
    Expr_FuncCall
        name: LITERAL('esc_attr')
        args[0]: Var#440<$offset_value>
        result: Var#444
    Expr_BinaryOp_Concat
        left: Var#443
        right: Var#444
        result: Var#445
    Expr_BinaryOp_Concat
        left: Var#445
        right: LITERAL('">')
        result: Var#446
    Expr_FuncCall
        name: LITERAL('esc_html')
        args[0]: Var#441<$offset_name>
        result: Var#447
    Expr_BinaryOp_Concat
        left: Var#446
        right: Var#447
        result: Var#448
    Expr_BinaryOp_Concat
        left: Var#448
        right: LITERAL('</option>')
        result: Var#449
    Expr_ArrayDimFetch
        var: Var#319<$structure>
        result: Var#450
    Expr_Assign
        var: Var#450
        expr: Var#449
        result: Var#451
    Stmt_Jump
        target: Block#81

Block#79
    Parent: Block#77
    Var#452<$zone> = Phi(Var#435<$zone>)
    Expr_ArrayDimFetch
        var: Var#452<$zone>
        dim: LITERAL(0)
        result: Var#453
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: LITERAL('_')
        args[1]: LITERAL(' ')
        args[2]: Var#453
        result: Var#454
    Expr_FuncCall
        name: LITERAL('translate')
        args[0]: Var#454
        args[1]: LITERAL('continents-cities')
        result: Var#455
    Expr_Assign
        var: Var#456
        expr: Var#455
        result: Var#457
    Stmt_Jump
        target: Block#82

Block#80
    Parent: Block#77
    Expr_Assign
        var: Var#458
        expr: LITERAL('')
        result: Var#459
    Stmt_Jump
        target: Block#82

Block#81
    Parent: Block#78
    Stmt_Jump
        target: Block#49

Block#82
    Parent: Block#79
    Parent: Block#80
    Var#460 = Phi(Var#456, Var#458)
    Var#461<$continents> = Phi(Var#433<$continents>)
    Var#462<$exists> = Phi(Var#434<$exists>)
    Var#463<$zone> = Phi(Var#452<$zone>, Var#435<$zone>)
    Var#464<$zonen> = Phi(Var#436<$zonen>)
    Var#465<$selected_zone> = Phi(Var#437<$selected_zone>)
    Expr_ArrayDimFetch
        var: Var#462<$exists>
        dim: LITERAL(4)
        result: Var#466
    Stmt_JumpIf
        cond: Var#466
        if: Block#83
        else: Block#84

Block#83
    Parent: Block#82
    Var#467<$zone> = Phi(Var#463<$zone>)
    Expr_ArrayDimFetch
        var: Var#467<$zone>
        dim: LITERAL(1)
        result: Var#468
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: LITERAL('_')
        args[1]: LITERAL(' ')
        args[2]: Var#468
        result: Var#469
    Expr_FuncCall
        name: LITERAL('translate')
        args[0]: Var#469
        args[1]: LITERAL('continents-cities')
        result: Var#470
    Expr_Assign
        var: Var#471
        expr: Var#470
        result: Var#472
    Stmt_Jump
        target: Block#85

Block#84
    Parent: Block#82
    Expr_Assign
        var: Var#473
        expr: LITERAL('')
        result: Var#474
    Stmt_Jump
        target: Block#85

Block#85
    Parent: Block#83
    Parent: Block#84
    Var#475 = Phi(Var#471, Var#473)
    Var#476<$continents> = Phi(Var#461<$continents>)
    Var#477<$exists> = Phi(Var#462<$exists>)
    Var#478<$zone> = Phi(Var#467<$zone>, Var#463<$zone>)
    Var#479<$zonen> = Phi(Var#464<$zonen>)
    Var#480<$selected_zone> = Phi(Var#465<$selected_zone>)
    Expr_ArrayDimFetch
        var: Var#477<$exists>
        dim: LITERAL(5)
        result: Var#481
    Stmt_JumpIf
        cond: Var#481
        if: Block#86
        else: Block#87

Block#86
    Parent: Block#85
    Var#482<$zone> = Phi(Var#478<$zone>)
    Expr_ArrayDimFetch
        var: Var#482<$zone>
        dim: LITERAL(2)
        result: Var#483
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: LITERAL('_')
        args[1]: LITERAL(' ')
        args[2]: Var#483
        result: Var#484
    Expr_FuncCall
        name: LITERAL('translate')
        args[0]: Var#484
        args[1]: LITERAL('continents-cities')
        result: Var#485
    Expr_Assign
        var: Var#486
        expr: Var#485
        result: Var#487
    Stmt_Jump
        target: Block#88

Block#87
    Parent: Block#85
    Expr_Assign
        var: Var#488
        expr: LITERAL('')
        result: Var#489
    Stmt_Jump
        target: Block#88

Block#88
    Parent: Block#86
    Parent: Block#87
    Var#490 = Phi(Var#486, Var#488)
    Var#51<$continents> = Phi(Var#476<$continents>)
    Var#52<$zonen> = Phi(Var#479<$zonen>)
    Var#53<$selected_zone> = Phi(Var#480<$selected_zone>)
    Expr_Array
        keys[0]: LITERAL('continent')
        keys[1]: LITERAL('city')
        keys[2]: LITERAL('subcity')
        keys[3]: LITERAL('t_continent')
        keys[4]: LITERAL('t_city')
        keys[5]: LITERAL('t_subcity')
        values[0]: Var#321
        values[1]: Var#388
        values[2]: Var#432
        values[3]: Var#460
        values[4]: Var#475
        values[5]: Var#490
        result: Var#491
    Expr_ArrayDimFetch
        var: Var#52<$zonen>
        result: Var#492
    Expr_Assign
        var: Var#492
        expr: Var#491
        result: Var#493
    Stmt_Jump
        target: Block#12

Function _cleanup_header_comment():
Block#1
    Expr_Param
        name: LITERAL('str')
        result: Var#1<$str>
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/\\s*(?:\\*\\/|\\?>).*/')
        args[1]: LITERAL('')
        args[2]: Var#1<$str>
        result: Var#2
    Expr_FuncCall
        name: LITERAL('trim')
        args[0]: Var#2
        result: Var#3
    Terminal_Return
        expr: Var#3

Function wp_scheduled_delete():
Block#1
    Var#1<$wpdb> = Phi()
    Terminal_GlobalVar
        var: LITERAL('wpdb')
    Expr_FuncCall
        name: LITERAL('time')
        result: Var#2
    Expr_ConstFetch
        name: LITERAL('DAY_IN_SECONDS')
        result: Var#3
    Expr_ConstFetch
        name: LITERAL('EMPTY_TRASH_DAYS')
        result: Var#4
    Expr_BinaryOp_Mul
        left: Var#3
        right: Var#4
        result: Var#5
    Expr_BinaryOp_Minus
        left: Var#2
        right: Var#5
        result: Var#6
    Expr_Assign
        var: Var#7<$delete_timestamp>
        expr: Var#6
        result: Var#8
    Expr_PropertyFetch
        var: Var#1<$wpdb>
        name: LITERAL('postmeta')
        result: Var#9
    Expr_ConcatList
        list[0]: LITERAL('SELECT post_id FROM ')
        list[1]: Var#9
        list[2]: LITERAL(' WHERE meta_key = \'_wp_trash_meta_time\' AND meta_value < \'%d\'')
        result: Var#10
    Expr_MethodCall
        var: Var#1<$wpdb>
        name: LITERAL('prepare')
        args[0]: Var#10
        args[1]: Var#7<$delete_timestamp>
        result: Var#11
    Expr_ConstFetch
        name: LITERAL('ARRAY_A')
        result: Var#12
    Expr_MethodCall
        var: Var#1<$wpdb>
        name: LITERAL('get_results')
        args[0]: Var#11
        args[1]: Var#12
        result: Var#13
    Expr_Assign
        var: Var#14<$posts_to_delete>
        expr: Var#13
        result: Var#15
    Expr_Cast_Array
        expr: Var#14<$posts_to_delete>
        result: Var#16
    Iterator_Reset
        var: Var#16
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Parent: Block#8
    Var#17<$wpdb> = Phi(Var#1<$wpdb>, Var#18<$wpdb>)
    Var#19<$delete_timestamp> = Phi(Var#7<$delete_timestamp>, Var#20<$delete_timestamp>)
    Iterator_Valid
        var: Var#16
        result: Var#21
    Stmt_JumpIf
        cond: Var#21
        if: Block#3
        else: Block#4

Block#3
    Parent: Block#2
    Iterator_Value
        var: Var#16
        result: Var#22
    Expr_Assign
        var: Var#23<$post>
        expr: Var#22
        result: Var#24
    Expr_ArrayDimFetch
        var: Var#23<$post>
        dim: LITERAL('post_id')
        result: Var#25
    Expr_Cast_Int
        expr: Var#25
        result: Var#26
    Expr_Assign
        var: Var#27<$post_id>
        expr: Var#26
        result: Var#28
    Expr_BooleanNot
        expr: Var#27<$post_id>
        result: Var#29
    Stmt_JumpIf
        cond: Var#29
        if: Block#5
        else: Block#6

Block#4
    Parent: Block#2
    Stmt_Jump
        target: Block#7

Block#5
    Parent: Block#3
    Stmt_Jump
        target: Block#8

Block#6
    Parent: Block#3
    Stmt_Jump
        target: Block#9

Block#7
    Parent: Block#4
    Var#30<$wpdb> = Phi(Var#17<$wpdb>)
    Var#31<$delete_timestamp> = Phi(Var#19<$delete_timestamp>)
    Expr_PropertyFetch
        var: Var#30<$wpdb>
        name: LITERAL('commentmeta')
        result: Var#32
    Expr_ConcatList
        list[0]: LITERAL('SELECT comment_id FROM ')
        list[1]: Var#32
        list[2]: LITERAL(' WHERE meta_key = \'_wp_trash_meta_time\' AND meta_value < \'%d\'')
        result: Var#33
    Expr_MethodCall
        var: Var#30<$wpdb>
        name: LITERAL('prepare')
        args[0]: Var#33
        args[1]: Var#31<$delete_timestamp>
        result: Var#34
    Expr_ConstFetch
        name: LITERAL('ARRAY_A')
        result: Var#35
    Expr_MethodCall
        var: Var#30<$wpdb>
        name: LITERAL('get_results')
        args[0]: Var#34
        args[1]: Var#35
        result: Var#36
    Expr_Assign
        var: Var#37<$comments_to_delete>
        expr: Var#36
        result: Var#38
    Expr_Cast_Array
        expr: Var#37<$comments_to_delete>
        result: Var#39
    Iterator_Reset
        var: Var#39
    Stmt_Jump
        target: Block#10

Block#8
    Parent: Block#20
    Parent: Block#5
    Var#18<$wpdb> = Phi(Var#40<$wpdb>, Var#17<$wpdb>)
    Var#20<$delete_timestamp> = Phi(Var#41<$delete_timestamp>, Var#19<$delete_timestamp>)
    Stmt_Jump
        target: Block#2

Block#9
    Parent: Block#6
    Var#42<$post_id> = Phi(Var#27<$post_id>)
    Var#43<$wpdb> = Phi(Var#17<$wpdb>)
    Var#44<$delete_timestamp> = Phi(Var#19<$delete_timestamp>)
    Expr_FuncCall
        name: LITERAL('get_post')
        args[0]: Var#42<$post_id>
        result: Var#45
    Expr_Assign
        var: Var#46<$del_post>
        expr: Var#45
        result: Var#47
    Expr_BooleanNot
        expr: Var#46<$del_post>
        result: Var#48
    Stmt_JumpIf
        cond: Var#48
        if: Block#11
        else: Block#12

Block#10
    Parent: Block#7
    Parent: Block#21
    Iterator_Valid
        var: Var#39
        result: Var#49
    Stmt_JumpIf
        cond: Var#49
        if: Block#13
        else: Block#14

Block#11
    Parent: Block#9
    Parent: Block#12
    Var#50 = Phi(LITERAL(true), Var#51)
    Var#52<$post_id> = Phi(Var#42<$post_id>)
    Var#53<$wpdb> = Phi(Var#43<$wpdb>)
    Var#54<$delete_timestamp> = Phi(Var#44<$delete_timestamp>)
    Stmt_JumpIf
        cond: Var#50
        if: Block#15
        else: Block#16

Block#12
    Parent: Block#9
    Var#55<$del_post> = Phi(Var#46<$del_post>)
    Expr_PropertyFetch
        var: Var#55<$del_post>
        name: LITERAL('post_status')
        result: Var#56
    Expr_BinaryOp_NotEqual
        left: LITERAL('trash')
        right: Var#56
        result: Var#57
    Expr_Cast_Bool
        expr: Var#57
        result: Var#51
    Stmt_Jump
        target: Block#11

Block#13
    Parent: Block#10
    Iterator_Value
        var: Var#39
        result: Var#58
    Expr_Assign
        var: Var#59<$comment>
        expr: Var#58
        result: Var#60
    Expr_ArrayDimFetch
        var: Var#59<$comment>
        dim: LITERAL('comment_id')
        result: Var#61
    Expr_Cast_Int
        expr: Var#61
        result: Var#62
    Expr_Assign
        var: Var#63<$comment_id>
        expr: Var#62
        result: Var#64
    Expr_BooleanNot
        expr: Var#63<$comment_id>
        result: Var#65
    Stmt_JumpIf
        cond: Var#65
        if: Block#17
        else: Block#18

Block#14
    Parent: Block#10
    Stmt_Jump
        target: Block#19

Block#15
    Parent: Block#11
    Var#66<$post_id> = Phi(Var#52<$post_id>)
    Expr_FuncCall
        name: LITERAL('delete_post_meta')
        args[0]: Var#66<$post_id>
        args[1]: LITERAL('_wp_trash_meta_status')
        result: Var#67
    Expr_FuncCall
        name: LITERAL('delete_post_meta')
        args[0]: Var#66<$post_id>
        args[1]: LITERAL('_wp_trash_meta_time')
        result: Var#68
    Stmt_Jump
        target: Block#20

Block#16
    Parent: Block#11
    Var#69<$post_id> = Phi(Var#52<$post_id>)
    Expr_FuncCall
        name: LITERAL('wp_delete_post')
        args[0]: Var#69<$post_id>
        result: Var#70
    Stmt_Jump
        target: Block#20

Block#17
    Parent: Block#13
    Stmt_Jump
        target: Block#21

Block#18
    Parent: Block#13
    Stmt_Jump
        target: Block#22

Block#19
    Parent: Block#14
    Terminal_Return

Block#20
    Parent: Block#15
    Parent: Block#16
    Var#40<$wpdb> = Phi(Var#53<$wpdb>)
    Var#41<$delete_timestamp> = Phi(Var#54<$delete_timestamp>)
    Stmt_Jump
        target: Block#8

Block#21
    Parent: Block#27
    Parent: Block#17
    Stmt_Jump
        target: Block#10

Block#22
    Parent: Block#18
    Var#71<$comment_id> = Phi(Var#63<$comment_id>)
    Expr_FuncCall
        name: LITERAL('get_comment')
        args[0]: Var#71<$comment_id>
        result: Var#72
    Expr_Assign
        var: Var#73<$del_comment>
        expr: Var#72
        result: Var#74
    Expr_BooleanNot
        expr: Var#73<$del_comment>
        result: Var#75
    Stmt_JumpIf
        cond: Var#75
        if: Block#23
        else: Block#24

Block#23
    Parent: Block#22
    Parent: Block#24
    Var#76 = Phi(LITERAL(true), Var#77)
    Var#78<$comment_id> = Phi(Var#71<$comment_id>)
    Var#79<$del_comment> = Phi(Var#73<$del_comment>, Var#80<$del_comment>)
    Stmt_JumpIf
        cond: Var#76
        if: Block#25
        else: Block#26

Block#24
    Parent: Block#22
    Var#80<$del_comment> = Phi(Var#73<$del_comment>)
    Expr_PropertyFetch
        var: Var#80<$del_comment>
        name: LITERAL('comment_approved')
        result: Var#81
    Expr_BinaryOp_NotEqual
        left: LITERAL('trash')
        right: Var#81
        result: Var#82
    Expr_Cast_Bool
        expr: Var#82
        result: Var#77
    Stmt_Jump
        target: Block#23

Block#25
    Parent: Block#23
    Var#83<$comment_id> = Phi(Var#78<$comment_id>)
    Expr_FuncCall
        name: LITERAL('delete_comment_meta')
        args[0]: Var#83<$comment_id>
        args[1]: LITERAL('_wp_trash_meta_time')
        result: Var#84
    Expr_FuncCall
        name: LITERAL('delete_comment_meta')
        args[0]: Var#83<$comment_id>
        args[1]: LITERAL('_wp_trash_meta_status')
        result: Var#85
    Stmt_Jump
        target: Block#27

Block#26
    Parent: Block#23
    Var#86<$del_comment> = Phi(Var#79<$del_comment>)
    Expr_FuncCall
        name: LITERAL('wp_delete_comment')
        args[0]: Var#86<$del_comment>
        result: Var#87
    Stmt_Jump
        target: Block#27

Block#27
    Parent: Block#25
    Parent: Block#26
    Stmt_Jump
        target: Block#21

Function get_file_data():
Block#1
    Expr_Param
        name: LITERAL('file')
        result: Var#1<$file>
    Expr_Param
        name: LITERAL('default_headers')
        result: Var#2<$default_headers>
    Expr_Param
        name: LITERAL('context')
        defaultVar: LITERAL('')
        result: Var#3<$context>
        defaultBlock: Block#2
    Var#4<$extra_headers> = Phi()
    Var#5<$match> = Phi()
    Expr_FuncCall
        name: LITERAL('fopen')
        args[0]: Var#1<$file>
        args[1]: LITERAL('r')
        result: Var#6
    Expr_Assign
        var: Var#7<$fp>
        expr: Var#6
        result: Var#8
    Expr_FuncCall
        name: LITERAL('fread')
        args[0]: Var#7<$fp>
        args[1]: LITERAL(8192)
        result: Var#9
    Expr_Assign
        var: Var#10<$file_data>
        expr: Var#9
        result: Var#11
    Expr_FuncCall
        name: LITERAL('fclose')
        args[0]: Var#7<$fp>
        result: Var#12
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: LITERAL('')
        args[1]: LITERAL('
        ')
        args[2]: Var#10<$file_data>
        result: Var#13
    Expr_Assign
        var: Var#14<$file_data>
        expr: Var#13
        result: Var#15
    Stmt_JumpIf
        cond: Var#3<$context>
        if: Block#3
        else: Block#4

Block#2

Block#3
    Parent: Block#1
    Var#16<$context> = Phi(Var#3<$context>)
    Expr_ConcatList
        list[0]: LITERAL('extra_')
        list[1]: Var#16<$context>
        list[2]: LITERAL('_headers')
        result: Var#17
    Expr_Array
        result: Var#18
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: Var#17
        args[1]: Var#18
        result: Var#19
    Expr_Assign
        var: Var#20<$extra_headers>
        expr: Var#19
        result: Var#21
    Expr_Cast_Bool
        expr: Var#21
        result: Var#22
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#1
    Parent: Block#3
    Var#23 = Phi(LITERAL(false), Var#22)
    Var#24<$extra_headers> = Phi(Var#4<$extra_headers>, Var#20<$extra_headers>)
    Var#25<$default_headers> = Phi(Var#2<$default_headers>)
    Var#26<$file_data> = Phi(Var#14<$file_data>)
    Var#27<$match> = Phi(Var#5<$match>)
    Stmt_JumpIf
        cond: Var#23
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Var#28<$extra_headers> = Phi(Var#24<$extra_headers>)
    Var#29<$default_headers> = Phi(Var#25<$default_headers>)
    Expr_FuncCall
        name: LITERAL('array_combine')
        args[0]: Var#28<$extra_headers>
        args[1]: Var#28<$extra_headers>
        result: Var#30
    Expr_Assign
        var: Var#31<$extra_headers>
        expr: Var#30
        result: Var#32
    Expr_Cast_Array
        expr: Var#29<$default_headers>
        result: Var#33
    Expr_FuncCall
        name: LITERAL('array_merge')
        args[0]: Var#31<$extra_headers>
        args[1]: Var#33
        result: Var#34
    Expr_Assign
        var: Var#35<$all_headers>
        expr: Var#34
        result: Var#36
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Var#37<$default_headers> = Phi(Var#25<$default_headers>)
    Expr_Assign
        var: Var#38<$all_headers>
        expr: Var#37<$default_headers>
        result: Var#39
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#5
    Parent: Block#6
    Var#40<$all_headers> = Phi(Var#35<$all_headers>, Var#38<$all_headers>)
    Var#41<$file_data> = Phi(Var#26<$file_data>)
    Var#42<$match> = Phi(Var#27<$match>)
    Iterator_Reset
        var: Var#40<$all_headers>
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#7
    Parent: Block#17
    Var#43<$file_data> = Phi(Var#41<$file_data>, Var#44<$file_data>)
    Var#45<$match> = Phi(Var#42<$match>, Var#46<$match>)
    Var#47<$all_headers> = Phi(Var#40<$all_headers>, Var#48<$all_headers>)
    Iterator_Valid
        var: Var#40<$all_headers>
        result: Var#49
    Stmt_JumpIf
        cond: Var#49
        if: Block#9
        else: Block#10

Block#9
    Parent: Block#8
    Var#50<$file_data> = Phi(Var#43<$file_data>)
    Var#51<$match> = Phi(Var#45<$match>)
    Iterator_Key
        var: Var#40<$all_headers>
        result: Var#52
    Expr_Assign
        var: Var#53<$field>
        expr: Var#52
        result: Var#54
    Iterator_Value
        var: Var#40<$all_headers>
        result: Var#55
    Expr_Assign
        var: Var#56<$regex>
        expr: Var#55
        result: Var#57
    Expr_FuncCall
        name: LITERAL('preg_quote')
        args[0]: Var#56<$regex>
        args[1]: LITERAL('/')
        result: Var#58
    Expr_BinaryOp_Concat
        left: LITERAL('/^[ \\t\\/*#@]*')
        right: Var#58
        result: Var#59
    Expr_BinaryOp_Concat
        left: Var#59
        right: LITERAL(':(.*)$/mi')
        result: Var#60
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: Var#60
        args[1]: Var#50<$file_data>
        args[2]: Var#51<$match>
        result: Var#61
    Stmt_JumpIf
        cond: Var#61
        if: Block#11
        else: Block#12

Block#10
    Parent: Block#8
    Stmt_Jump
        target: Block#13

Block#11
    Parent: Block#9
    Var#62<$match> = Phi(Var#51<$match>)
    Expr_ArrayDimFetch
        var: Var#62<$match>
        dim: LITERAL(1)
        result: Var#63
    Expr_Cast_Bool
        expr: Var#63
        result: Var#64
    Stmt_Jump
        target: Block#12

Block#12
    Parent: Block#9
    Parent: Block#11
    Var#65 = Phi(LITERAL(false), Var#64)
    Var#66<$file_data> = Phi(Var#50<$file_data>)
    Var#67<$match> = Phi(Var#51<$match>, Var#62<$match>)
    Var#68<$all_headers> = Phi(Var#47<$all_headers>)
    Var#69<$field> = Phi(Var#53<$field>)
    Stmt_JumpIf
        cond: Var#65
        if: Block#14
        else: Block#15

Block#13
    Parent: Block#10
    Var#70<$all_headers> = Phi(Var#47<$all_headers>)
    Terminal_Return
        expr: Var#70<$all_headers>

Block#14
    Parent: Block#12
    Var#71<$match> = Phi(Var#67<$match>)
    Var#72<$all_headers> = Phi(Var#68<$all_headers>)
    Var#73<$field> = Phi(Var#69<$field>)
    Expr_ArrayDimFetch
        var: Var#71<$match>
        dim: LITERAL(1)
        result: Var#74
    Expr_FuncCall
        name: LITERAL('_cleanup_header_comment')
        args[0]: Var#74
        result: Var#75
    Expr_ArrayDimFetch
        var: Var#72<$all_headers>
        dim: Var#73<$field>
        result: Var#76
    Expr_Assign
        var: Var#76
        expr: Var#75
        result: Var#77
    Stmt_Jump
        target: Block#16

Block#15
    Parent: Block#12
    Var#78<$all_headers> = Phi(Var#68<$all_headers>)
    Var#79<$field> = Phi(Var#69<$field>)
    Expr_ArrayDimFetch
        var: Var#78<$all_headers>
        dim: Var#79<$field>
        result: Var#80
    Expr_Assign
        var: Var#80
        expr: LITERAL('')
        result: Var#81
    Stmt_Jump
        target: Block#16

Block#16
    Parent: Block#14
    Parent: Block#15
    Var#44<$file_data> = Phi(Var#66<$file_data>)
    Var#46<$match> = Phi(Var#71<$match>, Var#67<$match>)
    Var#48<$all_headers> = Phi(Var#72<$all_headers>, Var#78<$all_headers>)
    Stmt_Jump
        target: Block#17

Block#17
    Parent: Block#16
    Stmt_Jump
        target: Block#8

Function __return_true():
Block#1
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#1
    Terminal_Return
        expr: Var#1

Function __return_false():
Block#1
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#1
    Terminal_Return
        expr: Var#1

Function __return_zero():
Block#1
    Terminal_Return
        expr: LITERAL(0)

Function __return_empty_array():
Block#1
    Expr_Array
        result: Var#1
    Terminal_Return
        expr: Var#1

Function __return_null():
Block#1
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#1
    Terminal_Return
        expr: Var#1

Function __return_empty_string():
Block#1
    Terminal_Return
        expr: LITERAL('')

Function send_nosniff_header():
Block#1
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Expr_FuncCall
        name: LITERAL('header')
        args[0]: LITERAL('X-Content-Type-Options: nosniff')
        result: Var#1
    Stmt_Jump
        target: Block#3

Block#3
    Parent: Block#2
    Terminal_Return

Function _wp_mysql_week():
Block#1
    Expr_Param
        name: LITERAL('column')
        result: Var#1<$column>
    Expr_FuncCall
        name: LITERAL('get_option')
        args[0]: LITERAL('start_of_week')
        result: Var#2
    Expr_Cast_Int
        expr: Var#2
        result: Var#3
    Expr_Assign
        var: Var#4<$start_of_week>
        expr: Var#3
        result: Var#5
    Stmt_Switch
        cond: Var#5
        cases[0]: LITERAL(1)
        cases[1]: LITERAL(2)
        cases[2]: LITERAL(3)
        cases[3]: LITERAL(4)
        cases[4]: LITERAL(5)
        cases[5]: LITERAL(6)
        cases[6]: LITERAL(0)
        targets[0]: Block#2
        targets[1]: Block#3
        targets[2]: Block#4
        targets[3]: Block#5
        targets[4]: Block#6
        targets[5]: Block#7
        targets[6]: Block#8
        default: Block#9

Block#2
    Parent: Block#1
    Var#6<$column> = Phi(Var#1<$column>)
    Expr_ConcatList
        list[0]: LITERAL('WEEK( ')
        list[1]: Var#6<$column>
        list[2]: LITERAL(', 1 )')
        result: Var#7
    Terminal_Return
        expr: Var#7

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#1
    Parent: Block#3
    Var#8<$column> = Phi(Var#1<$column>)
    Var#9<$start_of_week> = Phi(Var#4<$start_of_week>)
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#1
    Parent: Block#4
    Var#10<$column> = Phi(Var#1<$column>, Var#8<$column>)
    Var#11<$start_of_week> = Phi(Var#4<$start_of_week>, Var#9<$start_of_week>)
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#1
    Parent: Block#5
    Var#12<$column> = Phi(Var#1<$column>, Var#10<$column>)
    Var#13<$start_of_week> = Phi(Var#4<$start_of_week>, Var#11<$start_of_week>)
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#1
    Parent: Block#6
    Var#14<$column> = Phi(Var#1<$column>, Var#12<$column>)
    Var#15<$start_of_week> = Phi(Var#4<$start_of_week>, Var#13<$start_of_week>)
    Expr_ConcatList
        list[0]: LITERAL('WEEK( DATE_SUB( ')
        list[1]: Var#14<$column>
        list[2]: LITERAL(', INTERVAL ')
        list[3]: Var#15<$start_of_week>
        list[4]: LITERAL(' DAY ), 0 )')
        result: Var#16
    Terminal_Return
        expr: Var#16

Block#8
    Parent: Block#1
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#1
    Parent: Block#8
    Var#17<$column> = Phi(Var#1<$column>)
    Expr_ConcatList
        list[0]: LITERAL('WEEK( ')
        list[1]: Var#17<$column>
        list[2]: LITERAL(', 0 )')
        result: Var#18
    Terminal_Return
        expr: Var#18

Function wp_find_hierarchy_loop():
Block#1
    Expr_Param
        name: LITERAL('callback')
        result: Var#1<$callback>
    Expr_Param
        name: LITERAL('start')
        result: Var#2<$start>
    Expr_Param
        name: LITERAL('start_parent')
        result: Var#3<$start_parent>
    Expr_Param
        name: LITERAL('callback_args')
        defaultVar: Var#4
        result: Var#5<$callback_args>
        defaultBlock: Block#2
    Expr_FuncCall
        name: LITERAL('is_null')
        args[0]: Var#3<$start_parent>
        result: Var#6
    Stmt_JumpIf
        cond: Var#6
        if: Block#3
        else: Block#4

Block#2
    Expr_Array
        result: Var#4

Block#3
    Parent: Block#1
    Var#7<$start_parent> = Phi(Var#3<$start_parent>)
    Expr_Assertion<type(LITERAL('null'))>
        expr: Var#7<$start_parent>
        result: Var#8<$start_parent>
    Expr_Array
        result: Var#9
    Expr_Assign
        var: Var#10
        expr: Var#9
        result: Var#11
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Var#12<$start_parent> = Phi(Var#3<$start_parent>)
    Var#13<$start> = Phi(Var#2<$start>)
    Expr_Assertion<not(type(LITERAL('null')))>
        expr: Var#12<$start_parent>
        result: Var#14<$start_parent>
    Expr_Array
        keys[0]: Var#13<$start>
        values[0]: Var#14<$start_parent>
        result: Var#15
    Expr_Assign
        var: Var#16
        expr: Var#15
        result: Var#17
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Var#18 = Phi(Var#10, Var#16)
    Var#19<$callback> = Phi(Var#1<$callback>)
    Var#20<$start> = Phi(Var#2<$start>, Var#13<$start>)
    Var#21<$callback_args> = Phi(Var#5<$callback_args>)
    Expr_Assign
        var: Var#22<$override>
        expr: Var#18
        result: Var#23
    Expr_FuncCall
        name: LITERAL('wp_find_hierarchy_loop_tortoise_hare')
        args[0]: Var#19<$callback>
        args[1]: Var#20<$start>
        args[2]: Var#22<$override>
        args[3]: Var#21<$callback_args>
        result: Var#24
    Expr_Assign
        var: Var#25<$arbitrary_loop_member>
        expr: Var#24
        result: Var#26
    Expr_BooleanNot
        expr: Var#26
        result: Var#27
    Stmt_JumpIf
        cond: Var#27
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Expr_Array
        result: Var#28
    Terminal_Return
        expr: Var#28

Block#7
    Parent: Block#5
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#7
    Var#29<$callback> = Phi(Var#19<$callback>)
    Var#30<$arbitrary_loop_member> = Phi(Var#25<$arbitrary_loop_member>)
    Var#31<$override> = Phi(Var#22<$override>)
    Var#32<$callback_args> = Phi(Var#21<$callback_args>)
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#33
    Expr_FuncCall
        name: LITERAL('wp_find_hierarchy_loop_tortoise_hare')
        args[0]: Var#29<$callback>
        args[1]: Var#30<$arbitrary_loop_member>
        args[2]: Var#31<$override>
        args[3]: Var#32<$callback_args>
        args[4]: Var#33
        result: Var#34
    Terminal_Return
        expr: Var#34

Function wp_find_hierarchy_loop_tortoise_hare():
Block#1
    Expr_Param
        name: LITERAL('callback')
        result: Var#1<$callback>
    Expr_Param
        name: LITERAL('start')
        result: Var#2<$start>
    Expr_Param
        name: LITERAL('override')
        defaultVar: Var#3
        result: Var#4<$override>
        defaultBlock: Block#2
    Expr_Param
        name: LITERAL('callback_args')
        defaultVar: Var#5
        result: Var#6<$callback_args>
        defaultBlock: Block#3
    Expr_Param
        name: LITERAL('_return_loop')
        defaultVar: Var#7
        result: Var#8<$_return_loop>
        defaultBlock: Block#4
    Expr_Assign
        var: Var#9<$evanescent_hare>
        expr: Var#2<$start>
        result: Var#10
    Expr_Assign
        var: Var#11<$hare>
        expr: Var#10
        result: Var#12
    Expr_Assign
        var: Var#13<$tortoise>
        expr: Var#12
        result: Var#14
    Expr_Array
        result: Var#15
    Expr_Assign
        var: Var#16<$return>
        expr: Var#15
        result: Var#17
    Stmt_Jump
        target: Block#5

Block#2
    Expr_Array
        result: Var#3

Block#3
    Expr_Array
        result: Var#5

Block#4
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#7

Block#5
    Parent: Block#1
    Parent: Block#33
    Var#18<$tortoise> = Phi(Var#13<$tortoise>, Var#19<$tortoise>)
    Var#20<$override> = Phi(Var#4<$override>, Var#21<$override>)
    Var#22<$hare> = Phi(Var#11<$hare>, Var#23<$hare>)
    Var#24<$callback> = Phi(Var#1<$callback>, Var#25<$callback>)
    Var#26<$callback_args> = Phi(Var#6<$callback_args>, Var#27<$callback_args>)
    Var#28<$evanescent_hare> = Phi(Var#9<$evanescent_hare>, Var#29<$evanescent_hare>)
    Var#30<$_return_loop> = Phi(Var#8<$_return_loop>, Var#31<$_return_loop>)
    Var#32<$return> = Phi(Var#16<$return>, Var#33<$return>)
    Stmt_JumpIf
        cond: Var#18<$tortoise>
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Var#34<$override> = Phi(Var#20<$override>)
    Var#35<$hare> = Phi(Var#22<$hare>)
    Expr_ArrayDimFetch
        var: Var#34<$override>
        dim: Var#35<$hare>
        result: Var#36
    Expr_Isset
        vars[0]: Var#36
        result: Var#37
    Stmt_JumpIf
        cond: Var#37
        if: Block#8
        else: Block#9

Block#7
    Parent: Block#5
    Parent: Block#12
    Var#38 = Phi(LITERAL(false), Var#39)
    Var#40<$hare> = Phi(Var#22<$hare>, Var#41<$hare>)
    Var#42<$callback> = Phi(Var#24<$callback>, Var#43<$callback>)
    Var#44<$callback_args> = Phi(Var#26<$callback_args>, Var#45<$callback_args>)
    Var#46<$override> = Phi(Var#20<$override>, Var#47<$override>)
    Var#48<$evanescent_hare> = Phi(Var#28<$evanescent_hare>, Var#49<$evanescent_hare>)
    Var#50<$_return_loop> = Phi(Var#30<$_return_loop>, Var#51<$_return_loop>)
    Var#52<$return> = Phi(Var#32<$return>, Var#53<$return>)
    Var#54<$tortoise> = Phi(Var#18<$tortoise>, Var#55<$tortoise>)
    Stmt_JumpIf
        cond: Var#38
        if: Block#10
        else: Block#11

Block#8
    Parent: Block#6
    Var#56<$override> = Phi(Var#34<$override>)
    Var#57<$hare> = Phi(Var#35<$hare>)
    Expr_ArrayDimFetch
        var: Var#56<$override>
        dim: Var#57<$hare>
        result: Var#58
    Expr_Assign
        var: Var#59
        expr: Var#58
        result: Var#60
    Stmt_Jump
        target: Block#12

Block#9
    Parent: Block#6
    Var#61<$callback> = Phi(Var#24<$callback>)
    Var#62<$hare> = Phi(Var#35<$hare>)
    Var#63<$callback_args> = Phi(Var#26<$callback_args>)
    Expr_Array
        values[0]: Var#62<$hare>
        result: Var#64
    Expr_FuncCall
        name: LITERAL('array_merge')
        args[0]: Var#64
        args[1]: Var#63<$callback_args>
        result: Var#65
    Expr_FuncCall
        name: LITERAL('call_user_func_array')
        args[0]: Var#61<$callback>
        args[1]: Var#65
        result: Var#66
    Expr_Assign
        var: Var#67
        expr: Var#66
        result: Var#68
    Stmt_Jump
        target: Block#12

Block#10
    Parent: Block#7
    Var#69<$override> = Phi(Var#46<$override>)
    Var#70<$evanescent_hare> = Phi(Var#48<$evanescent_hare>)
    Expr_ArrayDimFetch
        var: Var#69<$override>
        dim: Var#70<$evanescent_hare>
        result: Var#71
    Expr_Isset
        vars[0]: Var#71
        result: Var#72
    Stmt_JumpIf
        cond: Var#72
        if: Block#13
        else: Block#14

Block#11
    Parent: Block#7
    Parent: Block#17
    Var#73 = Phi(LITERAL(false), Var#74)
    Var#75<$hare> = Phi(Var#40<$hare>, Var#76<$hare>)
    Var#77<$callback> = Phi(Var#42<$callback>, Var#78<$callback>)
    Var#79<$callback_args> = Phi(Var#44<$callback_args>, Var#80<$callback_args>)
    Var#81<$_return_loop> = Phi(Var#50<$_return_loop>, Var#82<$_return_loop>)
    Var#83<$return> = Phi(Var#52<$return>, Var#84<$return>)
    Var#85<$evanescent_hare> = Phi(Var#48<$evanescent_hare>, Var#86<$evanescent_hare>)
    Var#87<$tortoise> = Phi(Var#54<$tortoise>, Var#88<$tortoise>)
    Var#89<$override> = Phi(Var#46<$override>, Var#90<$override>)
    Stmt_JumpIf
        cond: Var#73
        if: Block#15
        else: Block#16

Block#12
    Parent: Block#8
    Parent: Block#9
    Var#91 = Phi(Var#59, Var#67)
    Var#41<$hare> = Phi(Var#57<$hare>, Var#62<$hare>)
    Var#43<$callback> = Phi(Var#24<$callback>, Var#61<$callback>)
    Var#45<$callback_args> = Phi(Var#26<$callback_args>, Var#63<$callback_args>)
    Var#47<$override> = Phi(Var#56<$override>, Var#34<$override>)
    Var#51<$_return_loop> = Phi(Var#30<$_return_loop>)
    Var#53<$return> = Phi(Var#32<$return>)
    Var#55<$tortoise> = Phi(Var#18<$tortoise>)
    Expr_Assign
        var: Var#49<$evanescent_hare>
        expr: Var#91
        result: Var#92
    Expr_Cast_Bool
        expr: Var#92
        result: Var#39
    Stmt_Jump
        target: Block#7

Block#13
    Parent: Block#10
    Var#93<$override> = Phi(Var#69<$override>)
    Var#94<$evanescent_hare> = Phi(Var#70<$evanescent_hare>)
    Expr_ArrayDimFetch
        var: Var#93<$override>
        dim: Var#94<$evanescent_hare>
        result: Var#95
    Expr_Assign
        var: Var#96
        expr: Var#95
        result: Var#97
    Stmt_Jump
        target: Block#17

Block#14
    Parent: Block#10
    Var#98<$callback> = Phi(Var#42<$callback>)
    Var#99<$evanescent_hare> = Phi(Var#70<$evanescent_hare>)
    Var#100<$callback_args> = Phi(Var#44<$callback_args>)
    Expr_Array
        values[0]: Var#99<$evanescent_hare>
        result: Var#101
    Expr_FuncCall
        name: LITERAL('array_merge')
        args[0]: Var#101
        args[1]: Var#100<$callback_args>
        result: Var#102
    Expr_FuncCall
        name: LITERAL('call_user_func_array')
        args[0]: Var#98<$callback>
        args[1]: Var#102
        result: Var#103
    Expr_Assign
        var: Var#104
        expr: Var#103
        result: Var#105
    Stmt_Jump
        target: Block#17

Block#15
    Parent: Block#11
    Var#106<$_return_loop> = Phi(Var#81<$_return_loop>)
    Stmt_JumpIf
        cond: Var#106<$_return_loop>
        if: Block#18
        else: Block#19

Block#16
    Parent: Block#11
    Stmt_Jump
        target: Block#20

Block#17
    Parent: Block#13
    Parent: Block#14
    Var#107 = Phi(Var#96, Var#104)
    Var#78<$callback> = Phi(Var#42<$callback>, Var#98<$callback>)
    Var#80<$callback_args> = Phi(Var#44<$callback_args>, Var#100<$callback_args>)
    Var#82<$_return_loop> = Phi(Var#50<$_return_loop>)
    Var#84<$return> = Phi(Var#52<$return>)
    Var#86<$evanescent_hare> = Phi(Var#94<$evanescent_hare>, Var#99<$evanescent_hare>)
    Var#88<$tortoise> = Phi(Var#54<$tortoise>)
    Var#90<$override> = Phi(Var#93<$override>, Var#69<$override>)
    Expr_Assign
        var: Var#76<$hare>
        expr: Var#107
        result: Var#108
    Expr_Cast_Bool
        expr: Var#108
        result: Var#74
    Stmt_Jump
        target: Block#11

Block#18
    Parent: Block#15
    Var#109<$return> = Phi(Var#83<$return>)
    Var#110<$hare> = Phi(Var#75<$hare>)
    Var#111<$evanescent_hare> = Phi(Var#85<$evanescent_hare>)
    Var#112<$tortoise> = Phi(Var#87<$tortoise>)
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#113
    Expr_ArrayDimFetch
        var: Var#109<$return>
        dim: Var#110<$hare>
        result: Var#114
    Expr_Assign
        var: Var#114
        expr: Var#113
        result: Var#115
    Expr_ArrayDimFetch
        var: Var#109<$return>
        dim: Var#111<$evanescent_hare>
        result: Var#116
    Expr_Assign
        var: Var#116
        expr: Var#115
        result: Var#117
    Expr_ArrayDimFetch
        var: Var#109<$return>
        dim: Var#112<$tortoise>
        result: Var#118
    Expr_Assign
        var: Var#118
        expr: Var#117
        result: Var#119
    Stmt_Jump
        target: Block#21

Block#19
    Parent: Block#15
    Stmt_Jump
        target: Block#21

Block#20
    Parent: Block#16
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#120
    Terminal_Return
        expr: Var#120

Block#21
    Parent: Block#18
    Parent: Block#19
    Var#121<$hare> = Phi(Var#110<$hare>, Var#75<$hare>)
    Var#122<$callback> = Phi(Var#77<$callback>)
    Var#123<$callback_args> = Phi(Var#79<$callback_args>)
    Var#124<$_return_loop> = Phi(Var#106<$_return_loop>)
    Var#125<$return> = Phi(Var#109<$return>, Var#83<$return>)
    Var#126<$tortoise> = Phi(Var#112<$tortoise>, Var#87<$tortoise>)
    Var#127<$evanescent_hare> = Phi(Var#111<$evanescent_hare>, Var#85<$evanescent_hare>)
    Var#128<$override> = Phi(Var#89<$override>)
    Expr_BinaryOp_Equal
        left: Var#126<$tortoise>
        right: Var#127<$evanescent_hare>
        result: Var#129
    Stmt_JumpIf
        cond: Var#129
        if: Block#22
        else: Block#23

Block#22
    Parent: Block#21
    Parent: Block#23
    Var#130 = Phi(LITERAL(true), Var#131)
    Var#132<$hare> = Phi(Var#121<$hare>, Var#133<$hare>)
    Var#134<$callback> = Phi(Var#122<$callback>)
    Var#135<$callback_args> = Phi(Var#123<$callback_args>)
    Var#136<$evanescent_hare> = Phi(Var#127<$evanescent_hare>)
    Var#137<$_return_loop> = Phi(Var#124<$_return_loop>)
    Var#138<$return> = Phi(Var#125<$return>)
    Var#139<$tortoise> = Phi(Var#126<$tortoise>, Var#140<$tortoise>)
    Var#141<$override> = Phi(Var#128<$override>)
    Stmt_JumpIf
        cond: Var#130
        if: Block#24
        else: Block#25

Block#23
    Parent: Block#21
    Var#140<$tortoise> = Phi(Var#126<$tortoise>)
    Var#133<$hare> = Phi(Var#121<$hare>)
    Expr_BinaryOp_Equal
        left: Var#140<$tortoise>
        right: Var#133<$hare>
        result: Var#142
    Expr_Cast_Bool
        expr: Var#142
        result: Var#131
    Stmt_Jump
        target: Block#22

Block#24
    Parent: Block#22
    Var#143<$_return_loop> = Phi(Var#137<$_return_loop>)
    Stmt_JumpIf
        cond: Var#143<$_return_loop>
        if: Block#26
        else: Block#27

Block#25
    Parent: Block#22
    Stmt_Jump
        target: Block#28

Block#26
    Parent: Block#24
    Var#144<$return> = Phi(Var#138<$return>)
    Expr_Assign
        var: Var#145
        expr: Var#144<$return>
        result: Var#146
    Stmt_Jump
        target: Block#29

Block#27
    Parent: Block#24
    Var#147<$tortoise> = Phi(Var#139<$tortoise>)
    Expr_Assign
        var: Var#148
        expr: Var#147<$tortoise>
        result: Var#149
    Stmt_Jump
        target: Block#29

Block#28
    Parent: Block#25
    Var#150<$hare> = Phi(Var#132<$hare>)
    Var#151<$callback> = Phi(Var#134<$callback>)
    Var#152<$callback_args> = Phi(Var#135<$callback_args>)
    Var#153<$evanescent_hare> = Phi(Var#136<$evanescent_hare>)
    Var#154<$_return_loop> = Phi(Var#137<$_return_loop>)
    Var#155<$return> = Phi(Var#138<$return>)
    Var#156<$override> = Phi(Var#141<$override>)
    Var#157<$tortoise> = Phi(Var#139<$tortoise>)
    Expr_ArrayDimFetch
        var: Var#156<$override>
        dim: Var#157<$tortoise>
        result: Var#158
    Expr_Isset
        vars[0]: Var#158
        result: Var#159
    Stmt_JumpIf
        cond: Var#159
        if: Block#30
        else: Block#31

Block#29
    Parent: Block#26
    Parent: Block#27
    Var#160 = Phi(Var#145, Var#148)
    Terminal_Return
        expr: Var#160

Block#30
    Parent: Block#28
    Var#161<$override> = Phi(Var#156<$override>)
    Var#162<$tortoise> = Phi(Var#157<$tortoise>)
    Expr_ArrayDimFetch
        var: Var#161<$override>
        dim: Var#162<$tortoise>
        result: Var#163
    Expr_Assign
        var: Var#164
        expr: Var#163
        result: Var#165
    Stmt_Jump
        target: Block#32

Block#31
    Parent: Block#28
    Var#166<$callback> = Phi(Var#151<$callback>)
    Var#167<$tortoise> = Phi(Var#157<$tortoise>)
    Var#168<$callback_args> = Phi(Var#152<$callback_args>)
    Expr_Array
        values[0]: Var#167<$tortoise>
        result: Var#169
    Expr_FuncCall
        name: LITERAL('array_merge')
        args[0]: Var#169
        args[1]: Var#168<$callback_args>
        result: Var#170
    Expr_FuncCall
        name: LITERAL('call_user_func_array')
        args[0]: Var#166<$callback>
        args[1]: Var#170
        result: Var#171
    Expr_Assign
        var: Var#172
        expr: Var#171
        result: Var#173
    Stmt_Jump
        target: Block#32

Block#32
    Parent: Block#30
    Parent: Block#31
    Var#174 = Phi(Var#164, Var#172)
    Var#21<$override> = Phi(Var#161<$override>, Var#156<$override>)
    Var#23<$hare> = Phi(Var#150<$hare>)
    Var#25<$callback> = Phi(Var#151<$callback>, Var#166<$callback>)
    Var#27<$callback_args> = Phi(Var#152<$callback_args>, Var#168<$callback_args>)
    Var#29<$evanescent_hare> = Phi(Var#153<$evanescent_hare>)
    Var#31<$_return_loop> = Phi(Var#154<$_return_loop>)
    Var#33<$return> = Phi(Var#155<$return>)
    Expr_Assign
        var: Var#19<$tortoise>
        expr: Var#174
        result: Var#175
    Stmt_Jump
        target: Block#33

Block#33
    Parent: Block#32
    Stmt_Jump
        target: Block#5

Function send_frame_options_header():
Block#1
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Expr_FuncCall
        name: LITERAL('header')
        args[0]: LITERAL('X-Frame-Options: SAMEORIGIN')
        result: Var#1
    Stmt_Jump
        target: Block#3

Block#3
    Parent: Block#2
    Terminal_Return

Function wp_allowed_protocols():
Block#1
    Terminal_StaticVar
        var: Var#1<static<&$protocols>>
        defaultVar: Var#2
        defaultBlock: Block#2
    Expr_Empty
        expr: Var#1<static<&$protocols>>
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#3
        else: Block#4

Block#2
    Expr_Array
        result: Var#2

Block#3
    Parent: Block#1
    Expr_Array
        values[0]: LITERAL('http')
        values[1]: LITERAL('https')
        values[2]: LITERAL('ftp')
        values[3]: LITERAL('ftps')
        values[4]: LITERAL('mailto')
        values[5]: LITERAL('news')
        values[6]: LITERAL('irc')
        values[7]: LITERAL('gopher')
        values[8]: LITERAL('nntp')
        values[9]: LITERAL('feed')
        values[10]: LITERAL('telnet')
        values[11]: LITERAL('mms')
        values[12]: LITERAL('rtsp')
        values[13]: LITERAL('svn')
        values[14]: LITERAL('tel')
        values[15]: LITERAL('fax')
        values[16]: LITERAL('xmpp')
        values[17]: LITERAL('webcal')
        result: Var#4
    Expr_Assign
        var: Var#5<$protocols>
        expr: Var#4
        result: Var#6
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('kses_allowed_protocols')
        args[1]: Var#5<$protocols>
        result: Var#7
    Expr_Assign
        var: Var#8<$protocols>
        expr: Var#7
        result: Var#9
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Var#10<$protocols> = Phi(Var#8<$protocols>, Var#1<static<&$protocols>>)
    Terminal_Return
        expr: Var#10<$protocols>

Function wp_debug_backtrace_summary():
Block#1
    Expr_Param
        name: LITERAL('ignore_class')
        defaultVar: Var#1
        result: Var#2<$ignore_class>
        defaultBlock: Block#2
    Expr_Param
        name: LITERAL('skip_frames')
        defaultVar: LITERAL(0)
        result: Var#3<$skip_frames>
        defaultBlock: Block#3
    Expr_Param
        name: LITERAL('pretty')
        defaultVar: Var#4
        result: Var#5<$pretty>
        defaultBlock: Block#4
    Expr_ConstFetch
        name: LITERAL('PHP_VERSION')
        result: Var#6
    Expr_FuncCall
        name: LITERAL('version_compare')
        args[0]: Var#6
        args[1]: LITERAL('5.2.5')
        args[2]: LITERAL('>=')
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#5
        else: Block#6

Block#2
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#1

Block#3

Block#4
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#4

Block#5
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#8
    Expr_FuncCall
        name: LITERAL('debug_backtrace')
        args[0]: Var#8
        result: Var#9
    Expr_Assign
        var: Var#10<$trace>
        expr: Var#9
        result: Var#11
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#1
    Expr_FuncCall
        name: LITERAL('debug_backtrace')
        result: Var#12
    Expr_Assign
        var: Var#13<$trace>
        expr: Var#12
        result: Var#14
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#5
    Parent: Block#6
    Var#15<$ignore_class> = Phi(Var#2<$ignore_class>)
    Var#16<$skip_frames> = Phi(Var#3<$skip_frames>)
    Var#17<$trace> = Phi(Var#10<$trace>, Var#13<$trace>)
    Var#18<$pretty> = Phi(Var#5<$pretty>)
    Expr_Array
        result: Var#19
    Expr_Assign
        var: Var#20<$caller>
        expr: Var#19
        result: Var#21
    Expr_FuncCall
        name: LITERAL('is_null')
        args[0]: Var#15<$ignore_class>
        result: Var#22
    Expr_BooleanNot
        expr: Var#22
        result: Var#23
    Expr_Assign
        var: Var#24<$check_class>
        expr: Var#23
        result: Var#25
    Expr_BinaryOp_Plus
        left: Var#16<$skip_frames>
        right: LITERAL(1)
        result: Var#26
    Expr_Assign
        var: Var#27<$skip_frames>
        expr: Var#26
        result: Var#28
    Iterator_Reset
        var: Var#17<$trace>
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#7
    Parent: Block#19
    Var#29<$skip_frames> = Phi(Var#27<$skip_frames>, Var#30<$skip_frames>)
    Var#31<$check_class> = Phi(Var#24<$check_class>, Var#32<$check_class>)
    Var#33<$ignore_class> = Phi(Var#15<$ignore_class>, Var#34<$ignore_class>)
    Var#35<$caller> = Phi(Var#20<$caller>, Var#36<$caller>)
    Var#37<$pretty> = Phi(Var#18<$pretty>, Var#38<$pretty>)
    Iterator_Valid
        var: Var#17<$trace>
        result: Var#39
    Stmt_JumpIf
        cond: Var#39
        if: Block#9
        else: Block#10

Block#9
    Parent: Block#8
    Var#40<$skip_frames> = Phi(Var#29<$skip_frames>)
    Iterator_Value
        var: Var#17<$trace>
        result: Var#41
    Expr_Assign
        var: Var#42<$call>
        expr: Var#41
        result: Var#43
    Expr_BinaryOp_Greater
        left: Var#40<$skip_frames>
        right: LITERAL(0)
        result: Var#44
    Stmt_JumpIf
        cond: Var#44
        if: Block#11
        else: Block#12

Block#10
    Parent: Block#8
    Stmt_Jump
        target: Block#13

Block#11
    Parent: Block#9
    Var#45<$skip_frames> = Phi(Var#40<$skip_frames>)
    Expr_BinaryOp_Minus
        left: Var#45<$skip_frames>
        right: LITERAL(1)
        result: Var#46
    Expr_Assign
        var: Var#47<$skip_frames>
        expr: Var#46
        result: Var#48
    Stmt_Jump
        target: Block#14

Block#12
    Parent: Block#9
    Var#49<$call> = Phi(Var#42<$call>)
    Expr_ArrayDimFetch
        var: Var#49<$call>
        dim: LITERAL('class')
        result: Var#50
    Expr_Isset
        vars[0]: Var#50
        result: Var#51
    Stmt_JumpIf
        cond: Var#51
        if: Block#15
        else: Block#16

Block#13
    Parent: Block#10
    Var#52<$pretty> = Phi(Var#37<$pretty>)
    Stmt_JumpIf
        cond: Var#52<$pretty>
        if: Block#17
        else: Block#18

Block#14
    Parent: Block#11
    Parent: Block#29
    Parent: Block#26
    Var#53<$skip_frames> = Phi(Var#47<$skip_frames>, Var#54<$skip_frames>, Var#55<$skip_frames>)
    Var#56<$check_class> = Phi(Var#31<$check_class>, Var#57<$check_class>, Var#58<$check_class>)
    Var#59<$ignore_class> = Phi(Var#33<$ignore_class>, Var#60<$ignore_class>, Var#61<$ignore_class>)
    Var#62<$caller> = Phi(Var#35<$caller>, Var#63<$caller>, Var#64<$caller>)
    Var#65<$pretty> = Phi(Var#37<$pretty>, Var#66<$pretty>, Var#67<$pretty>)
    Stmt_Jump
        target: Block#19

Block#15
    Parent: Block#12
    Var#68<$check_class> = Phi(Var#31<$check_class>)
    Stmt_JumpIf
        cond: Var#68<$check_class>
        if: Block#20
        else: Block#21

Block#16
    Parent: Block#12
    Var#69<$call> = Phi(Var#49<$call>)
    Expr_ArrayDimFetch
        var: Var#69<$call>
        dim: LITERAL('function')
        result: Var#70
    Expr_Array
        values[0]: LITERAL('do_action')
        values[1]: LITERAL('apply_filters')
        result: Var#71
    Expr_FuncCall
        name: LITERAL('in_array')
        args[0]: Var#70
        args[1]: Var#71
        result: Var#72
    Stmt_JumpIf
        cond: Var#72
        if: Block#22
        else: Block#23

Block#17
    Parent: Block#13
    Var#73<$caller> = Phi(Var#35<$caller>)
    Expr_FuncCall
        name: LITERAL('array_reverse')
        args[0]: Var#73<$caller>
        result: Var#74
    Expr_FuncCall
        name: LITERAL('join')
        args[0]: LITERAL(', ')
        args[1]: Var#74
        result: Var#75
    Terminal_Return
        expr: Var#75

Block#18
    Parent: Block#13
    Var#76<$caller> = Phi(Var#35<$caller>)
    Terminal_Return
        expr: Var#76<$caller>

Block#19
    Parent: Block#14
    Parent: Block#24
    Var#30<$skip_frames> = Phi(Var#53<$skip_frames>, Var#77<$skip_frames>)
    Var#32<$check_class> = Phi(Var#56<$check_class>, Var#78<$check_class>)
    Var#34<$ignore_class> = Phi(Var#59<$ignore_class>, Var#79<$ignore_class>)
    Var#36<$caller> = Phi(Var#62<$caller>, Var#80<$caller>)
    Var#38<$pretty> = Phi(Var#65<$pretty>, Var#81<$pretty>)
    Stmt_Jump
        target: Block#8

Block#20
    Parent: Block#15
    Var#82<$ignore_class> = Phi(Var#33<$ignore_class>)
    Var#83<$call> = Phi(Var#49<$call>)
    Expr_ArrayDimFetch
        var: Var#83<$call>
        dim: LITERAL('class')
        result: Var#84
    Expr_BinaryOp_Equal
        left: Var#82<$ignore_class>
        right: Var#84
        result: Var#85
    Expr_Cast_Bool
        expr: Var#85
        result: Var#86
    Stmt_Jump
        target: Block#21

Block#21
    Parent: Block#15
    Parent: Block#20
    Var#87 = Phi(LITERAL(false), Var#86)
    Var#77<$skip_frames> = Phi(Var#40<$skip_frames>)
    Var#78<$check_class> = Phi(Var#68<$check_class>)
    Var#79<$ignore_class> = Phi(Var#33<$ignore_class>, Var#82<$ignore_class>)
    Var#88<$call> = Phi(Var#49<$call>, Var#83<$call>)
    Var#80<$caller> = Phi(Var#35<$caller>)
    Var#81<$pretty> = Phi(Var#37<$pretty>)
    Stmt_JumpIf
        cond: Var#87
        if: Block#24
        else: Block#25

Block#22
    Parent: Block#16
    Var#89<$call> = Phi(Var#69<$call>)
    Var#90<$caller> = Phi(Var#35<$caller>)
    Expr_ArrayDimFetch
        var: Var#89<$call>
        dim: LITERAL('function')
        result: Var#91
    Expr_ArrayDimFetch
        var: Var#89<$call>
        dim: LITERAL('args')
        result: Var#92
    Expr_ArrayDimFetch
        var: Var#92
        dim: LITERAL(0)
        result: Var#93
    Expr_ConcatList
        list[0]: Var#91
        list[1]: LITERAL('(\'')
        list[2]: Var#93
        list[3]: LITERAL('\')')
        result: Var#94
    Expr_ArrayDimFetch
        var: Var#90<$caller>
        result: Var#95
    Expr_Assign
        var: Var#95
        expr: Var#94
        result: Var#96
    Stmt_Jump
        target: Block#26

Block#23
    Parent: Block#16
    Var#97<$call> = Phi(Var#69<$call>)
    Expr_ArrayDimFetch
        var: Var#97<$call>
        dim: LITERAL('function')
        result: Var#98
    Expr_Array
        values[0]: LITERAL('include')
        values[1]: LITERAL('include_once')
        values[2]: LITERAL('require')
        values[3]: LITERAL('require_once')
        result: Var#99
    Expr_FuncCall
        name: LITERAL('in_array')
        args[0]: Var#98
        args[1]: Var#99
        result: Var#100
    Stmt_JumpIf
        cond: Var#100
        if: Block#27
        else: Block#28

Block#24
    Parent: Block#21
    Stmt_Jump
        target: Block#19

Block#25
    Parent: Block#21
    Stmt_Jump
        target: Block#29

Block#26
    Parent: Block#22
    Parent: Block#27
    Parent: Block#28
    Var#55<$skip_frames> = Phi(Var#40<$skip_frames>)
    Var#58<$check_class> = Phi(Var#31<$check_class>)
    Var#61<$ignore_class> = Phi(Var#33<$ignore_class>)
    Var#64<$caller> = Phi(Var#90<$caller>, Var#101<$caller>, Var#102<$caller>)
    Var#67<$pretty> = Phi(Var#37<$pretty>)
    Stmt_Jump
        target: Block#14

Block#27
    Parent: Block#23
    Var#103<$call> = Phi(Var#97<$call>)
    Var#101<$caller> = Phi(Var#35<$caller>)
    Expr_ArrayDimFetch
        var: Var#103<$call>
        dim: LITERAL('function')
        result: Var#104
    Expr_BinaryOp_Concat
        left: Var#104
        right: LITERAL('(\'')
        result: Var#105
    Expr_ConstFetch
        name: LITERAL('WP_CONTENT_DIR')
        result: Var#106
    Expr_ConstFetch
        name: LITERAL('ABSPATH')
        result: Var#107
    Expr_Array
        values[0]: Var#106
        values[1]: Var#107
        result: Var#108
    Expr_ArrayDimFetch
        var: Var#103<$call>
        dim: LITERAL('args')
        result: Var#109
    Expr_ArrayDimFetch
        var: Var#109
        dim: LITERAL(0)
        result: Var#110
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: Var#108
        args[1]: LITERAL('')
        args[2]: Var#110
        result: Var#111
    Expr_BinaryOp_Concat
        left: Var#105
        right: Var#111
        result: Var#112
    Expr_BinaryOp_Concat
        left: Var#112
        right: LITERAL('\')')
        result: Var#113
    Expr_ArrayDimFetch
        var: Var#101<$caller>
        result: Var#114
    Expr_Assign
        var: Var#114
        expr: Var#113
        result: Var#115
    Stmt_Jump
        target: Block#26

Block#28
    Parent: Block#23
    Var#116<$call> = Phi(Var#97<$call>)
    Var#102<$caller> = Phi(Var#35<$caller>)
    Expr_ArrayDimFetch
        var: Var#116<$call>
        dim: LITERAL('function')
        result: Var#117
    Expr_ArrayDimFetch
        var: Var#102<$caller>
        result: Var#118
    Expr_Assign
        var: Var#118
        expr: Var#117
        result: Var#119
    Stmt_Jump
        target: Block#26

Block#29
    Parent: Block#25
    Var#54<$skip_frames> = Phi(Var#77<$skip_frames>)
    Var#57<$check_class> = Phi(Var#78<$check_class>)
    Var#60<$ignore_class> = Phi(Var#79<$ignore_class>)
    Var#120<$call> = Phi(Var#88<$call>)
    Var#63<$caller> = Phi(Var#80<$caller>)
    Var#66<$pretty> = Phi(Var#81<$pretty>)
    Expr_ArrayDimFetch
        var: Var#120<$call>
        dim: LITERAL('class')
        result: Var#121
    Expr_ArrayDimFetch
        var: Var#120<$call>
        dim: LITERAL('type')
        result: Var#122
    Expr_ArrayDimFetch
        var: Var#120<$call>
        dim: LITERAL('function')
        result: Var#123
    Expr_ConcatList
        list[0]: Var#121
        list[1]: Var#122
        list[2]: Var#123
        result: Var#124
    Expr_ArrayDimFetch
        var: Var#63<$caller>
        result: Var#125
    Expr_Assign
        var: Var#125
        expr: Var#124
        result: Var#126
    Stmt_Jump
        target: Block#14

Function _get_non_cached_ids():
Block#1
    Expr_Param
        name: LITERAL('object_ids')
        result: Var#1<$object_ids>
    Expr_Param
        name: LITERAL('cache_key')
        result: Var#2<$cache_key>
    Expr_Array
        result: Var#3
    Expr_Assign
        var: Var#4<$clean>
        expr: Var#3
        result: Var#5
    Iterator_Reset
        var: Var#1<$object_ids>
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Parent: Block#9
    Var#6<$cache_key> = Phi(Var#2<$cache_key>, Var#7<$cache_key>)
    Var#8<$clean> = Phi(Var#4<$clean>, Var#9<$clean>)
    Iterator_Valid
        var: Var#1<$object_ids>
        result: Var#10
    Stmt_JumpIf
        cond: Var#10
        if: Block#3
        else: Block#4

Block#3
    Parent: Block#2
    Var#11<$cache_key> = Phi(Var#6<$cache_key>)
    Iterator_Value
        var: Var#1<$object_ids>
        result: Var#12
    Expr_Assign
        var: Var#13<$id>
        expr: Var#12
        result: Var#14
    Expr_Cast_Int
        expr: Var#13<$id>
        result: Var#15
    Expr_Assign
        var: Var#16<$id>
        expr: Var#15
        result: Var#17
    Expr_FuncCall
        name: LITERAL('wp_cache_get')
        args[0]: Var#16<$id>
        args[1]: Var#11<$cache_key>
        result: Var#18
    Expr_BooleanNot
        expr: Var#18
        result: Var#19
    Stmt_JumpIf
        cond: Var#19
        if: Block#5
        else: Block#6

Block#4
    Parent: Block#2
    Stmt_Jump
        target: Block#7

Block#5
    Parent: Block#3
    Var#20<$id> = Phi(Var#16<$id>)
    Var#21<$clean> = Phi(Var#8<$clean>)
    Expr_ArrayDimFetch
        var: Var#21<$clean>
        result: Var#22
    Expr_Assign
        var: Var#22
        expr: Var#20<$id>
        result: Var#23
    Stmt_Jump
        target: Block#8

Block#6
    Parent: Block#3
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#4
    Var#24<$clean> = Phi(Var#8<$clean>)
    Terminal_Return
        expr: Var#24<$clean>

Block#8
    Parent: Block#5
    Parent: Block#6
    Var#7<$cache_key> = Phi(Var#11<$cache_key>)
    Var#9<$clean> = Phi(Var#21<$clean>, Var#8<$clean>)
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#8
    Stmt_Jump
        target: Block#2

Function _device_can_upload():
Block#1
    Var#1<$_SERVER> = Phi()
    Var#2<$version> = Phi()
    Expr_FuncCall
        name: LITERAL('wp_is_mobile')
        result: Var#3
    Expr_BooleanNot
        expr: Var#3
        result: Var#4
    Stmt_JumpIf
        cond: Var#4
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#5
    Terminal_Return
        expr: Var#5

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Var#6<$_SERVER> = Phi(Var#1<$_SERVER>)
    Var#7<$version> = Phi(Var#2<$version>)
    Expr_ArrayDimFetch
        var: Var#6<$_SERVER>
        dim: LITERAL('HTTP_USER_AGENT')
        result: Var#8
    Expr_Assign
        var: Var#9<$ua>
        expr: Var#8
        result: Var#10
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#9<$ua>
        args[1]: LITERAL('iPhone')
        result: Var#11
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#12
    Expr_BinaryOp_NotIdentical
        left: Var#11
        right: Var#12
        result: Var#13
    Stmt_JumpIf
        cond: Var#13
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Parent: Block#6
    Var#14 = Phi(LITERAL(true), Var#15)
    Var#16<$ua> = Phi(Var#9<$ua>, Var#17<$ua>)
    Var#18<$version> = Phi(Var#7<$version>)
    Stmt_JumpIf
        cond: Var#14
        if: Block#7
        else: Block#8

Block#6
    Parent: Block#4
    Var#17<$ua> = Phi(Var#9<$ua>)
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#17<$ua>
        args[1]: LITERAL('iPad')
        result: Var#19
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#20
    Expr_BinaryOp_NotIdentical
        left: Var#19
        right: Var#20
        result: Var#21
    Expr_Cast_Bool
        expr: Var#21
        result: Var#15
    Stmt_Jump
        target: Block#5

Block#7
    Parent: Block#5
    Parent: Block#8
    Var#22 = Phi(LITERAL(true), Var#23)
    Var#24<$ua> = Phi(Var#16<$ua>, Var#25<$ua>)
    Var#26<$version> = Phi(Var#18<$version>)
    Stmt_JumpIf
        cond: Var#22
        if: Block#9
        else: Block#10

Block#8
    Parent: Block#5
    Var#25<$ua> = Phi(Var#16<$ua>)
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#25<$ua>
        args[1]: LITERAL('iPod')
        result: Var#27
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#28
    Expr_BinaryOp_NotIdentical
        left: Var#27
        right: Var#28
        result: Var#29
    Expr_Cast_Bool
        expr: Var#29
        result: Var#23
    Stmt_Jump
        target: Block#7

Block#9
    Parent: Block#7
    Var#30<$ua> = Phi(Var#24<$ua>)
    Var#31<$version> = Phi(Var#26<$version>)
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('#OS ([\\d_]+) like Mac OS X#')
        args[1]: Var#30<$ua>
        args[2]: Var#31<$version>
        result: Var#32
    Stmt_JumpIf
        cond: Var#32
        if: Block#11
        else: Block#12

Block#10
    Parent: Block#7
    Stmt_Jump
        target: Block#13

Block#11
    Parent: Block#9
    Var#33<$version> = Phi(Var#31<$version>)
    Expr_ArrayDimFetch
        var: Var#33<$version>
        dim: LITERAL(1)
        result: Var#34
    Expr_FuncCall
        name: LITERAL('version_compare')
        args[0]: Var#34
        args[1]: LITERAL('6')
        args[2]: LITERAL('>=')
        result: Var#35
    Expr_Cast_Bool
        expr: Var#35
        result: Var#36
    Stmt_Jump
        target: Block#12

Block#12
    Parent: Block#9
    Parent: Block#11
    Var#37 = Phi(LITERAL(false), Var#36)
    Terminal_Return
        expr: Var#37

Block#13
    Parent: Block#10
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#38
    Terminal_Return
        expr: Var#38

Function wp_is_stream():
Block#1
    Expr_Param
        name: LITERAL('path')
        result: Var#1<$path>
    Expr_FuncCall
        name: LITERAL('stream_get_wrappers')
        result: Var#2
    Expr_Assign
        var: Var#3<$wrappers>
        expr: Var#2
        result: Var#4
    Expr_FuncCall
        name: LITERAL('join')
        args[0]: LITERAL('|')
        args[1]: Var#3<$wrappers>
        result: Var#5
    Expr_BinaryOp_Concat
        left: LITERAL('(')
        right: Var#5
        result: Var#6
    Expr_BinaryOp_Concat
        left: Var#6
        right: LITERAL(')')
        result: Var#7
    Expr_Assign
        var: Var#8<$wrappers_re>
        expr: Var#7
        result: Var#9
    Expr_ConcatList
        list[0]: LITERAL('!^')
        list[1]: Var#8<$wrappers_re>
        list[2]: LITERAL('://!')
        result: Var#10
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: Var#10
        args[1]: Var#1<$path>
        result: Var#11
    Expr_BinaryOp_Identical
        left: Var#11
        right: LITERAL(1)
        result: Var#12
    Terminal_Return
        expr: Var#12

Function wp_checkdate():
Block#1
    Expr_Param
        name: LITERAL('month')
        result: Var#1<$month>
    Expr_Param
        name: LITERAL('day')
        result: Var#2<$day>
    Expr_Param
        name: LITERAL('year')
        result: Var#3<$year>
    Expr_Param
        name: LITERAL('source_date')
        result: Var#4<$source_date>
    Expr_FuncCall
        name: LITERAL('checkdate')
        args[0]: Var#1<$month>
        args[1]: Var#2<$day>
        args[2]: Var#3<$year>
        result: Var#5
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('wp_checkdate')
        args[1]: Var#5
        args[2]: Var#4<$source_date>
        result: Var#6
    Terminal_Return
        expr: Var#6

Function wp_auth_check_load():
Block#1
    Expr_FuncCall
        name: LITERAL('is_admin')
        result: Var#1
    Expr_BooleanNot
        expr: Var#1
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_FuncCall
        name: LITERAL('is_user_logged_in')
        result: Var#3
    Expr_BooleanNot
        expr: Var#3
        result: Var#4
    Expr_Cast_Bool
        expr: Var#4
        result: Var#5
    Stmt_Jump
        target: Block#3

Block#3
    Parent: Block#1
    Parent: Block#2
    Var#6 = Phi(LITERAL(false), Var#5)
    Stmt_JumpIf
        cond: Var#6
        if: Block#4
        else: Block#5

Block#4
    Parent: Block#3
    Terminal_Return

Block#5
    Parent: Block#3
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#5
    Expr_FuncCall
        name: LITERAL('defined')
        args[0]: LITERAL('IFRAME_REQUEST')
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#7
        else: Block#8

Block#7
    Parent: Block#6
    Terminal_Return

Block#8
    Parent: Block#6
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#8
    Expr_FuncCall
        name: LITERAL('get_current_screen')
        result: Var#8
    Expr_Assign
        var: Var#9<$screen>
        expr: Var#8
        result: Var#10
    Expr_Array
        values[0]: LITERAL('update')
        values[1]: LITERAL('update-network')
        values[2]: LITERAL('update-core')
        values[3]: LITERAL('update-core-network')
        values[4]: LITERAL('upgrade')
        values[5]: LITERAL('upgrade-network')
        values[6]: LITERAL('network')
        result: Var#11
    Expr_Assign
        var: Var#12<$hidden>
        expr: Var#11
        result: Var#13
    Expr_PropertyFetch
        var: Var#9<$screen>
        name: LITERAL('id')
        result: Var#14
    Expr_FuncCall
        name: LITERAL('in_array')
        args[0]: Var#14
        args[1]: Var#12<$hidden>
        result: Var#15
    Expr_BooleanNot
        expr: Var#15
        result: Var#16
    Expr_Assign
        var: Var#17<$show>
        expr: Var#16
        result: Var#18
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('wp_auth_check_load')
        args[1]: Var#17<$show>
        args[2]: Var#9<$screen>
        result: Var#19
    Stmt_JumpIf
        cond: Var#19
        if: Block#10
        else: Block#11

Block#10
    Parent: Block#9
    Expr_FuncCall
        name: LITERAL('wp_enqueue_style')
        args[0]: LITERAL('wp-auth-check')
        result: Var#20
    Expr_FuncCall
        name: LITERAL('wp_enqueue_script')
        args[0]: LITERAL('wp-auth-check')
        result: Var#21
    Expr_FuncCall
        name: LITERAL('add_action')
        args[0]: LITERAL('admin_print_footer_scripts')
        args[1]: LITERAL('wp_auth_check_html')
        args[2]: LITERAL(5)
        result: Var#22
    Expr_FuncCall
        name: LITERAL('add_action')
        args[0]: LITERAL('wp_print_footer_scripts')
        args[1]: LITERAL('wp_auth_check_html')
        args[2]: LITERAL(5)
        result: Var#23
    Stmt_Jump
        target: Block#12

Block#11
    Parent: Block#9
    Stmt_Jump
        target: Block#12

Block#12
    Parent: Block#10
    Parent: Block#11
    Terminal_Return

Function wp_auth_check_html():
Block#1
    Var#1<$_SERVER> = Phi()
    Expr_FuncCall
        name: LITERAL('wp_login_url')
        result: Var#2
    Expr_Assign
        var: Var#3<$login_url>
        expr: Var#2
        result: Var#4
    Expr_FuncCall
        name: LITERAL('is_ssl')
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_Assign
        var: Var#6
        expr: LITERAL('https://')
        result: Var#7
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Expr_Assign
        var: Var#8
        expr: LITERAL('http://')
        result: Var#9
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Var#10 = Phi(Var#6, Var#8)
    Var#11<$_SERVER> = Phi(Var#1<$_SERVER>)
    Var#12<$login_url> = Phi(Var#3<$login_url>)
    Expr_ArrayDimFetch
        var: Var#11<$_SERVER>
        dim: LITERAL('HTTP_HOST')
        result: Var#13
    Expr_BinaryOp_Concat
        left: Var#10
        right: Var#13
        result: Var#14
    Expr_Assign
        var: Var#15<$current_domain>
        expr: Var#14
        result: Var#16
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#12<$login_url>
        args[1]: Var#15<$current_domain>
        result: Var#17
    Expr_BinaryOp_Identical
        left: Var#17
        right: LITERAL(0)
        result: Var#18
    Expr_Assign
        var: Var#19<$same_domain>
        expr: Var#18
        result: Var#20
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('wp_auth_check_same_domain')
        args[1]: Var#19<$same_domain>
        result: Var#21
    Expr_Assign
        var: Var#22<$same_domain>
        expr: Var#21
        result: Var#23
    Stmt_JumpIf
        cond: Var#22<$same_domain>
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Expr_Assign
        var: Var#24
        expr: LITERAL('hidden')
        result: Var#25
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Expr_Assign
        var: Var#26
        expr: LITERAL('hidden fallback')
        result: Var#27
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#5
    Parent: Block#6
    Var#28 = Phi(Var#24, Var#26)
    Var#29<$same_domain> = Phi(Var#22<$same_domain>)
    Var#30<$login_url> = Phi(Var#12<$login_url>)
    Expr_Assign
        var: Var#31<$wrap_class>
        expr: Var#28
        result: Var#32
    Terminal_Echo
        expr: LITERAL('	<div id="wp-auth-check-wrap" class="')
    Terminal_Echo
        expr: Var#31<$wrap_class>
    Terminal_Echo
        expr: LITERAL('">
        	<div id="wp-auth-check-bg"></div>
        	<div id="wp-auth-check">
        	<button type="button" class="wp-auth-check-close button-link"><span class="screen-reader-text">')
    Expr_FuncCall
        name: LITERAL('_e')
        args[0]: LITERAL('Close dialog')
        result: Var#33
    Terminal_Echo
        expr: LITERAL('</span></button>
        	')
    Stmt_JumpIf
        cond: Var#29<$same_domain>
        if: Block#8
        else: Block#9

Block#8
    Parent: Block#7
    Var#34<$login_url> = Phi(Var#30<$login_url>)
    Terminal_Echo
        expr: LITERAL('		<div id="wp-auth-check-form" class="loading" data-src="')
    Expr_Array
        keys[0]: LITERAL('interim-login')
        values[0]: LITERAL(1)
        result: Var#35
    Expr_FuncCall
        name: LITERAL('add_query_arg')
        args[0]: Var#35
        args[1]: Var#34<$login_url>
        result: Var#36
    Expr_FuncCall
        name: LITERAL('esc_url')
        args[0]: Var#36
        result: Var#37
    Terminal_Echo
        expr: Var#37
    Terminal_Echo
        expr: LITERAL('"></div>
        		')
    Stmt_Jump
        target: Block#10

Block#9
    Parent: Block#7
    Stmt_Jump
        target: Block#10

Block#10
    Parent: Block#8
    Parent: Block#9
    Var#38<$login_url> = Phi(Var#34<$login_url>, Var#30<$login_url>)
    Terminal_Echo
        expr: LITERAL('	<div class="wp-auth-fallback">
        		<p><b class="wp-auth-fallback-expired" tabindex="0">')
    Expr_FuncCall
        name: LITERAL('_e')
        args[0]: LITERAL('Session expired')
        result: Var#39
    Terminal_Echo
        expr: LITERAL('</b></p>
        		<p><a href="')
    Expr_FuncCall
        name: LITERAL('esc_url')
        args[0]: Var#38<$login_url>
        result: Var#40
    Terminal_Echo
        expr: Var#40
    Terminal_Echo
        expr: LITERAL('" target="_blank">')
    Expr_FuncCall
        name: LITERAL('_e')
        args[0]: LITERAL('Please log in again.')
        result: Var#41
    Terminal_Echo
        expr: LITERAL('</a>
        		')
    Expr_FuncCall
        name: LITERAL('_e')
        args[0]: LITERAL('The login page will open in a new window. After logging in you can close it and return to this page.')
        result: Var#42
    Terminal_Echo
        expr: LITERAL('</p>
        	</div>
        	</div>
        	</div>
        	')
    Terminal_Return

Function wp_auth_check():
Block#1
    Expr_Param
        name: LITERAL('response')
        result: Var#1<$response>
    Var#2<$GLOBALS> = Phi()
    Expr_FuncCall
        name: LITERAL('is_user_logged_in')
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#4<$GLOBALS> = Phi(Var#2<$GLOBALS>)
    Expr_ArrayDimFetch
        var: Var#4<$GLOBALS>
        dim: LITERAL('login_grace_period')
        result: Var#5
    Expr_Empty
        expr: Var#5
        result: Var#6
    Expr_Cast_Bool
        expr: Var#6
        result: Var#7
    Stmt_Jump
        target: Block#3

Block#3
    Parent: Block#1
    Parent: Block#2
    Var#8 = Phi(LITERAL(false), Var#7)
    Var#9<$response> = Phi(Var#1<$response>)
    Expr_ArrayDimFetch
        var: Var#9<$response>
        dim: LITERAL('wp-auth-check')
        result: Var#10
    Expr_Assign
        var: Var#10
        expr: Var#8
        result: Var#11
    Terminal_Return
        expr: Var#9<$response>

Function get_tag_regex():
Block#1
    Expr_Param
        name: LITERAL('tag')
        result: Var#1<$tag>
    Expr_Empty
        expr: Var#1<$tag>
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Terminal_Return

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Var#3<$tag> = Phi(Var#1<$tag>)
    Expr_FuncCall
        name: LITERAL('tag_escape')
        args[0]: Var#3<$tag>
        result: Var#4
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: LITERAL('<%1$s[^<]*(?:>[\\s\\S]*<\\/%1$s>|\\s*\\/>)')
        args[1]: Var#4
        result: Var#5
    Terminal_Return
        expr: Var#5

Function _canonical_charset():
Block#1
    Expr_Param
        name: LITERAL('charset')
        result: Var#1<$charset>
    Expr_BinaryOp_Identical
        left: LITERAL('UTF-8')
        right: Var#1<$charset>
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Parent: Block#3
    Var#3 = Phi(LITERAL(true), Var#4)
    Var#5<$charset> = Phi(Var#1<$charset>, Var#6<$charset>)
    Stmt_JumpIf
        cond: Var#3
        if: Block#4
        else: Block#5

Block#3
    Parent: Block#1
    Var#6<$charset> = Phi(Var#1<$charset>)
    Expr_BinaryOp_Identical
        left: LITERAL('utf-8')
        right: Var#6<$charset>
        result: Var#7
    Expr_Cast_Bool
        expr: Var#7
        result: Var#4
    Stmt_Jump
        target: Block#2

Block#4
    Parent: Block#2
    Parent: Block#5
    Var#8 = Phi(LITERAL(true), Var#9)
    Var#10<$charset> = Phi(Var#5<$charset>, Var#11<$charset>)
    Stmt_JumpIf
        cond: Var#8
        if: Block#6
        else: Block#7

Block#5
    Parent: Block#2
    Var#11<$charset> = Phi(Var#5<$charset>)
    Expr_BinaryOp_Identical
        left: LITERAL('utf8')
        right: Var#11<$charset>
        result: Var#12
    Expr_Cast_Bool
        expr: Var#12
        result: Var#9
    Stmt_Jump
        target: Block#4

Block#6
    Parent: Block#4
    Parent: Block#7
    Var#13 = Phi(LITERAL(true), Var#14)
    Var#15<$charset> = Phi(Var#10<$charset>, Var#16<$charset>)
    Stmt_JumpIf
        cond: Var#13
        if: Block#8
        else: Block#9

Block#7
    Parent: Block#4
    Var#16<$charset> = Phi(Var#10<$charset>)
    Expr_BinaryOp_Identical
        left: LITERAL('UTF8')
        right: Var#16<$charset>
        result: Var#17
    Expr_Cast_Bool
        expr: Var#17
        result: Var#14
    Stmt_Jump
        target: Block#6

Block#8
    Parent: Block#6
    Terminal_Return
        expr: LITERAL('UTF-8')

Block#9
    Parent: Block#6
    Stmt_Jump
        target: Block#10

Block#10
    Parent: Block#9
    Var#18<$charset> = Phi(Var#15<$charset>)
    Expr_BinaryOp_Identical
        left: LITERAL('ISO-8859-1')
        right: Var#18<$charset>
        result: Var#19
    Stmt_JumpIf
        cond: Var#19
        if: Block#11
        else: Block#12

Block#11
    Parent: Block#10
    Parent: Block#12
    Var#20 = Phi(LITERAL(true), Var#21)
    Var#22<$charset> = Phi(Var#18<$charset>, Var#23<$charset>)
    Stmt_JumpIf
        cond: Var#20
        if: Block#13
        else: Block#14

Block#12
    Parent: Block#10
    Var#23<$charset> = Phi(Var#18<$charset>)
    Expr_BinaryOp_Identical
        left: LITERAL('iso-8859-1')
        right: Var#23<$charset>
        result: Var#24
    Expr_Cast_Bool
        expr: Var#24
        result: Var#21
    Stmt_Jump
        target: Block#11

Block#13
    Parent: Block#11
    Parent: Block#14
    Var#25 = Phi(LITERAL(true), Var#26)
    Var#27<$charset> = Phi(Var#22<$charset>, Var#28<$charset>)
    Stmt_JumpIf
        cond: Var#25
        if: Block#15
        else: Block#16

Block#14
    Parent: Block#11
    Var#28<$charset> = Phi(Var#22<$charset>)
    Expr_BinaryOp_Identical
        left: LITERAL('iso8859-1')
        right: Var#28<$charset>
        result: Var#29
    Expr_Cast_Bool
        expr: Var#29
        result: Var#26
    Stmt_Jump
        target: Block#13

Block#15
    Parent: Block#13
    Parent: Block#16
    Var#30 = Phi(LITERAL(true), Var#31)
    Var#32<$charset> = Phi(Var#27<$charset>, Var#33<$charset>)
    Stmt_JumpIf
        cond: Var#30
        if: Block#17
        else: Block#18

Block#16
    Parent: Block#13
    Var#33<$charset> = Phi(Var#27<$charset>)
    Expr_BinaryOp_Identical
        left: LITERAL('ISO8859-1')
        right: Var#33<$charset>
        result: Var#34
    Expr_Cast_Bool
        expr: Var#34
        result: Var#31
    Stmt_Jump
        target: Block#15

Block#17
    Parent: Block#15
    Terminal_Return
        expr: LITERAL('ISO-8859-1')

Block#18
    Parent: Block#15
    Stmt_Jump
        target: Block#19

Block#19
    Parent: Block#18
    Var#35<$charset> = Phi(Var#32<$charset>)
    Terminal_Return
        expr: Var#35<$charset>

Function mbstring_binary_safe_encoding():
Block#1
    Expr_Param
        name: LITERAL('reset')
        defaultVar: Var#1
        result: Var#2<$reset>
        defaultBlock: Block#2
    Terminal_StaticVar
        var: Var#3<static<&$encodings>>
        defaultVar: Var#4
        defaultBlock: Block#3
    Terminal_StaticVar
        var: Var#5<static<&$overloaded>>
        defaultVar: Var#6
        defaultBlock: Block#4
    Expr_FuncCall
        name: LITERAL('is_null')
        args[0]: static<&$overloaded>
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#5
        else: Block#6

Block#2
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#1

Block#3
    Expr_Array
        result: Var#4

Block#4
    Expr_ConstFetch
        name: LITERAL('null')
        result: Var#6

Block#5
    Parent: Block#1
    Expr_Assertion<type(LITERAL('null'))>
        expr: static<&$overloaded>
        result: Var#8<static<&$overloaded>>
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('mb_internal_encoding')
        result: Var#9
    Stmt_JumpIf
        cond: Var#9
        if: Block#7
        else: Block#8

Block#6
    Parent: Block#1
    Expr_Assertion<not(type(LITERAL('null')))>
        expr: static<&$overloaded>
        result: Var#10<static<&$overloaded>>
    Stmt_Jump
        target: Block#9

Block#7
    Parent: Block#5
    Expr_FuncCall
        name: LITERAL('ini_get')
        args[0]: LITERAL('mbstring.func_overload')
        result: Var#11
    Expr_BinaryOp_BitwiseAnd
        left: Var#11
        right: LITERAL(2)
        result: Var#12
    Expr_Cast_Bool
        expr: Var#12
        result: Var#13
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#5
    Parent: Block#7
    Var#14 = Phi(LITERAL(false), Var#13)
    Var#15<$reset> = Phi(Var#2<$reset>)
    Var#16<$encodings> = Phi(Var#3<static<&$encodings>>)
    Expr_Assign
        var: Var#17<$overloaded>
        expr: Var#14
        result: Var#18
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#8
    Parent: Block#6
    Var#19<$overloaded> = Phi(Var#17<$overloaded>, Var#10<static<&$overloaded>>)
    Var#20<$reset> = Phi(Var#15<$reset>, Var#2<$reset>)
    Var#21<$encodings> = Phi(Var#16<$encodings>, Var#3<static<&$encodings>>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#22
    Expr_BinaryOp_Identical
        left: Var#22
        right: Var#19<$overloaded>
        result: Var#23
    Stmt_JumpIf
        cond: Var#23
        if: Block#10
        else: Block#11

Block#10
    Parent: Block#9
    Terminal_Return

Block#11
    Parent: Block#9
    Stmt_Jump
        target: Block#12

Block#12
    Parent: Block#11
    Var#24<$reset> = Phi(Var#20<$reset>)
    Var#25<$encodings> = Phi(Var#21<$encodings>)
    Expr_BooleanNot
        expr: Var#24<$reset>
        result: Var#26
    Stmt_JumpIf
        cond: Var#26
        if: Block#13
        else: Block#14

Block#13
    Parent: Block#12
    Var#27<$encodings> = Phi(Var#25<$encodings>)
    Expr_FuncCall
        name: LITERAL('mb_internal_encoding')
        result: Var#28
    Expr_Assign
        var: Var#29<$encoding>
        expr: Var#28
        result: Var#30
    Expr_FuncCall
        name: LITERAL('array_push')
        args[0]: Var#27<$encodings>
        args[1]: Var#29<$encoding>
        result: Var#31
    Expr_FuncCall
        name: LITERAL('mb_internal_encoding')
        args[0]: LITERAL('ISO-8859-1')
        result: Var#32
    Stmt_Jump
        target: Block#15

Block#14
    Parent: Block#12
    Stmt_Jump
        target: Block#15

Block#15
    Parent: Block#13
    Parent: Block#14
    Var#33<$reset> = Phi(Var#24<$reset>)
    Var#34<$encodings> = Phi(Var#27<$encodings>, Var#25<$encodings>)
    Stmt_JumpIf
        cond: Var#33<$reset>
        if: Block#16
        else: Block#17

Block#16
    Parent: Block#15
    Var#35<$encodings> = Phi(Var#34<$encodings>)
    Expr_Cast_Bool
        expr: Var#35<$encodings>
        result: Var#36
    Stmt_Jump
        target: Block#17

Block#17
    Parent: Block#15
    Parent: Block#16
    Var#37 = Phi(LITERAL(false), Var#36)
    Var#38<$encodings> = Phi(Var#34<$encodings>, Var#35<$encodings>)
    Stmt_JumpIf
        cond: Var#37
        if: Block#18
        else: Block#19

Block#18
    Parent: Block#17
    Var#39<$encodings> = Phi(Var#38<$encodings>)
    Expr_FuncCall
        name: LITERAL('array_pop')
        args[0]: Var#39<$encodings>
        result: Var#40
    Expr_Assign
        var: Var#41<$encoding>
        expr: Var#40
        result: Var#42
    Expr_FuncCall
        name: LITERAL('mb_internal_encoding')
        args[0]: Var#41<$encoding>
        result: Var#43
    Stmt_Jump
        target: Block#20

Block#19
    Parent: Block#17
    Stmt_Jump
        target: Block#20

Block#20
    Parent: Block#18
    Parent: Block#19
    Terminal_Return

Function reset_mbstring_encoding():
Block#1
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#1
    Expr_FuncCall
        name: LITERAL('mbstring_binary_safe_encoding')
        args[0]: Var#1
        result: Var#2
    Terminal_Return

Function wp_validate_boolean():
Block#1
    Expr_Param
        name: LITERAL('var')
        result: Var#1<$var>
    Expr_FuncCall
        name: LITERAL('is_bool')
        args[0]: Var#1<$var>
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#3<$var> = Phi(Var#1<$var>)
    Expr_Assertion<type(LITERAL('bool'))>
        expr: Var#3<$var>
        result: Var#4<$var>
    Terminal_Return
        expr: Var#4<$var>

Block#3
    Parent: Block#1
    Var#5<$var> = Phi(Var#1<$var>)
    Expr_Assertion<not(type(LITERAL('bool')))>
        expr: Var#5<$var>
        result: Var#6<$var>
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Var#7<$var> = Phi(Var#6<$var>)
    Expr_FuncCall
        name: LITERAL('is_string')
        args[0]: Var#7<$var>
        result: Var#8
    Stmt_JumpIf
        cond: Var#8
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Var#9<$var> = Phi(Var#7<$var>)
    Expr_FuncCall
        name: LITERAL('strtolower')
        args[0]: Var#9<$var>
        result: Var#10
    Expr_BinaryOp_Identical
        left: LITERAL('false')
        right: Var#10
        result: Var#11
    Expr_Cast_Bool
        expr: Var#11
        result: Var#12
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#4
    Parent: Block#5
    Var#13 = Phi(LITERAL(false), Var#12)
    Var#14<$var> = Phi(Var#7<$var>, Var#9<$var>)
    Stmt_JumpIf
        cond: Var#13
        if: Block#7
        else: Block#8

Block#7
    Parent: Block#6
    Var#15<$var> = Phi(Var#14<$var>)
    Expr_Assertion<type(LITERAL('string'))>
        expr: Var#15<$var>
        result: Var#16<$var>
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#17
    Terminal_Return
        expr: Var#17

Block#8
    Parent: Block#6
    Var#18<$var> = Phi(Var#14<$var>)
    Expr_Assertion<not(type(LITERAL('string')))>
        expr: Var#18<$var>
        result: Var#19<$var>
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#8
    Var#20<$var> = Phi(Var#19<$var>)
    Expr_Cast_Bool
        expr: Var#20<$var>
        result: Var#21
    Terminal_Return
        expr: Var#21

Function wp_delete_file():
Block#1
    Expr_Param
        name: LITERAL('file')
        result: Var#1<$file>
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('wp_delete_file')
        args[1]: Var#1<$file>
        result: Var#2
    Expr_Assign
        var: Var#3<$delete>
        expr: Var#2
        result: Var#4
    Expr_Empty
        expr: Var#3<$delete>
        result: Var#5
    Expr_BooleanNot
        expr: Var#5
        result: Var#6
    Stmt_JumpIf
        cond: Var#6
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#2
    Var#7<$delete> = Phi(Var#3<$delete>)
    Expr_FuncCall
        name: LITERAL('unlink')
        args[0]: Var#7<$delete>
        result: Var#8
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#6
    Parent: Block#3
    Terminal_Return

Block#6
    Parent: Block#4
    Stmt_Jump
        target: Block#5

Function wp_delete_file_from_directory():
Block#1
    Expr_Param
        name: LITERAL('file')
        result: Var#1<$file>
    Expr_Param
        name: LITERAL('directory')
        result: Var#2<$directory>
    Expr_FuncCall
        name: LITERAL('wp_normalize_path')
        args[0]: Var#1<$file>
        result: Var#3
    Expr_FuncCall
        name: LITERAL('realpath')
        args[0]: Var#3
        result: Var#4
    Expr_Assign
        var: Var#5<$real_file>
        expr: Var#4
        result: Var#6
    Expr_FuncCall
        name: LITERAL('wp_normalize_path')
        args[0]: Var#2<$directory>
        result: Var#7
    Expr_FuncCall
        name: LITERAL('realpath')
        args[0]: Var#7
        result: Var#8
    Expr_Assign
        var: Var#9<$real_directory>
        expr: Var#8
        result: Var#10
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#11
    Expr_BinaryOp_Identical
        left: Var#11
        right: Var#5<$real_file>
        result: Var#12
    Stmt_JumpIf
        cond: Var#12
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Parent: Block#3
    Var#13 = Phi(LITERAL(true), Var#14)
    Var#15<$real_file> = Phi(Var#5<$real_file>)
    Var#16<$real_directory> = Phi(Var#9<$real_directory>, Var#17<$real_directory>)
    Var#18<$file> = Phi(Var#1<$file>)
    Stmt_JumpIf
        cond: Var#13
        if: Block#4
        else: Block#5

Block#3
    Parent: Block#1
    Var#17<$real_directory> = Phi(Var#9<$real_directory>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#19
    Expr_BinaryOp_Identical
        left: Var#19
        right: Var#17<$real_directory>
        result: Var#20
    Expr_Cast_Bool
        expr: Var#20
        result: Var#14
    Stmt_Jump
        target: Block#2

Block#4
    Parent: Block#2
    Parent: Block#5
    Var#21 = Phi(LITERAL(true), Var#22)
    Var#23<$file> = Phi(Var#18<$file>)
    Stmt_JumpIf
        cond: Var#21
        if: Block#6
        else: Block#7

Block#5
    Parent: Block#2
    Var#24<$real_file> = Phi(Var#15<$real_file>)
    Var#25<$real_directory> = Phi(Var#16<$real_directory>)
    Expr_FuncCall
        name: LITERAL('wp_normalize_path')
        args[0]: Var#24<$real_file>
        result: Var#26
    Expr_FuncCall
        name: LITERAL('wp_normalize_path')
        args[0]: Var#25<$real_directory>
        result: Var#27
    Expr_FuncCall
        name: LITERAL('trailingslashit')
        args[0]: Var#27
        result: Var#28
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#26
        args[1]: Var#28
        result: Var#29
    Expr_BinaryOp_NotIdentical
        left: Var#29
        right: LITERAL(0)
        result: Var#30
    Expr_Cast_Bool
        expr: Var#30
        result: Var#22
    Stmt_Jump
        target: Block#4

Block#6
    Parent: Block#4
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#31
    Terminal_Return
        expr: Var#31

Block#7
    Parent: Block#4
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#7
    Var#32<$file> = Phi(Var#23<$file>)
    Expr_FuncCall
        name: LITERAL('wp_delete_file')
        args[0]: Var#32<$file>
        result: Var#33
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#34
    Terminal_Return
        expr: Var#34

Function wp_post_preview_js():
Block#1
    Var#1<$post> = Phi()
    Terminal_GlobalVar
        var: LITERAL('post')
    Expr_FuncCall
        name: LITERAL('is_preview')
        result: Var#2
    Expr_BooleanNot
        expr: Var#2
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Parent: Block#3
    Var#4 = Phi(LITERAL(true), Var#5)
    Var#6<$post> = Phi(Var#1<$post>, Var#7<$post>)
    Stmt_JumpIf
        cond: Var#4
        if: Block#4
        else: Block#5

Block#3
    Parent: Block#1
    Var#7<$post> = Phi(Var#1<$post>)
    Expr_Empty
        expr: Var#7<$post>
        result: Var#8
    Expr_Cast_Bool
        expr: Var#8
        result: Var#5
    Stmt_Jump
        target: Block#2

Block#4
    Parent: Block#2
    Terminal_Return

Block#5
    Parent: Block#2
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#5
    Var#9<$post> = Phi(Var#6<$post>)
    Expr_PropertyFetch
        var: Var#9<$post>
        name: LITERAL('ID')
        result: Var#10
    Expr_Cast_Int
        expr: Var#10
        result: Var#11
    Expr_BinaryOp_Concat
        left: LITERAL('wp-preview-')
        right: Var#11
        result: Var#12
    Expr_Assign
        var: Var#13<$name>
        expr: Var#12
        result: Var#14
    Terminal_Echo
        expr: LITERAL('	<script>
        	( function() {
        		var query = document.location.search;
        
        		if ( query && query.indexOf( \'preview=true\' ) !== -1 ) {
        			window.name = \'')
    Terminal_Echo
        expr: Var#13<$name>
    Terminal_Echo
        expr: LITERAL('\';
        		}
        
        		if ( window.addEventListener ) {
        			window.addEventListener( \'unload\', function() { window.name = \'\'; }, false );
        		}
        	}());
        	</script>
        	')
    Terminal_Return

Function mysql_to_rfc3339():
Block#1
    Expr_Param
        name: LITERAL('date_string')
        result: Var#1<$date_string>
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#2
    Expr_FuncCall
        name: LITERAL('mysql2date')
        args[0]: LITERAL('c')
        args[1]: Var#1<$date_string>
        args[2]: Var#2
        result: Var#3
    Expr_Assign
        var: Var#4<$formatted>
        expr: Var#3
        result: Var#5
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/(?:Z|[+-]\\d{2}(?::\\d{2})?)$/')
        args[1]: LITERAL('')
        args[2]: Var#4<$formatted>
        result: Var#6
    Terminal_Return
        expr: Var#6

Function wp_raise_memory_limit():
Block#1
    Expr_Param
        name: LITERAL('context')
        defaultVar: LITERAL('admin')
        result: Var#1<$context>
        defaultBlock: Block#2
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#2
    Expr_FuncCall
        name: LITERAL('wp_is_ini_value_changeable')
        args[0]: LITERAL('memory_limit')
        result: Var#3
    Expr_BinaryOp_Identical
        left: Var#2
        right: Var#3
        result: Var#4
    Stmt_JumpIf
        cond: Var#4
        if: Block#3
        else: Block#4

Block#2

Block#3
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#5
    Terminal_Return
        expr: Var#5

Block#4
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#4
    Var#6<$context> = Phi(Var#1<$context>)
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#5
    Expr_FuncCall
        name: LITERAL('ini_get')
        args[0]: LITERAL('memory_limit')
        result: Var#7
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#6
    Expr_Assign
        var: Var#8<$current_limit>
        expr: Var#7
        result: Var#9
    Expr_FuncCall
        name: LITERAL('wp_convert_hr_to_bytes')
        args[0]: Var#8<$current_limit>
        result: Var#10
    Expr_Assign
        var: Var#11<$current_limit_int>
        expr: Var#10
        result: Var#12
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#13
    Expr_BinaryOp_Identical
        left: Var#13
        right: Var#11<$current_limit_int>
        result: Var#14
    Stmt_JumpIf
        cond: Var#14
        if: Block#8
        else: Block#9

Block#8
    Parent: Block#7
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#15
    Terminal_Return
        expr: Var#15

Block#9
    Parent: Block#7
    Stmt_Jump
        target: Block#10

Block#10
    Parent: Block#9
    Var#16<$context> = Phi(Var#6<$context>)
    Var#17<$current_limit_int> = Phi(Var#11<$current_limit_int>)
    Expr_ConstFetch
        name: LITERAL('WP_MAX_MEMORY_LIMIT')
        result: Var#18
    Expr_Assign
        var: Var#19<$wp_max_limit>
        expr: Var#18
        result: Var#20
    Expr_FuncCall
        name: LITERAL('wp_convert_hr_to_bytes')
        args[0]: Var#19<$wp_max_limit>
        result: Var#21
    Expr_Assign
        var: Var#22<$wp_max_limit_int>
        expr: Var#21
        result: Var#23
    Expr_Assign
        var: Var#24<$filtered_limit>
        expr: Var#19<$wp_max_limit>
        result: Var#25
    Stmt_Switch
        cond: Var#16<$context>
        cases[0]: LITERAL('admin')
        cases[1]: LITERAL('image')
        targets[0]: Block#11
        targets[1]: Block#12
        default: Block#13

Block#11
    Parent: Block#10
    Var#26<$filtered_limit> = Phi(Var#24<$filtered_limit>)
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('admin_memory_limit')
        args[1]: Var#26<$filtered_limit>
        result: Var#27
    Expr_Assign
        var: Var#28<$filtered_limit>
        expr: Var#27
        result: Var#29
    Stmt_Jump
        target: Block#14

Block#12
    Parent: Block#10
    Var#30<$filtered_limit> = Phi(Var#24<$filtered_limit>)
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: LITERAL('image_memory_limit')
        args[1]: Var#30<$filtered_limit>
        result: Var#31
    Expr_Assign
        var: Var#32<$filtered_limit>
        expr: Var#31
        result: Var#33
    Stmt_Jump
        target: Block#14

Block#13
    Parent: Block#10
    Var#34<$context> = Phi(Var#16<$context>)
    Var#35<$filtered_limit> = Phi(Var#24<$filtered_limit>)
    Expr_ConcatList
        list[0]: Var#34<$context>
        list[1]: LITERAL('_memory_limit')
        result: Var#36
    Expr_FuncCall
        name: LITERAL('apply_filters')
        args[0]: Var#36
        args[1]: Var#35<$filtered_limit>
        result: Var#37
    Expr_Assign
        var: Var#38<$filtered_limit>
        expr: Var#37
        result: Var#39
    Stmt_Jump
        target: Block#14

Block#14
    Parent: Block#11
    Parent: Block#12
    Parent: Block#13
    Var#40<$filtered_limit> = Phi(Var#41<$filtered_limit>, Var#28<$filtered_limit>, Var#32<$filtered_limit>, Var#38<$filtered_limit>)
    Var#42<$wp_max_limit_int> = Phi(Var#43<$wp_max_limit_int>, Var#22<$wp_max_limit_int>)
    Var#44<$current_limit_int> = Phi(Var#45<$current_limit_int>, Var#17<$current_limit_int>)
    Var#46<$wp_max_limit> = Phi(Var#47<$wp_max_limit>, Var#19<$wp_max_limit>)
    Expr_FuncCall
        name: LITERAL('wp_convert_hr_to_bytes')
        args[0]: Var#40<$filtered_limit>
        result: Var#48
    Expr_Assign
        var: Var#49<$filtered_limit_int>
        expr: Var#48
        result: Var#50
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#51
    Expr_BinaryOp_Identical
        left: Var#51
        right: Var#49<$filtered_limit_int>
        result: Var#52
    Stmt_JumpIf
        cond: Var#52
        if: Block#15
        else: Block#16

Block#15
    Parent: Block#14
    Parent: Block#20
    Var#53 = Phi(LITERAL(true), Var#54)
    Var#55<$filtered_limit> = Phi(Var#40<$filtered_limit>, Var#56<$filtered_limit>)
    Var#57<$wp_max_limit_int> = Phi(Var#42<$wp_max_limit_int>, Var#58<$wp_max_limit_int>)
    Var#59<$current_limit_int> = Phi(Var#44<$current_limit_int>, Var#60<$current_limit_int>)
    Var#61<$wp_max_limit> = Phi(Var#46<$wp_max_limit>, Var#62<$wp_max_limit>)
    Stmt_JumpIf
        cond: Var#53
        if: Block#17
        else: Block#18

Block#16
    Parent: Block#14
    Var#63<$filtered_limit_int> = Phi(Var#49<$filtered_limit_int>)
    Var#64<$wp_max_limit_int> = Phi(Var#42<$wp_max_limit_int>)
    Expr_BinaryOp_Greater
        left: Var#63<$filtered_limit_int>
        right: Var#64<$wp_max_limit_int>
        result: Var#65
    Stmt_JumpIf
        cond: Var#65
        if: Block#19
        else: Block#20

Block#17
    Parent: Block#15
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#66
    Stmt_Jump
        target: Block#21

Block#18
    Parent: Block#15
    Var#67<$wp_max_limit_int> = Phi(Var#57<$wp_max_limit_int>)
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#68
    Expr_BinaryOp_Identical
        left: Var#68
        right: Var#67<$wp_max_limit_int>
        result: Var#69
    Stmt_JumpIf
        cond: Var#69
        if: Block#22
        else: Block#23

Block#19
    Parent: Block#16
    Var#70<$filtered_limit_int> = Phi(Var#63<$filtered_limit_int>)
    Var#71<$current_limit_int> = Phi(Var#44<$current_limit_int>)
    Expr_BinaryOp_Greater
        left: Var#70<$filtered_limit_int>
        right: Var#71<$current_limit_int>
        result: Var#72
    Expr_Cast_Bool
        expr: Var#72
        result: Var#73
    Stmt_Jump
        target: Block#20

Block#20
    Parent: Block#16
    Parent: Block#19
    Var#74 = Phi(LITERAL(false), Var#73)
    Var#56<$filtered_limit> = Phi(Var#40<$filtered_limit>)
    Var#58<$wp_max_limit_int> = Phi(Var#64<$wp_max_limit_int>)
    Var#60<$current_limit_int> = Phi(Var#44<$current_limit_int>, Var#71<$current_limit_int>)
    Var#62<$wp_max_limit> = Phi(Var#46<$wp_max_limit>)
    Expr_Cast_Bool
        expr: Var#74
        result: Var#54
    Stmt_Jump
        target: Block#15

Block#21
    Parent: Block#17
    Var#75<$filtered_limit> = Phi(Var#55<$filtered_limit>)
    Expr_FuncCall
        name: LITERAL('ini_set')
        args[0]: LITERAL('memory_limit')
        args[1]: Var#75<$filtered_limit>
        result: Var#76
    Stmt_Jump
        target: Block#24

Block#22
    Parent: Block#18
    Parent: Block#23
    Var#77 = Phi(LITERAL(true), Var#78)
    Var#79<$wp_max_limit> = Phi(Var#61<$wp_max_limit>)
    Stmt_JumpIf
        cond: Var#77
        if: Block#25
        else: Block#26

Block#23
    Parent: Block#18
    Var#80<$wp_max_limit_int> = Phi(Var#67<$wp_max_limit_int>)
    Var#81<$current_limit_int> = Phi(Var#59<$current_limit_int>)
    Expr_BinaryOp_Greater
        left: Var#80<$wp_max_limit_int>
        right: Var#81<$current_limit_int>
        result: Var#82
    Expr_Cast_Bool
        expr: Var#82
        result: Var#78
    Stmt_Jump
        target: Block#22

Block#24
    Parent: Block#21
    Expr_BinaryOp_NotIdentical
        left: Var#66
        right: Var#76
        result: Var#83
    Stmt_JumpIf
        cond: Var#83
        if: Block#27
        else: Block#28

Block#25
    Parent: Block#22
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#84
    Stmt_Jump
        target: Block#29

Block#26
    Parent: Block#22
    Stmt_Jump
        target: Block#30

Block#27
    Parent: Block#24
    Var#85<$filtered_limit> = Phi(Var#75<$filtered_limit>)
    Terminal_Return
        expr: Var#85<$filtered_limit>

Block#28
    Parent: Block#24
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#86
    Terminal_Return
        expr: Var#86

Block#29
    Parent: Block#25
    Var#87<$wp_max_limit> = Phi(Var#79<$wp_max_limit>)
    Expr_FuncCall
        name: LITERAL('ini_set')
        args[0]: LITERAL('memory_limit')
        args[1]: Var#87<$wp_max_limit>
        result: Var#88
    Stmt_Jump
        target: Block#31

Block#30
    Parent: Block#26
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#89
    Terminal_Return
        expr: Var#89

Block#31
    Parent: Block#29
    Expr_BinaryOp_NotIdentical
        left: Var#84
        right: Var#88
        result: Var#90
    Stmt_JumpIf
        cond: Var#90
        if: Block#32
        else: Block#33

Block#32
    Parent: Block#31
    Var#91<$wp_max_limit> = Phi(Var#87<$wp_max_limit>)
    Terminal_Return
        expr: Var#91<$wp_max_limit>

Block#33
    Parent: Block#31
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#92
    Terminal_Return
        expr: Var#92
